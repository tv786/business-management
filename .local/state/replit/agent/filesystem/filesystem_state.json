{"file_contents":{"FIREBASE_SETUP_GUIDE.md":{"content":"# Firebase Setup Guide for Business Management System\n\n## Prerequisites\n- Google account\n- Access to Firebase Console (https://console.firebase.google.com/)\n\n## Step 1: Create Firebase Project\n\n1. Go to https://console.firebase.google.com/\n2. Click \"Create a project\" or \"Add project\"\n3. Enter project name: `business-management-system` (or your preferred name)\n4. Choose whether to enable Google Analytics (recommended for user insights)\n5. Select your Google Analytics account if enabled\n6. Click \"Create project\"\n\n## Step 2: Configure Authentication\n\n1. In your Firebase project console, click \"Authentication\" in the left sidebar\n2. Click \"Get started\" if this is your first time\n3. Go to \"Sign-in method\" tab\n4. Enable the following sign-in providers:\n   - **Email/Password**: Click on it, toggle \"Enable\", then \"Save\"\n   - **Google** (optional but recommended): Click on it, toggle \"Enable\", add your project's public-facing name and support email, then \"Save\"\n\n## Step 3: Configure Firestore Database\n\n1. In your Firebase project console, click \"Firestore Database\" in the left sidebar\n2. Click \"Create database\"\n3. Choose \"Start in test mode\" (we'll configure security rules later)\n4. Select a location closest to your users (e.g., us-central1)\n5. Click \"Done\"\n\n## Step 4: Configure Security Rules\n\n1. In Firestore Database, go to \"Rules\" tab\n2. Replace the default rules with:\n\n```javascript\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Users can only access their own data\n    match /users/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId;\n    }\n    \n    // User data collections (vendors, transactions, projects, settings)\n    match /users/{userId}/{collection=**} {\n      allow read, write: if request.auth != null && request.auth.uid == userId;\n    }\n  }\n}\n```\n\n3. Click \"Publish\"\n\n## Step 5: Get Firebase Configuration\n\n1. In your Firebase project console, click the gear icon (‚öôÔ∏è) next to \"Project Overview\"\n2. Select \"Project settings\"\n3. Scroll down to \"Your apps\" section\n4. Click the web icon (</>) to add a web app\n5. Enter app nickname: `business-management-webapp`\n6. Check \"Also set up Firebase Hosting\" (optional but recommended)\n7. Click \"Register app\"\n8. Copy the Firebase configuration object (looks like this):\n\n```javascript\nconst firebaseConfig = {\n  apiKey: \"your-api-key\",\n  authDomain: \"your-project.firebaseapp.com\",\n  projectId: \"your-project-id\",\n  storageBucket: \"your-project.appspot.com\", \n  messagingSenderId: \"123456789\",\n  appId: \"your-app-id\"\n};\n```\n\n## Step 6: Configure the Web App\n\n1. Create a file called `js/firebase-config.js` in your project\n2. Add your Firebase configuration:\n\n```javascript\n// Replace with your actual Firebase config\nconst firebaseConfig = {\n  apiKey: \"your-api-key\",\n  authDomain: \"your-project.firebaseapp.com\", \n  projectId: \"your-project-id\",\n  storageBucket: \"your-project.appspot.com\",\n  messagingSenderId: \"123456789\",\n  appId: \"your-app-id\"\n};\n\nexport { firebaseConfig };\n```\n\n## Step 7: Optional - Set up Firebase Hosting\n\n1. In Firebase console, go to \"Hosting\" in the left sidebar\n2. Click \"Get started\"\n3. Follow the setup instructions to deploy your app to Firebase Hosting\n4. Your app will be available at `https://your-project-id.web.app`\n\n## Security Considerations\n\n1. **Never commit your Firebase config to public repositories** - the config contains sensitive keys\n2. **Use environment variables** or secure configuration management in production\n3. **Regularly review your Firestore security rules** to ensure data protection\n4. **Enable App Check** in production for additional security\n5. **Monitor usage** in Firebase console to detect unusual activity\n\n## Data Structure\n\nThe app will store data in Firestore with this structure:\n```\nusers/\n  {userId}/\n    profile/\n      companyName: string\n      businessType: string\n      settings: object\n    vendors/\n      {vendorId}: vendor object\n    transactions/\n      {transactionId}: transaction object  \n    projects/\n      {projectId}: project object\n```\n\n## Troubleshooting\n\n- **\"Firebase not defined\" error**: Make sure Firebase scripts are loaded before your app scripts\n- **\"Permission denied\" error**: Check your Firestore security rules and ensure user is authenticated\n- **\"Network error\"**: Check if Firebase services are properly configured and your internet connection\n- **\"Auth domain not configured\"**: Ensure your domain is added to Firebase Authentication settings\n\n## Support\n- Firebase Documentation: https://firebase.google.com/docs\n- Firebase Console: https://console.firebase.google.com/\n- Stack Overflow: Tag your questions with `firebase` and `javascript`","size_bytes":4712},"README_FIREBASE_SETUP.md":{"content":"# üî• Firebase Setup for Business Management System\n\n## ‚úÖ Migration Complete!\n\nYour Business Management System has been successfully migrated from Replit Agent to a full Replit environment with Firebase integration! \n\n## üöÄ What's New\n\n- **Cross-device sync**: Your data now syncs across all your devices\n- **User authentication**: Secure login with email/password or Google\n- **Offline-first**: Works without internet, syncs when online\n- **Real-time updates**: Changes sync instantly across devices\n- **Enhanced security**: Your data is protected in Google's cloud\n\n## üìã Next Steps to Complete Setup\n\n### 1. Create Firebase Project (5 minutes)\n\n1. Go to [Firebase Console](https://console.firebase.google.com/)\n2. Click \"Create a project\"\n3. Project name: `business-management-system`\n4. Enable Google Analytics (recommended)\n5. Click \"Create project\"\n\n### 2. Enable Authentication (2 minutes)\n\n1. In Firebase Console ‚Üí Authentication ‚Üí Get started\n2. Sign-in method ‚Üí Enable \"Email/Password\"\n3. Optional: Enable \"Google\" sign-in for easier login\n\n### 3. Setup Firestore Database (2 minutes)\n\n1. In Firebase Console ‚Üí Firestore Database ‚Üí Create database\n2. Start in **test mode** (we'll secure it later)\n3. Choose location closest to your users\n4. Click \"Done\"\n\n### 4. Get Configuration Keys (3 minutes)\n\n1. Project Settings (gear icon) ‚Üí Your apps\n2. Click web icon (</>) ‚Üí Register app\n3. App nickname: `business-management-webapp`\n4. Copy the configuration object that looks like:\n\n```javascript\nconst firebaseConfig = {\n  apiKey: \"your-api-key\",\n  authDomain: \"your-project.firebaseapp.com\",\n  projectId: \"your-project-id\",\n  storageBucket: \"your-project.appspot.com\",\n  messagingSenderId: \"123456789\",\n  appId: \"your-app-id\"\n};\n```\n\n### 5. Configure Your App (1 minute)\n\n1. Open `js/firebase-config.js` in your project\n2. Replace the placeholder values with your actual Firebase config\n3. Save the file\n\n```javascript\n// In js/firebase-config.js\nconst firebaseConfig = {\n  apiKey: \"AIza...\", // Your actual API key\n  authDomain: \"your-project.firebaseapp.com\",\n  projectId: \"your-actual-project-id\",\n  storageBucket: \"your-project.appspot.com\",\n  messagingSenderId: \"123456789\",\n  appId: \"1:123:web:abc123\"\n};\n```\n\n### 6. Secure Your Database (2 minutes)\n\n1. Firestore Database ‚Üí Rules ‚Üí Replace with:\n\n```javascript\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /users/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId;\n    }\n    match /users/{userId}/{collection=**} {\n      allow read, write: if request.auth != null && request.auth.uid == userId;\n    }\n  }\n}\n```\n\n2. Click \"Publish\"\n\n## üéâ You're Ready!\n\nYour business management system now supports:\n\n- ‚úÖ **User Accounts**: Sign up with email or Google\n- ‚úÖ **Data Sync**: Access your data from any device\n- ‚úÖ **Offline Mode**: Works without internet\n- ‚úÖ **Secure Storage**: Your data is protected\n- ‚úÖ **Real-time Updates**: Changes sync instantly\n\n## üîß How to Use\n\n1. **Without Account**: Browse features, but data stays local\n2. **With Account**: \n   - Click \"Login\" button\n   - Create account or sign in\n   - Your data syncs across all devices\n   - Use sync button (üîÑ) to force data sync\n\n## üõ†Ô∏è Technical Details\n\n- **Frontend**: Pure JavaScript (no frameworks)\n- **Backend**: Firebase (Google Cloud)\n- **Database**: Firestore + localStorage hybrid\n- **Auth**: Firebase Authentication\n- **Hosting**: Replit (or deploy to Firebase Hosting)\n\n## üÜò Need Help?\n\n1. **Firebase Console**: https://console.firebase.google.com/\n2. **Firebase Docs**: https://firebase.google.com/docs\n3. **Replit Support**: Contact via Replit platform\n\n## üì± Mobile App Features\n\n- Install as app on phone/desktop\n- Works offline\n- Push notifications (coming soon)\n- Native app experience\n\nYour business management system is now enterprise-ready with cloud sync and user authentication!","size_bytes":3971},"replit.md":{"content":"# Business Management System\n\n## Overview\n\nThis is a comprehensive Progressive Web Application (PWA) designed for business management across multiple industries including construction, retail, manufacturing, and service businesses. The application provides vendor management, transaction tracking, project management, and analytics. The application now includes user authentication, allowing users to browse without an account but requiring login to use business features.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes\n\n### July 27, 2025 - Replit Migration Complete\n- Successfully migrated from Replit Agent to standard Replit environment\n- Installed Python 3.11 for server functionality\n- All components verified working: Firebase auth, PWA features, service worker\n- Application serving successfully on port 5000\n- All JavaScript modules loading correctly\n- Enhanced transaction forms with quick add options for projects and vendors\n- Added contact picker integration for mobile devices\n\n## System Architecture\n\n### Frontend Architecture\n- **Technology Stack**: Vanilla JavaScript ES6 modules with HTML5 and CSS3\n- **PWA Implementation**: Service Worker for offline functionality, Web App Manifest for installability\n- **Responsive Design**: Mobile-first approach with tablet and desktop breakpoints\n- **Component Architecture**: Modular JavaScript classes for each business domain\n\n### Backend Architecture\n- **Firebase Integration**: Google Firebase for authentication and cloud storage\n- **Data Storage**: Hybrid approach - localStorage for offline, Firestore for cloud sync\n- **Authentication**: Firebase Auth with email/password and Google sign-in\n- **Offline-First**: Complete functionality without internet connection\n- **Data Synchronization**: Real-time sync across devices when authenticated\n\n## Key Components\n\n### 1. Storage Management (`js/storage.js`)\n- **Purpose**: Centralized data management using localStorage\n- **Key Features**: \n  - Vendor management\n  - Transaction tracking\n  - Project management\n  - Application settings\n- **Data Structure**: JSON-based storage with error handling\n\n### 2. Vendor Management (`js/vendors.js`)\n- **Purpose**: Manage business vendors and suppliers\n- **Features**: Add, edit, delete, search, filter, and sort vendors\n- **Data Tracking**: Contact information, categories, status tracking\n\n### 3. Transaction Management (`js/transactions.js`)\n- **Purpose**: Financial transaction tracking\n- **Features**: Income/expense tracking, vendor association, project linking\n- **Filtering**: By type, vendor, project, date ranges\n\n### 4. Project Management (`js/projects.js`)\n- **Purpose**: Track business projects and their progress\n- **Features**: Project creation, status tracking, financial monitoring\n- **Integration**: Links with transactions and vendors\n\n### 5. Analytics Dashboard (`js/analytics.js`)\n- **Purpose**: Business intelligence and reporting\n- **Features**: Statistical overview, charts, recent activities\n- **Metrics**: Revenue, expenses, project status, vendor performance\n\n\n### 6. Settings Management (`js/settings.js`)\n- **Purpose**: Application customization\n- **Features**: Company branding, theme customization, business type selection\n- **Customization**: Colors, currency, language, date format\n\n### 7. Authentication Management (`js/auth.js`)\n- **Purpose**: User authentication and session management\n- **Features**: Login/signup modals, user session persistence, authentication checks\n- **Storage**: Client-side user storage using localStorage\n- **Integration**: Allows browsing without account, requires login for business features\n\n## Data Flow\n\n1. **User Interaction**: User interacts with UI components\n2. **Manager Classes**: Specific manager classes handle business logic\n3. **Storage Layer**: StorageManager handles all data persistence\n4. **UI Updates**: Components update the DOM based on data changes\n5. **Offline Support**: Service Worker ensures functionality without internet\n\n## External Dependencies\n\n### CDN Resources\n- **Font Awesome 6.4.0**: Icon library for UI elements\n- **Google Fonts (Inter)**: Primary typography\n- **Chart.js**: Data visualization library (referenced in service worker)\n\n### Browser APIs\n- **localStorage**: Primary data storage\n- **Service Worker API**: Offline functionality\n- **Web App Manifest**: PWA installation\n- **Responsive Design**: CSS Grid and Flexbox\n\n## Deployment Strategy\n\n### PWA Deployment\n- **Hosting**: Static file hosting (can be served from any web server)\n- **Caching Strategy**: Service Worker caches static assets for offline use\n- **Installation**: Users can install as native app on mobile/desktop\n- **Updates**: Cache versioning system for application updates\n\n### Performance Optimization\n- **Cache-First Strategy**: Static assets served from cache\n- **Lazy Loading**: Modules loaded as needed\n- **Compression**: CSS and JavaScript minification recommended\n- **CDN Integration**: External resources loaded from CDN\n\n### Browser Compatibility\n- **Modern Browsers**: Requires ES6 module support\n- **Progressive Enhancement**: Graceful degradation for older browsers\n- **Mobile Optimization**: Touch-friendly interface with responsive design\n\n## Architecture Decisions\n\n### Why Client-Side Only?\n- **Problem**: Need for simple deployment without server infrastructure\n- **Solution**: Complete client-side application with localStorage\n- **Benefits**: No server costs, easy deployment, works offline\n- **Limitations**: No data synchronization across devices\n\n### Why Vanilla JavaScript?\n- **Problem**: Need for lightweight, fast-loading application\n- **Solution**: ES6 modules without heavy frameworks\n- **Benefits**: Smaller bundle size, faster load times, no framework dependencies\n- **Trade-offs**: More verbose code, manual DOM manipulation\n\n### Why localStorage?\n- **Problem**: Need for persistent data storage without database\n- **Solution**: Browser's localStorage API\n- **Benefits**: Simple implementation, works offline, no server required\n- **Limitations**: Storage size limits, single-device access\n\n### Why PWA Architecture?\n- **Problem**: Need for app-like experience across devices\n- **Solution**: Progressive Web App with Service Worker\n- **Benefits**: Offline functionality, installable, native app feel\n- **Requirements**: HTTPS for production deployment","size_bytes":6362},"sw.js":{"content":"// Service Worker for Business Management System\r\nconst CACHE_NAME = `business-management-v${Date.now()}`;\r\nconst STATIC_CACHE = `static-v${Date.now()}`;\r\nconst DYNAMIC_CACHE = `dynamic-v${Date.now()}`;\r\n\r\n// Files to cache for offline functionality\r\nconst STATIC_FILES = [\r\n    '/',\r\n    '/index.html',\r\n    '/styles/main.css',\r\n    '/styles/components.css',\r\n    '/styles/responsive.css',\r\n    '/js/main.js',\r\n    '/js/storage.js',\r\n    '/js/vendors.js',\r\n    '/js/transactions.js',\r\n    '/js/projects.js',\r\n    '/js/analytics.js',\r\n\r\n    '/js/settings.js',\r\n    '/js/utils.js',\r\n    '/assets/logo.svg',\r\n    '/manifest.json',\r\n    // External dependencies\r\n    'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap',\r\n    'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css',\r\n    'https://cdn.jsdelivr.net/npm/chart.js'\r\n];\r\n\r\n// Install event - cache static files\r\nself.addEventListener('install', event => {\r\n    console.log('Service Worker installing...');\r\n    \r\n    event.waitUntil(\r\n        caches.open(STATIC_CACHE)\r\n            .then(cache => {\r\n                console.log('Caching static files...');\r\n                return cache.addAll(STATIC_FILES);\r\n            })\r\n            .then(() => {\r\n                console.log('Static files cached successfully');\r\n                return self.skipWaiting();\r\n            })\r\n            .catch(error => {\r\n                console.error('Error caching static files:', error);\r\n            })\r\n    );\r\n});\r\n\r\n// Activate event - clean up old caches\r\nself.addEventListener('activate', event => {\r\n    console.log('Service Worker activating...');\r\n    \r\n    event.waitUntil(\r\n        caches.keys()\r\n            .then(cacheNames => {\r\n                return Promise.all(\r\n                    cacheNames.map(cacheName => {\r\n                        if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {\r\n                            console.log('Deleting old cache:', cacheName);\r\n                            return caches.delete(cacheName);\r\n                        }\r\n                    })\r\n                );\r\n            })\r\n            .then(() => {\r\n                console.log('Old caches cleaned up');\r\n                return self.clients.claim();\r\n            })\r\n    );\r\n});\r\n\r\n// Fetch event - serve files from cache or network\r\nself.addEventListener('fetch', event => {\r\n    const { request } = event;\r\n    const url = new URL(request.url);\r\n    \r\n    // Skip non-GET requests\r\n    if (request.method !== 'GET') {\r\n        return;\r\n    }\r\n    \r\n    // Handle different types of requests\r\n    if (STATIC_FILES.includes(request.url) || STATIC_FILES.includes(url.pathname)) {\r\n        // Static files - cache first strategy\r\n        event.respondWith(cacheFirst(request));\r\n    } else if (url.origin === location.origin) {\r\n        // Same origin requests - network first with cache fallback\r\n        event.respondWith(networkFirst(request));\r\n    } else if (url.origin === 'https://fonts.googleapis.com' || \r\n               url.origin === 'https://cdnjs.cloudflare.com' ||\r\n               url.origin === 'https://cdn.jsdelivr.net') {\r\n        // External CDN resources - cache first strategy\r\n        event.respondWith(cacheFirst(request));\r\n    } else {\r\n        // Other external requests - network only\r\n        event.respondWith(fetch(request));\r\n    }\r\n});\r\n\r\n// Cache first strategy\r\nasync function cacheFirst(request) {\r\n    try {\r\n        const cachedResponse = await caches.match(request);\r\n        if (cachedResponse) {\r\n            return cachedResponse;\r\n        }\r\n        \r\n        const networkResponse = await fetch(request);\r\n        \r\n        // Cache successful responses\r\n        if (networkResponse.status === 200) {\r\n            const cache = await caches.open(STATIC_CACHE);\r\n            cache.put(request, networkResponse.clone());\r\n        }\r\n        \r\n        return networkResponse;\r\n    } catch (error) {\r\n        console.error('Cache first strategy failed:', error);\r\n        \r\n        // Return offline page for navigation requests\r\n        if (request.destination === 'document') {\r\n            return caches.match('/index.html');\r\n        }\r\n        \r\n        throw error;\r\n    }\r\n}\r\n\r\n// Network first strategy\r\nasync function networkFirst(request) {\r\n    try {\r\n        const networkResponse = await fetch(request);\r\n        \r\n        // Cache successful responses\r\n        if (networkResponse.status === 200) {\r\n            const cache = await caches.open(DYNAMIC_CACHE);\r\n            cache.put(request, networkResponse.clone());\r\n        }\r\n        \r\n        return networkResponse;\r\n    } catch (error) {\r\n        console.log('Network failed, trying cache:', error);\r\n        \r\n        const cachedResponse = await caches.match(request);\r\n        if (cachedResponse) {\r\n            return cachedResponse;\r\n        }\r\n        \r\n        // Return offline page for navigation requests\r\n        if (request.destination === 'document') {\r\n            return caches.match('/index.html');\r\n        }\r\n        \r\n        throw error;\r\n    }\r\n}\r\n\r\n// Background sync for offline data\r\nself.addEventListener('sync', event => {\r\n    console.log('Background sync triggered:', event.tag);\r\n    \r\n    if (event.tag === 'offline-data-sync') {\r\n        event.waitUntil(syncOfflineData());\r\n    }\r\n});\r\n\r\n// Sync offline data when connection is restored\r\nasync function syncOfflineData() {\r\n    try {\r\n        console.log('Syncing offline data...');\r\n        \r\n        // Get all clients (open tabs)\r\n        const clients = await self.clients.matchAll();\r\n        \r\n        // Notify clients that sync is starting\r\n        clients.forEach(client => {\r\n            client.postMessage({\r\n                type: 'SYNC_START'\r\n            });\r\n        });\r\n        \r\n        // Here you would implement actual data synchronization\r\n        // For now, we'll just notify clients that sync is complete\r\n        setTimeout(() => {\r\n            clients.forEach(client => {\r\n                client.postMessage({\r\n                    type: 'SYNC_COMPLETE'\r\n                });\r\n            });\r\n        }, 1000);\r\n        \r\n        console.log('Offline data sync completed');\r\n    } catch (error) {\r\n        console.error('Error syncing offline data:', error);\r\n    }\r\n}\r\n\r\n// Push notification handling\r\nself.addEventListener('push', event => {\r\n    console.log('Push notification received:', event);\r\n    \r\n    const options = {\r\n        body: event.data ? event.data.text() : 'New notification from Rul Al-Bina',\r\n        icon: 'assets/rab-01.png',\r\n        badge: 'assets/rab-01.png',\r\n        vibrate: [200, 100, 200],\r\n        data: {\r\n            url: '/'\r\n        },\r\n        actions: [\r\n            {\r\n                action: 'open',\r\n                title: 'Open App'\r\n            },\r\n            {\r\n                action: 'close',\r\n                title: 'Close'\r\n            }\r\n        ]\r\n    };\r\n    \r\n    event.waitUntil(\r\n        self.registration.showNotification('Business Management', options)\r\n    );\r\n});\r\n\r\n// Notification click handling\r\nself.addEventListener('notificationclick', event => {\r\n    console.log('Notification clicked:', event);\r\n    \r\n    event.notification.close();\r\n    \r\n    if (event.action === 'open' || !event.action) {\r\n        event.waitUntil(\r\n            self.clients.matchAll().then(clients => {\r\n                // Check if app is already open\r\n                const client = clients.find(c => c.url === self.location.origin);\r\n                if (client) {\r\n                    return client.focus();\r\n                } else {\r\n                    return self.clients.openWindow('/');\r\n                }\r\n            })\r\n        );\r\n    }\r\n});\r\n\r\n// Message handling from main thread\r\nself.addEventListener('message', event => {\r\n    console.log('Message received in SW:', event.data);\r\n    \r\n    if (event.data && event.data.type) {\r\n        switch (event.data.type) {\r\n            case 'SKIP_WAITING':\r\n                self.skipWaiting();\r\n                break;\r\n                \r\n            case 'GET_VERSION':\r\n                event.ports[0].postMessage({\r\n                    version: CACHE_NAME\r\n                });\r\n                break;\r\n                \r\n            case 'CACHE_UPDATE':\r\n                event.waitUntil(updateCache());\r\n                break;\r\n                \r\n            default:\r\n                console.log('Unknown message type:', event.data.type);\r\n        }\r\n    }\r\n});\r\n\r\n// Update cache manually\r\nasync function updateCache() {\r\n    try {\r\n        console.log('Updating cache...');\r\n        \r\n        const cache = await caches.open(STATIC_CACHE);\r\n        await cache.addAll(STATIC_FILES);\r\n        \r\n        console.log('Cache updated successfully');\r\n        \r\n        // Notify all clients\r\n        const clients = await self.clients.matchAll();\r\n        clients.forEach(client => {\r\n            client.postMessage({\r\n                type: 'CACHE_UPDATED'\r\n            });\r\n        });\r\n    } catch (error) {\r\n        console.error('Error updating cache:', error);\r\n    }\r\n}\r\n\r\n// Error handling\r\nself.addEventListener('error', event => {\r\n    console.error('Service Worker error:', event.error);\r\n});\r\n\r\nself.addEventListener('unhandledrejection', event => {\r\n    console.error('Service Worker unhandled rejection:', event.reason);\r\n});\r\n\r\nconsole.log('Service Worker loaded successfully');\r\n","size_bytes":9426},"js/analytics.js":{"content":"// Analytics and dashboard functionality\nimport { formatCurrency, formatDate } from './utils.js';\n\nexport class AnalyticsManager {\n    constructor(storage) {\n        this.storage = storage;\n        this.init();\n    }\n\n    init() {\n        this.setupEventListeners();\n    }\n\n    setupEventListeners() {\n        // Dashboard period filter\n        document.getElementById('dashboard-period').addEventListener('change', () => {\n            this.loadDashboard();\n        });\n    }\n\n    loadDashboard() {\n        this.updateStatCards();\n        this.updateSimpleAnalytics();\n        this.renderRecentActivities();\n    }\n\n    updateStatCards() {\n        const vendors = this.storage.getVendors();\n        const projects = this.storage.getProjects();\n        const transactions = this.getTransactionsForPeriod();\n        \n        // Total vendors\n        document.getElementById('total-vendors').textContent = vendors.length;\n        \n        // Active projects\n        const activeProjects = projects.filter(p => p.status === 'active').length;\n        document.getElementById('active-projects').textContent = activeProjects;\n        \n        // Total income and expenses\n        const income = transactions\n            .filter(t => t.type === 'income')\n            .reduce((sum, t) => sum + t.amount, 0);\n        const expenses = transactions\n            .filter(t => t.type === 'expense')\n            .reduce((sum, t) => sum + t.amount, 0);\n            \n        document.getElementById('total-income').textContent = formatCurrency(income);\n        document.getElementById('total-expenses').textContent = formatCurrency(expenses);\n        \n        // Update analytics display elements too\n        const totalIncomeDisplay = document.getElementById('total-income-display');\n        const totalExpensesDisplay = document.getElementById('total-expenses-display');\n        if (totalIncomeDisplay) totalIncomeDisplay.textContent = formatCurrency(income);\n        if (totalExpensesDisplay) totalExpensesDisplay.textContent = formatCurrency(expenses);\n    }\n\n    getTransactionsForPeriod() {\n        const period = document.getElementById('dashboard-period').value;\n        const now = new Date();\n        let startDate;\n\n        switch (period) {\n            case 'week':\n                startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7);\n                break;\n            case 'month':\n                startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n                break;\n            case 'quarter':\n                const quarterStart = Math.floor(now.getMonth() / 3) * 3;\n                startDate = new Date(now.getFullYear(), quarterStart, 1);\n                break;\n            case 'year':\n                startDate = new Date(now.getFullYear(), 0, 1);\n                break;\n            default:\n                startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n        }\n\n        const transactions = this.storage.getTransactions();\n        return transactions.filter(t => new Date(t.date) >= startDate);\n    }\n\n    updateSimpleAnalytics() {\n        const transactions = this.getTransactionsForPeriod();\n        const vendors = this.storage.getVendors();\n        const projects = this.storage.getProjects();\n        \n        // Calculate basic metrics\n        const income = transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0);\n        const expenses = transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);\n        const netProfit = income - expenses;\n        \n        // Count active vendors\n        const activeVendors = vendors.filter(v => v.status === 'active').length;\n        \n        // Count projects by status\n        const activeProjects = projects.filter(p => p.status === 'active' || p.status === 'planning').length;\n        const completedProjects = projects.filter(p => p.status === 'completed').length;\n        const totalProjectValue = projects.reduce((sum, p) => sum + (p.budget || 0), 0);\n        \n        // Find most active vendor\n        const vendorTransactionCount = {};\n        transactions.forEach(t => {\n            if (t.vendorId) {\n                vendorTransactionCount[t.vendorId] = (vendorTransactionCount[t.vendorId] || 0) + 1;\n            }\n        });\n        \n        let mostActiveVendor = '-';\n        if (Object.keys(vendorTransactionCount).length > 0) {\n            const mostActiveVendorId = Object.keys(vendorTransactionCount).reduce((a, b) => \n                vendorTransactionCount[a] > vendorTransactionCount[b] ? a : b\n            );\n            const vendor = vendors.find(v => v.id === mostActiveVendorId);\n            mostActiveVendor = vendor ? vendor.name : '-';\n        }\n        \n        // Update simplified analytics display\n        this.updateElement('net-profit', formatCurrency(netProfit));\n        this.updateElement('active-vendors', activeVendors);\n        this.updateElement('planning-projects', activeProjects);\n        this.updateElement('completed-projects', completedProjects);\n        this.updateElement('total-project-value', formatCurrency(totalProjectValue));\n        this.updateElement('total-transactions', transactions.length);\n        this.updateElement('most-active-vendor', mostActiveVendor);\n    }\n    \n    updateElement(id, value) {\n        const element = document.getElementById(id);\n        if (element) {\n            element.textContent = value;\n        }\n    }\n\n    renderRecentActivities() {\n        const transactions = this.storage.getTransactions();\n        const vendors = this.storage.getVendors();\n        const projects = this.storage.getProjects();\n        \n        // Get recent transactions (last 10)\n        const recentTransactions = transactions\n            .sort((a, b) => new Date(b.date) - new Date(a.date))\n            .slice(0, 10);\n        \n        const activitiesList = document.getElementById('recent-activities-list');\n        if (!activitiesList) return;\n        \n        activitiesList.innerHTML = '';\n        \n        if (recentTransactions.length === 0) {\n            activitiesList.innerHTML = '<p class=\"no-activities\">No recent activities</p>';\n            return;\n        }\n        \n        recentTransactions.forEach(transaction => {\n            const vendor = vendors.find(v => v.id === transaction.vendorId);\n            const project = projects.find(p => p.id === transaction.projectId);\n            \n            const activityItem = document.createElement('div');\n            activityItem.className = 'activity-item';\n            \n            const typeIcon = transaction.type === 'income' ? 'fa-arrow-up' : 'fa-arrow-down';\n            const typeClass = transaction.type === 'income' ? 'income' : 'expense';\n            \n            activityItem.innerHTML = `\n                <div class=\"activity-icon ${typeClass}\">\n                    <i class=\"fas ${typeIcon}\"></i>\n                </div>\n                <div class=\"activity-content\">\n                    <div class=\"activity-title\">${transaction.description || 'Transaction'}</div>\n                    <div class=\"activity-details\">\n                        ${vendor ? vendor.name : ''} ${project ? '‚Ä¢ ' + project.name : ''}\n                    </div>\n                    <div class=\"activity-date\">${formatDate(transaction.date)}</div>\n                </div>\n                <div class=\"activity-amount ${typeClass}\">\n                    ${formatCurrency(transaction.amount)}\n                </div>\n            `;\n            \n            activitiesList.appendChild(activityItem);\n        });\n    }\n}","size_bytes":7585},"js/auth.js":{"content":"import { showToast } from './utils.js';\n\nexport class AuthManager {\n    constructor() {\n        this.currentUser = null;\n        this.isAuthenticated = false;\n        this.authKey = 'business_auth_user';\n        this.demoMode = false;\n    }\n    \n    // Add to AuthManager class in auth.js\n    closeModal() {\n        document.getElementById('login-modal').style.display = 'none';\n        document.getElementById('signup-modal').style.display = 'none';\n    }\n\n    init() {\n        this.loadStoredAuth();\n        this.setupEventListeners();\n        this.updateUIState();\n    }\n\n    setupEventListeners() {\n        const loginBtn = document.getElementById('login-btn');\n        const logoutBtn = document.getElementById('logout-btn');\n        const switchToSignup = document.getElementById('switch-to-signup');\n        const switchToLogin = document.getElementById('switch-to-login');\n        const loginForm = document.getElementById('login-form');\n        const signupForm = document.getElementById('signup-form');\n\n        if (loginBtn) {\n            loginBtn.addEventListener('click', () => this.showLoginModal());\n        }\n\n        if (logoutBtn) {\n            logoutBtn.addEventListener('click', () => this.logout());\n        }\n\n        if (switchToSignup) {\n            switchToSignup.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.showSignupModal();\n            });\n        }\n\n        if (switchToLogin) {\n            switchToLogin.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.showLoginModal();\n            });\n        }\n\n        if (loginForm) {\n            loginForm.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.handleLogin();\n            });\n        }\n\n        if (signupForm) {\n            signupForm.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.handleSignup();\n            });\n        }\n\n        // Add real-time form validation\n        this.setupFormValidation();\n    }\n\n    setupFormValidation() {\n        // Login form validation\n        const loginEmail = document.getElementById('login-email');\n        const loginPassword = document.getElementById('login-password');\n        \n        if (loginEmail) {\n            loginEmail.addEventListener('blur', () => this.validateEmail(loginEmail));\n            loginEmail.addEventListener('input', () => this.clearError(loginEmail));\n        }\n        \n        if (loginPassword) {\n            loginPassword.addEventListener('blur', () => this.validateRequired(loginPassword));\n            loginPassword.addEventListener('input', () => this.clearError(loginPassword));\n        }\n\n        // Signup form validation\n        const signupName = document.getElementById('signup-name');\n        const signupEmail = document.getElementById('signup-email');\n        const signupPassword = document.getElementById('signup-password');\n        const signupConfirmPassword = document.getElementById('signup-confirm-password');\n        \n        if (signupName) {\n            signupName.addEventListener('blur', () => this.validateRequired(signupName));\n            signupName.addEventListener('input', () => this.clearError(signupName));\n        }\n        \n        if (signupEmail) {\n            signupEmail.addEventListener('blur', () => this.validateEmail(signupEmail));\n            signupEmail.addEventListener('input', () => this.clearError(signupEmail));\n        }\n        \n        if (signupPassword) {\n            signupPassword.addEventListener('input', () => {\n                this.checkPasswordStrength(signupPassword);\n                this.clearError(signupPassword);\n            });\n            signupPassword.addEventListener('blur', () => this.validatePassword(signupPassword));\n        }\n        \n        if (signupConfirmPassword) {\n            signupConfirmPassword.addEventListener('blur', () => this.validatePasswordMatch(signupPassword, signupConfirmPassword));\n            signupConfirmPassword.addEventListener('input', () => this.clearError(signupConfirmPassword));\n        }\n    }\n\n    validateEmail(input) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        const isValid = emailRegex.test(input.value);\n        this.setFieldValidation(input, isValid);\n        return isValid;\n    }\n\n    validateRequired(input) {\n        const isValid = input.value.trim().length > 0;\n        this.setFieldValidation(input, isValid);\n        return isValid;\n    }\n\n    validatePassword(input) {\n        const isValid = input.value.length >= 6;\n        this.setFieldValidation(input, isValid);\n        return isValid;\n    }\n\n    validatePasswordMatch(passwordInput, confirmInput) {\n        const isValid = passwordInput.value === confirmInput.value && confirmInput.value.length > 0;\n        this.setFieldValidation(confirmInput, isValid);\n        return isValid;\n    }\n\n    setFieldValidation(input, isValid) {\n        const formGroup = input.closest('.form-group');\n        if (isValid) {\n            formGroup.classList.remove('error');\n            formGroup.classList.add('success');\n        } else {\n            formGroup.classList.remove('success');\n            formGroup.classList.add('error');\n        }\n    }\n\n    clearError(input) {\n        const formGroup = input.closest('.form-group');\n        formGroup.classList.remove('error', 'success');\n    }\n\n    checkPasswordStrength(passwordInput) {\n        const password = passwordInput.value;\n        const strengthBar = passwordInput.parentElement.querySelector('.strength-bar');\n        \n        if (!strengthBar) return;\n\n        let strength = 0;\n        if (password.length >= 6) strength += 1;\n        if (password.match(/[a-z]/) && password.match(/[A-Z]/)) strength += 1;\n        if (password.match(/[0-9]/)) strength += 1;\n        if (password.match(/[^A-Za-z0-9]/)) strength += 1;\n\n        strengthBar.className = 'strength-bar';\n        if (strength === 1) {\n            strengthBar.classList.add('weak');\n        } else if (strength === 2 || strength === 3) {\n            strengthBar.classList.add('medium');\n        } else if (strength === 4) {\n            strengthBar.classList.add('strong');\n        }\n    }\n\n    // In the AuthManager class, update these methods:\n    showLoginModal() {\n        this.closeAllModals();\n        const modal = document.getElementById('login-modal');\n        if (modal) {\n            modal.classList.add('show');\n            document.getElementById('login-email').focus();\n            \n            // Add click outside handler\n            modal.addEventListener('click', (e) => {\n                if (e.target === modal) {\n                    this.closeAllModals();\n                }\n            });\n        }\n    }\n\n    showSignupModal() {\n        this.closeAllModals();\n        const modal = document.getElementById('signup-modal');\n        if (modal) {\n            modal.classList.add('show');\n            document.getElementById('signup-name').focus();\n            \n            // Add click outside handler\n            modal.addEventListener('click', (e) => {\n                if (e.target === modal) {\n                    this.closeAllModals();\n                }\n            });\n        }\n    }\n\n    closeAllModals() {\n        const loginModal = document.getElementById('login-modal');\n        const signupModal = document.getElementById('signup-modal');\n        \n        if (loginModal) loginModal.classList.remove('show');\n        if (signupModal) signupModal.classList.remove('show');\n        \n        // Remove event listeners to prevent memory leaks\n        if (loginModal) loginModal.removeEventListener('click', this.closeAllModals);\n        if (signupModal) signupModal.removeEventListener('click', this.closeAllModals);\n    }\n\n\n    async handleLogin() {\n        const emailInput = document.getElementById('login-email');\n        const passwordInput = document.getElementById('login-password');\n        const email = emailInput.value.trim();\n        const password = passwordInput.value;\n\n        // Clear previous errors\n        this.clearError(emailInput);\n        this.clearError(passwordInput);\n\n        // Validate form\n        let isValid = true;\n        if (!this.validateEmail(emailInput)) {\n            isValid = false;\n        }\n        if (!this.validateRequired(passwordInput)) {\n            isValid = false;\n        }\n\n        if (!isValid) {\n            showToast('Please correct the errors in the form', 'error');\n            return;\n        }\n\n        // Show loading state\n        const submitBtn = document.querySelector('#login-form .btn-primary');\n        const originalText = submitBtn.innerHTML;\n        submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Signing In...';\n        submitBtn.disabled = true;\n\n        // Simulate API delay for better UX\n        await new Promise(resolve => setTimeout(resolve, 800));\n\n        try {\n            // Check if user exists in storage\n            const users = this.getStoredUsers();\n            const user = users.find(u => u.email.toLowerCase() === email.toLowerCase());\n\n            if (!user) {\n                throw new Error('User not found. Please sign up first.');\n            }\n\n            // Simple password check (in real app, use proper hashing)\n            if (user.password !== password) {\n                throw new Error('Invalid password. Please try again.');\n            }\n\n            // Login successful\n            this.currentUser = {\n                id: user.id,\n                name: user.name,\n                email: user.email,\n                avatar: user.avatar || this.generateAvatar(user.name)\n            };\n\n            this.isAuthenticated = true;\n            this.saveAuth();\n            this.updateUIState();\n            this.closeAllModals();\n            \n            // Clear form\n            emailInput.value = '';\n            passwordInput.value = '';\n            \n            showToast(`Welcome back, ${this.currentUser.name}!`, 'success');\n        } catch (error) {\n            showToast(error.message, 'error');\n        } finally {\n            // Restore button state\n            submitBtn.innerHTML = originalText;\n            submitBtn.disabled = false;\n        }\n    }\n\n    async handleSignup() {\n        const nameInput = document.getElementById('signup-name');\n        const emailInput = document.getElementById('signup-email');\n        const passwordInput = document.getElementById('signup-password');\n        const confirmPasswordInput = document.getElementById('signup-confirm-password');\n        \n        const name = nameInput.value.trim();\n        const email = emailInput.value.trim();\n        const password = passwordInput.value;\n        const confirmPassword = confirmPasswordInput.value;\n\n        // Clear previous errors\n        this.clearError(nameInput);\n        this.clearError(emailInput);\n        this.clearError(passwordInput);\n        this.clearError(confirmPasswordInput);\n\n        // Validate form\n        let isValid = true;\n        if (!this.validateRequired(nameInput)) {\n            isValid = false;\n        }\n        if (!this.validateEmail(emailInput)) {\n            isValid = false;\n        }\n        if (!this.validatePassword(passwordInput)) {\n            isValid = false;\n        }\n        if (!this.validatePasswordMatch(passwordInput, confirmPasswordInput)) {\n            isValid = false;\n        }\n\n        if (!isValid) {\n            showToast('Please correct the errors in the form', 'error');\n            return;\n        }\n\n        // Show loading state\n        const submitBtn = document.querySelector('#signup-form .btn-primary');\n        const originalText = submitBtn.innerHTML;\n        submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Creating Account...';\n        submitBtn.disabled = true;\n\n        // Simulate API delay for better UX\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        try {\n            // Check if user already exists\n            const users = this.getStoredUsers();\n            if (users.find(u => u.email.toLowerCase() === email.toLowerCase())) {\n                throw new Error('An account with this email already exists. Please login instead.');\n            }\n\n            // Create new user\n            const newUser = {\n                id: this.generateId(),\n                name: name,\n                email: email,\n                password: password, // In real app, hash this\n                avatar: this.generateAvatar(name),\n                createdAt: new Date().toISOString()\n            };\n\n            users.push(newUser);\n            this.saveUsers(users);\n\n            // Auto-login the new user\n            this.currentUser = {\n                id: newUser.id,\n                name: newUser.name,\n                email: newUser.email,\n                avatar: newUser.avatar\n            };\n\n            this.isAuthenticated = true;\n            this.saveAuth();\n            this.updateUIState();\n            this.closeAllModals();\n            \n            // Clear form\n            nameInput.value = '';\n            emailInput.value = '';\n            passwordInput.value = '';\n            confirmPasswordInput.value = '';\n            \n            showToast(`Welcome to the platform, ${this.currentUser.name}!`, 'success');\n        } catch (error) {\n            showToast(error.message, 'error');\n        } finally {\n            // Restore button state\n            submitBtn.innerHTML = originalText;\n            submitBtn.disabled = false;\n        }\n    }\n\n    logout() {\n        this.currentUser = null;\n        this.isAuthenticated = false;\n        this.clearAuth();\n        this.updateUIState();\n        showToast('Logged out successfully', 'info');\n    }\n\n    updateUIState() {\n        const loginBtn = document.getElementById('login-btn');\n        const userProfile = document.getElementById('user-profile');\n        const userName = document.getElementById('user-name');\n        const userAvatar = document.getElementById('user-avatar');\n\n        if (this.isAuthenticated && this.currentUser) {\n            // Show user profile, hide login button\n            if (loginBtn) loginBtn.style.display = 'none';\n            if (userProfile) userProfile.style.display = 'flex';\n            if (userName) userName.textContent = this.currentUser.name;\n            if (userAvatar) userAvatar.src = this.currentUser.avatar;\n        } else {\n            // Show login button, hide user profile\n            if (loginBtn) loginBtn.style.display = 'flex';\n            if (userProfile) userProfile.style.display = 'none';\n        }\n    }\n\n    // Check if user is authenticated (for protected features)\n    requireAuth() {\n        if (!this.isAuthenticated) {\n            showToast('Please login to use this feature', 'warning');\n            this.showLoginModal();\n            return false;\n        }\n        return true;\n    }\n\n    // Storage methods\n    getStoredUsers() {\n        const users = localStorage.getItem('business_users');\n        return users ? JSON.parse(users) : [];\n    }\n\n    saveUsers(users) {\n        localStorage.setItem('business_users', JSON.stringify(users));\n    }\n\n    loadStoredAuth() {\n        const auth = localStorage.getItem(this.authKey);\n        if (auth) {\n            try {\n                const authData = JSON.parse(auth);\n                this.currentUser = authData.user;\n                this.isAuthenticated = authData.isAuthenticated;\n            } catch (e) {\n                console.error('Error loading auth data:', e);\n                this.clearAuth();\n            }\n        }\n    }\n\n    saveAuth() {\n        const authData = {\n            user: this.currentUser,\n            isAuthenticated: this.isAuthenticated\n        };\n        localStorage.setItem(this.authKey, JSON.stringify(authData));\n    }\n\n    clearAuth() {\n        localStorage.removeItem(this.authKey);\n    }\n\n    // Utility methods\n    generateId() {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n\n    generateAvatar(name) {\n        // Return transparent/empty avatar instead of initials\n        return `data:image/svg+xml;base64,${btoa(`\n            <svg width=\"40\" height=\"40\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect width=\"40\" height=\"40\" fill=\"transparent\"/>\n            </svg>\n        `)}`;\n    }\n\n    // Public methods for other modules\n    getCurrentUser() {\n        return this.currentUser;\n    }\n\n    isUserAuthenticated() {\n        return this.isAuthenticated;\n    }\n}","size_bytes":16533},"js/calculators.js":{"content":"// Construction calculators functionality\nexport class CalculatorManager {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        // Calculator functions are called from global scope via HTML onclick\n        // No additional initialization needed\n    }\n\n    calculateMaterial() {\n        const type = document.getElementById('material-type').value;\n        const length = parseFloat(document.getElementById('material-length').value) || 0;\n        const width = parseFloat(document.getElementById('material-width').value) || 0;\n        const height = parseFloat(document.getElementById('material-height').value) || 0;\n\n        if (length <= 0 || width <= 0) {\n            this.showResult('material-result', 'Please enter valid dimensions', 'error');\n            return;\n        }\n\n        let results = {};\n        const area = length * width;\n        const volume = length * width * height;\n\n        switch (type) {\n            case 'concrete':\n                results = this.calculateConcrete(volume, area);\n                break;\n            case 'brick':\n                results = this.calculateBricks(area, height || 0.1);\n                break;\n            case 'tiles':\n                results = this.calculateTiles(area);\n                break;\n            case 'paint':\n                results = this.calculatePaint(area);\n                break;\n            default:\n                this.showResult('material-result', 'Please select a material type', 'error');\n                return;\n        }\n\n        this.showMaterialResult(results, type);\n    }\n\n    calculateConcrete(volume, area) {\n        // Standard concrete calculations\n        const concreteBags = Math.ceil(volume * 13.33); // 50kg bags per cubic meter\n        const cement = Math.ceil(volume * 7); // 50kg cement bags\n        const sand = volume * 0.5; // cubic meters\n        const aggregate = volume * 0.75; // cubic meters\n        const water = volume * 200; // liters\n\n        return {\n            volume: volume.toFixed(2),\n            area: area.toFixed(2),\n            concreteBags,\n            cement,\n            sand: sand.toFixed(2),\n            aggregate: aggregate.toFixed(2),\n            water: water.toFixed(0),\n            estimatedCost: concreteBags * 8 + cement * 6 + sand * 30 + aggregate * 25\n        };\n    }\n\n    calculateBricks(area, height) {\n        // Standard brick calculations (assuming 230x110x75mm bricks)\n        const bricksPerSqM = 50; // approximately 50 bricks per square meter\n        const totalBricks = Math.ceil(area * bricksPerSqM);\n        const mortar = area * 0.03; // cubic meters of mortar\n        const cement = Math.ceil(mortar * 6); // 50kg bags\n        const sand = mortar * 4; // cubic meters\n\n        return {\n            area: area.toFixed(2),\n            totalBricks,\n            mortar: mortar.toFixed(2),\n            cement,\n            sand: sand.toFixed(2),\n            estimatedCost: totalBricks * 0.5 + cement * 6 + sand * 30\n        };\n    }\n\n    calculateTiles(area) {\n        // Standard tile calculations\n        const tilesPerSqM = 11.1; // for 300x300mm tiles\n        const totalTiles = Math.ceil(area * tilesPerSqM * 1.1); // 10% wastage\n        const adhesive = Math.ceil(area * 1.5); // kg\n        const grout = Math.ceil(area * 0.5); // kg\n\n        return {\n            area: area.toFixed(2),\n            totalTiles,\n            adhesive,\n            grout,\n            wastage: '10%',\n            estimatedCost: totalTiles * 2.5 + adhesive * 3 + grout * 4\n        };\n    }\n\n    calculatePaint(area) {\n        // Paint calculations\n        const coverage = 10; // square meters per liter\n        const coats = 2;\n        const totalPaint = Math.ceil((area * coats) / coverage);\n        const primer = Math.ceil(area / coverage);\n\n        return {\n            area: area.toFixed(2),\n            totalPaint,\n            primer,\n            coats,\n            coverage: coverage + ' sqm/L',\n            estimatedCost: totalPaint * 25 + primer * 20\n        };\n    }\n\n    showMaterialResult(results, type) {\n        let content = `<h4>${type.toUpperCase()} Requirements</h4>`;\n        \n        Object.entries(results).forEach(([key, value]) => {\n            const label = this.formatLabel(key);\n            const formattedValue = key === 'estimatedCost' ? `‚Çπ${value.toFixed(2)}` : value;\n            \n            content += `\n                <div class=\"result-item\">\n                    <span>${label}:</span>\n                    <span>${formattedValue}</span>\n                </div>\n            `;\n        });\n\n        this.showResult('material-result', content);\n    }\n\n    calculateCost() {\n        const projectType = document.getElementById('project-type').value;\n        const area = parseFloat(document.getElementById('project-area').value) || 0;\n        const quality = document.getElementById('quality-level').value;\n\n        if (area <= 0) {\n            this.showResult('cost-result', 'Please enter a valid area', 'error');\n            return;\n        }\n\n        const baseCosts = {\n            residential: { basic: 60000, standard: 90000, premium: 135000 },\n            commercial: { basic: 75000, standard: 112500, premium: 165000 },\n            renovation: { basic: 45000, standard: 67500, premium: 105000 }\n        };\n\n        const costPerSqM = baseCosts[projectType][quality];\n        const materialsCost = area * costPerSqM * 0.6;\n        const laborCost = area * costPerSqM * 0.3;\n        const overheadCost = area * costPerSqM * 0.1;\n        const totalCost = materialsCost + laborCost + overheadCost;\n        const contingency = totalCost * 0.1;\n        const finalCost = totalCost + contingency;\n\n        const results = {\n            area: area.toFixed(1) + ' sqm',\n            costPerSqM: `‚Çπ${costPerSqM}`,\n            materialsCost: materialsCost.toFixed(2),\n            laborCost: laborCost.toFixed(2),\n            overheadCost: overheadCost.toFixed(2),\n            subtotal: totalCost.toFixed(2),\n            contingency: contingency.toFixed(2),\n            totalCost: finalCost.toFixed(2)\n        };\n\n        let content = '<h4>Cost Estimation</h4>';\n        Object.entries(results).forEach(([key, value]) => {\n            const label = this.formatLabel(key);\n            const formattedValue = key.includes('Cost') || key === 'subtotal' || key === 'contingency' || key === 'totalCost' ? \n                `‚Çπ${value}` : value;\n            \n            content += `\n                <div class=\"result-item\">\n                    <span>${label}:</span>\n                    <span>${formattedValue}</span>\n                </div>\n            `;\n        });\n\n        this.showResult('cost-result', content);\n    }\n\n    calculateLabor() {\n        const workType = document.getElementById('work-type').value;\n        const workUnits = parseFloat(document.getElementById('work-units').value) || 0;\n        const workerCount = parseInt(document.getElementById('worker-count').value) || 1;\n        const hourlyRate = parseFloat(document.getElementById('hourly-rate').value) || 0;\n\n        if (workUnits <= 0 || workerCount <= 0 || hourlyRate <= 0) {\n            this.showResult('labor-result', 'Please enter valid values', 'error');\n            return;\n        }\n\n        // Labor productivity rates (hours per unit)\n        const productivityRates = {\n            masonry: 1.5, // hours per sqm\n            carpentry: 2.0, // hours per sqm\n            plumbing: 0.5, // hours per fixture/meter\n            electrical: 0.8, // hours per point/meter\n            painting: 0.4 // hours per sqm\n        };\n\n        const hoursPerUnit = productivityRates[workType] || 1;\n        const totalHours = workUnits * hoursPerUnit;\n        const hoursPerWorker = totalHours / workerCount;\n        const daysRequired = Math.ceil(hoursPerWorker / 8); // 8 hours per day\n        const totalCost = totalHours * hourlyRate;\n\n        const results = {\n            workType: workType.charAt(0).toUpperCase() + workType.slice(1),\n            workUnits: workUnits.toFixed(1),\n            totalHours: totalHours.toFixed(1),\n            hoursPerWorker: hoursPerWorker.toFixed(1),\n            daysRequired: daysRequired,\n            workerCount: workerCount,\n            hourlyRate: hourlyRate.toFixed(2),\n            totalCost: totalCost.toFixed(2)\n        };\n\n        let content = '<h4>Labor Calculation</h4>';\n        Object.entries(results).forEach(([key, value]) => {\n            const label = this.formatLabel(key);\n            const formattedValue = key === 'hourlyRate' || key === 'totalCost' ? \n                `‚Çπ${value}` : value;\n            \n            content += `\n                <div class=\"result-item\">\n                    <span>${label}:</span>\n                    <span>${formattedValue}</span>\n                </div>\n            `;\n        });\n\n        this.showResult('labor-result', content);\n    }\n\n    calculateProfit() {\n        const totalCost = parseFloat(document.getElementById('total-cost').value) || 0;\n        const profitMargin = parseFloat(document.getElementById('profit-margin').value) || 0;\n        const additionalExpenses = parseFloat(document.getElementById('additional-expenses').value) || 0;\n\n        if (totalCost <= 0 || profitMargin <= 0) {\n            this.showResult('profit-result', 'Please enter valid values', 'error');\n            return;\n        }\n\n        const adjustedCost = totalCost + additionalExpenses;\n        const profitAmount = adjustedCost * (profitMargin / 100);\n        const sellingPrice = adjustedCost + profitAmount;\n        const markup = (profitAmount / adjustedCost) * 100;\n\n        const results = {\n            totalCost: totalCost.toFixed(2),\n            additionalExpenses: additionalExpenses.toFixed(2),\n            adjustedCost: adjustedCost.toFixed(2),\n            profitMargin: profitMargin.toFixed(1) + '%',\n            profitAmount: profitAmount.toFixed(2),\n            sellingPrice: sellingPrice.toFixed(2),\n            markup: markup.toFixed(1) + '%'\n        };\n\n        let content = '<h4>Profit Calculation</h4>';\n        Object.entries(results).forEach(([key, value]) => {\n            const label = this.formatLabel(key);\n            const formattedValue = key.includes('Cost') || key.includes('Amount') || key.includes('Price') ? \n                `‚Çπ${value}` : value;\n            \n            content += `\n                <div class=\"result-item\">\n                    <span>${label}:</span>\n                    <span>${formattedValue}</span>\n                </div>\n            `;\n        });\n\n        this.showResult('profit-result', content);\n    }\n\n    formatLabel(key) {\n        return key.replace(/([A-Z])/g, ' $1')\n                 .replace(/^./, str => str.toUpperCase())\n                 .replace('Sq M', 'per sqm')\n                 .replace('Cost', 'Cost')\n                 .replace('Per', 'per');\n    }\n\n    showResult(elementId, content, type = 'success') {\n        const resultElement = document.getElementById(elementId);\n        resultElement.innerHTML = content;\n        resultElement.className = `calc-result show ${type}`;\n    }\n\n    // Additional construction calculators\n\n    calculateCementSand() {\n        // Cement to sand ratio calculator\n        const ratio = '1:3'; // cement:sand\n        const area = 100; // example area\n        // Implementation for cement-sand calculator\n    }\n\n    calculateSteel() {\n        // Steel reinforcement calculator\n        const concreteVolume = 10; // cubic meters\n        const steelPercentage = 1.5; // percentage of concrete volume\n        const steelWeight = concreteVolume * 1000 * (steelPercentage / 100) * 7.85; // kg\n        // Implementation for steel calculator\n    }\n\n    calculateRoofing() {\n        // Roofing material calculator\n        const roofArea = 150; // square meters\n        const pitch = 30; // degrees\n        const adjustedArea = roofArea / Math.cos(pitch * Math.PI / 180);\n        // Implementation for roofing calculator\n    }\n\n    calculatePlumbing() {\n        // Plumbing fixtures and pipe calculator\n        const fixtures = 8; // number of fixtures\n        const pipeLength = fixtures * 10; // meters of pipe\n        const fittings = fixtures * 5; // number of fittings\n        // Implementation for plumbing calculator\n    }\n\n    calculateElectrical() {\n        // Electrical points and wiring calculator\n        const points = 20; // number of electrical points\n        const wireLength = points * 15; // meters of wire\n        const conduitLength = wireLength * 1.2; // meters of conduit\n        // Implementation for electrical calculator\n    }\n}\n","size_bytes":12584},"js/firebase-auth.js":{"content":"// Firebase Authentication integration\nimport { firebaseConfig } from './firebase-config.js';\nimport { showToast } from './utils.js';\n\nexport class FirebaseAuthManager {\n    constructor() {\n        this.auth = null;\n        this.currentUser = null;\n        this.isAuthenticated = false;\n        this.isInitialized = false;\n        this.authStateCallbacks = [];\n        this.init();\n    }\n\n    async init() {\n        try {\n            // Import Firebase Auth\n            const { initializeApp } = await import('https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js');\n            const { \n                getAuth, \n                onAuthStateChanged, \n                signInWithEmailAndPassword,\n                createUserWithEmailAndPassword,\n                signOut,\n                updateProfile,\n                GoogleAuthProvider,\n                signInWithPopup\n            } = await import('https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js');\n\n            // Initialize Firebase\n            const app = initializeApp(firebaseConfig);\n            this.auth = getAuth(app);\n            \n            // Store auth methods for later use\n            this.authMethods = {\n                signInWithEmailAndPassword,\n                createUserWithEmailAndPassword,\n                signOut,\n                updateProfile,\n                GoogleAuthProvider,\n                signInWithPopup\n            };\n\n            // Listen for auth state changes\n            onAuthStateChanged(this.auth, (user) => {\n                this.currentUser = user;\n                this.isAuthenticated = !!user;\n                \n                if (user) {\n                    console.log('User authenticated:', user.uid);\n                    // Only show welcome back message on fresh login, not on every reload\n                    const hasShownWelcomeBack = sessionStorage.getItem('welcome_back_shown');\n                    if (!hasShownWelcomeBack) {\n                        showToast(`Welcome back, ${user.displayName || user.email}!`, 'success');\n                        sessionStorage.setItem('welcome_back_shown', 'true');\n                    }\n                } else {\n                    console.log('User signed out');\n                    // Clear the welcome back flag when user signs out\n                    sessionStorage.removeItem('welcome_back_shown');\n                }\n                \n                this.updateUIState();\n                this.notifyAuthStateChanged(user);\n            });\n\n            this.isInitialized = true;\n            this.setupEventListeners();\n            console.log('Firebase Auth initialized successfully');\n\n        } catch (error) {\n            console.error('Failed to initialize Firebase Auth:', error);\n            showToast('Authentication system unavailable. Using offline mode.', 'warning');\n            this.isInitialized = false;\n        }\n    }\n\n    // Register callback for auth state changes\n    onAuthStateChanged(callback) {\n        this.authStateCallbacks.push(callback);\n        // Call immediately if already initialized\n        if (this.isInitialized) {\n            callback(this.currentUser);\n        }\n    }\n\n    // Notify all registered callbacks\n    notifyAuthStateChanged(user) {\n        this.authStateCallbacks.forEach(callback => {\n            try {\n                callback(user);\n            } catch (error) {\n                console.error('Auth state callback error:', error);\n            }\n        });\n    }\n\n    setupEventListeners() {\n        const loginBtn = document.getElementById('login-btn');\n        const logoutBtn = document.getElementById('logout-btn');\n        const switchToSignup = document.getElementById('switch-to-signup');\n        const switchToLogin = document.getElementById('switch-to-login');\n        const loginForm = document.getElementById('login-form');\n        const signupForm = document.getElementById('signup-form');\n        const googleLoginBtn = document.getElementById('google-login-btn');\n        const googleSignupBtn = document.getElementById('google-signup-btn');\n\n        if (loginBtn) {\n            loginBtn.addEventListener('click', () => this.showLoginModal());\n        }\n\n        if (logoutBtn) {\n            logoutBtn.addEventListener('click', () => this.logout());\n        }\n\n        if (switchToSignup) {\n            switchToSignup.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.showSignupModal();\n            });\n        }\n\n        if (switchToLogin) {\n            switchToLogin.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.showLoginModal();\n            });\n        }\n\n        if (loginForm) {\n            loginForm.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.handleLogin();\n            });\n        }\n\n        if (signupForm) {\n            signupForm.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.handleSignup();\n            });\n        }\n\n        if (googleLoginBtn) {\n            googleLoginBtn.addEventListener('click', () => this.signInWithGoogle());\n        }\n\n        if (googleSignupBtn) {\n            googleSignupBtn.addEventListener('click', () => this.signInWithGoogle());\n        }\n\n        // Close modals when clicking outside or on close button\n        document.addEventListener('click', (e) => {\n            if (e.target.classList.contains('modal') || e.target.classList.contains('btn-close')) {\n                this.closeModal();\n            }\n        });\n\n        // Close modals with Escape key\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                this.closeModal();\n            }\n        });\n\n        this.setupFormValidation();\n    }\n\n    setupFormValidation() {\n        const loginEmail = document.getElementById('login-email');\n        const loginPassword = document.getElementById('login-password');\n        const signupEmail = document.getElementById('signup-email');\n        const signupPassword = document.getElementById('signup-password');\n        const signupConfirmPassword = document.getElementById('signup-confirm-password');\n        const signupName = document.getElementById('signup-name');\n\n        // Real-time validation for login form\n        if (loginEmail) {\n            loginEmail.addEventListener('input', () => this.validateEmail(loginEmail));\n        }\n\n        if (loginPassword) {\n            loginPassword.addEventListener('input', () => this.validatePassword(loginPassword));\n        }\n\n        // Real-time validation for signup form\n        if (signupEmail) {\n            signupEmail.addEventListener('input', () => this.validateEmail(signupEmail));\n        }\n\n        if (signupPassword) {\n            signupPassword.addEventListener('input', () => this.validatePassword(signupPassword));\n        }\n\n        if (signupConfirmPassword) {\n            signupConfirmPassword.addEventListener('input', () => this.validatePasswordMatch(signupPassword, signupConfirmPassword));\n        }\n\n        if (signupName) {\n            signupName.addEventListener('input', () => this.validateName(signupName));\n        }\n    }\n\n    validateEmail(emailInput) {\n        const email = emailInput.value.trim();\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        const isValid = emailRegex.test(email);\n        \n        this.setFieldValidation(emailInput, isValid, isValid ? '' : 'Please enter a valid email address');\n        return isValid;\n    }\n\n    validatePassword(passwordInput) {\n        const password = passwordInput.value;\n        const isValid = password.length >= 6;\n        \n        this.setFieldValidation(passwordInput, isValid, isValid ? '' : 'Password must be at least 6 characters');\n        return isValid;\n    }\n\n    validatePasswordMatch(passwordInput, confirmPasswordInput) {\n        const password = passwordInput.value;\n        const confirmPassword = confirmPasswordInput.value;\n        const isValid = password === confirmPassword && password.length > 0;\n        \n        this.setFieldValidation(confirmPasswordInput, isValid, isValid ? '' : 'Passwords do not match');\n        return isValid;\n    }\n\n    validateName(nameInput) {\n        const name = nameInput.value.trim();\n        const isValid = name.length >= 2;\n        \n        this.setFieldValidation(nameInput, isValid, isValid ? '' : 'Name must be at least 2 characters');\n        return isValid;\n    }\n\n    setFieldValidation(input, isValid, errorMessage) {\n        const errorDiv = input.parentNode.querySelector('.field-error') || this.createErrorDiv(input);\n        \n        if (isValid) {\n            input.classList.remove('error');\n            input.classList.add('valid');\n            errorDiv.textContent = '';\n            errorDiv.style.display = 'none';\n        } else {\n            input.classList.remove('valid');\n            input.classList.add('error');\n            errorDiv.textContent = errorMessage;\n            errorDiv.style.display = 'block';\n        }\n    }\n\n    createErrorDiv(input) {\n        const errorDiv = document.createElement('div');\n        errorDiv.className = 'field-error';\n        errorDiv.style.color = '#ef4444';\n        errorDiv.style.fontSize = '0.875rem';\n        errorDiv.style.marginTop = '0.25rem';\n        input.parentNode.appendChild(errorDiv);\n        return errorDiv;\n    }\n\n    showLoginModal() {\n        document.getElementById('login-modal').style.display = 'flex';\n        document.getElementById('signup-modal').style.display = 'none';\n        document.getElementById('login-email').focus();\n    }\n\n    showSignupModal() {\n        document.getElementById('login-modal').style.display = 'none';\n        document.getElementById('signup-modal').style.display = 'flex';\n        document.getElementById('signup-name').focus();\n    }\n\n    closeModal() {\n        const loginModal = document.getElementById('login-modal');\n        const signupModal = document.getElementById('signup-modal');\n        \n        if (loginModal) loginModal.style.display = 'none';\n        if (signupModal) signupModal.style.display = 'none';\n        \n        // Also hide the modal overlay if needed\n        const overlay = document.getElementById('modal-overlay');\n        if (overlay) overlay.style.display = 'none';\n        \n        this.clearFormErrors();\n    }\n    // Add this new method to close all modals\n    closeAllModals() {\n        this.closeModal();\n    }\n\n    clearFormErrors() {\n        const errorDivs = document.querySelectorAll('.field-error');\n        errorDivs.forEach(div => {\n            div.textContent = '';\n            div.style.display = 'none';\n        });\n\n        const inputs = document.querySelectorAll('.error, .valid');\n        inputs.forEach(input => {\n            input.classList.remove('error', 'valid');\n        });\n    }\n\n    async handleLogin() {\n        if (!this.isInitialized) {\n            showToast('Authentication system not available', 'error');\n            return;\n        }\n\n        const email = document.getElementById('login-email').value.trim();\n        const password = document.getElementById('login-password').value;\n\n        // Validate form\n        const isEmailValid = this.validateEmail(document.getElementById('login-email'));\n        const isPasswordValid = this.validatePassword(document.getElementById('login-password'));\n\n        if (!isEmailValid || !isPasswordValid) {\n            showToast('Please fix the errors in the form', 'error');\n            return;\n        }\n\n        try {\n            this.setLoading('login-btn', true);\n            \n            const userCredential = await this.authMethods.signInWithEmailAndPassword(this.auth, email, password);\n            const user = userCredential.user;\n            \n            console.log('User logged in:', user.uid);\n            showToast('Login successful!', 'success');\n            this.closeModal();\n            \n            // Auto reload page after successful login\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n            \n        } catch (error) {\n            console.error('Login error:', error);\n            let errorMessage = 'Login failed. Please try again.';\n            \n            switch (error.code) {\n                case 'auth/user-not-found':\n                    errorMessage = 'No account found with this email address.';\n                    break;\n                case 'auth/wrong-password':\n                    errorMessage = 'Incorrect password.';\n                    break;\n                case 'auth/invalid-email':\n                    errorMessage = 'Invalid email address.';\n                    break;\n                case 'auth/user-disabled':\n                    errorMessage = 'This account has been disabled.';\n                    break;\n                case 'auth/too-many-requests':\n                    errorMessage = 'Too many failed attempts. Please try again later.';\n                    break;\n            }\n            \n            showToast(errorMessage, 'error');\n        } finally {\n            this.setLoading('login-btn', false);\n        }\n    }\n\n    async handleSignup() {\n        if (!this.isInitialized) {\n            showToast('Authentication system not available', 'error');\n            return;\n        }\n\n        const name = document.getElementById('signup-name').value.trim();\n        const email = document.getElementById('signup-email').value.trim();\n        const password = document.getElementById('signup-password').value;\n        const confirmPassword = document.getElementById('signup-confirm-password').value;\n\n        // Validate form\n        const isNameValid = this.validateName(document.getElementById('signup-name'));\n        const isEmailValid = this.validateEmail(document.getElementById('signup-email'));\n        const isPasswordValid = this.validatePassword(document.getElementById('signup-password'));\n        const isPasswordMatchValid = this.validatePasswordMatch(\n            document.getElementById('signup-password'),\n            document.getElementById('signup-confirm-password')\n        );\n\n        if (!isNameValid || !isEmailValid || !isPasswordValid || !isPasswordMatchValid) {\n            showToast('Please fix the errors in the form', 'error');\n            return;\n        }\n\n        try {\n            this.setLoading('signup-btn', true);\n            \n            const userCredential = await this.authMethods.createUserWithEmailAndPassword(this.auth, email, password);\n            const user = userCredential.user;\n            \n            // Update user profile with display name\n            await this.authMethods.updateProfile(user, {\n                displayName: name\n            });\n            \n            console.log('User signed up:', user.uid);\n            showToast(`Welcome, ${name}! Account created successfully.`, 'success');\n            this.closeModal();\n            \n            // Auto reload page after successful signup\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n            \n        } catch (error) {\n            console.error('Signup error:', error);\n            let errorMessage = 'Signup failed. Please try again.';\n            \n            switch (error.code) {\n                case 'auth/email-already-in-use':\n                    errorMessage = 'An account with this email already exists.';\n                    break;\n                case 'auth/invalid-email':\n                    errorMessage = 'Invalid email address.';\n                    break;\n                case 'auth/weak-password':\n                    errorMessage = 'Password is too weak. Please choose a stronger password.';\n                    break;\n                case 'auth/operation-not-allowed':\n                    errorMessage = 'Email/password accounts are not enabled.';\n                    break;\n            }\n            \n            showToast(errorMessage, 'error');\n        } finally {\n            this.setLoading('signup-btn', false);\n        }\n    }\n\n    async signInWithGoogle() {\n        if (!this.isInitialized) {\n            showToast('Authentication system not available', 'error');\n            return;\n        }\n\n        try {\n            const provider = new this.authMethods.GoogleAuthProvider();\n            const result = await this.authMethods.signInWithPopup(this.auth, provider);\n            const user = result.user;\n            \n            console.log('Google sign-in successful:', user.uid);\n            showToast(`Welcome, ${user.displayName}!`, 'success');\n            this.closeModal();\n            \n            // Auto reload page after successful Google sign-in\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n            \n        } catch (error) {\n            console.error('Google sign-in error:', error);\n            let errorMessage = 'Google sign-in failed. Please try again.';\n            \n            switch (error.code) {\n                case 'auth/popup-closed-by-user':\n                    errorMessage = 'Sign-in cancelled.';\n                    break;\n                case 'auth/popup-blocked':\n                    errorMessage = 'Pop-up blocked. Please enable pop-ups for this site.';\n                    break;\n                case 'auth/cancelled-popup-request':\n                    errorMessage = 'Sign-in cancelled.';\n                    break;\n            }\n            \n            showToast(errorMessage, 'error');\n        }\n    }\n\n    async logout() {\n        if (!this.isInitialized) {\n            showToast('Authentication system not available', 'error');\n            return;\n        }\n        \n        try {\n            await this.authMethods.signOut(this.auth);\n            console.log('User logged out successfully');\n            showToast('Logged out successfully', 'success');\n            \n            // Clear session storage flags\n            sessionStorage.removeItem('welcome_back_shown');\n            sessionStorage.removeItem('welcome_shown');\n            \n            // Auto reload page after successful logout\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n            \n        } catch (error) {\n            console.error('Logout error:', error);\n            showToast('Logout failed. Please try again.', 'error');\n        }\n    }\n    \n    // Clear all user data from localStorage\n    clearUserData() {\n        const dataKeys = [\n            'business_management_vendors',\n            'business_management_transactions', \n            'business_management_projects',\n            'business_management_settings',  // Added settings to be cleared\n            'business_management_last_sync'\n        ];\n        \n        dataKeys.forEach(key => {\n            localStorage.removeItem(key);\n        });\n        \n        console.log('User data cleared from localStorage');\n    }\n    \n    // Refresh all UI sections to show empty state\n    refreshAllSections() {\n        // Trigger refresh of all sections through the main app\n        if (window.app) {\n            // Reset data in all managers\n            if (window.app.vendors) {\n                window.app.vendors.renderVendorsTable();\n                window.app.vendors.setupFilterDropdowns();\n            }\n            if (window.app.transactions) {\n                window.app.transactions.renderTransactionsTable();\n                window.app.transactions.populateFilterDropdowns();\n            }\n            if (window.app.projects) {\n                window.app.projects.renderProjectsGrid();\n            }\n            if (window.app.analytics) {\n                window.app.analytics.loadDashboard();\n            }\n            \n            // Force reload current section\n            const currentSection = window.app.currentSection || 'dashboard';\n            setTimeout(() => {\n                window.app.loadSection(currentSection);\n            }, 100);\n        }\n    }\n    \n    // Force refresh of all data after login\n    forceDataRefresh() {\n        // Small delay to ensure Firebase auth state is fully updated\n        setTimeout(() => {\n            if (window.app) {\n                // Clear any cached data first\n                const currentTime = Date.now();\n                localStorage.setItem('business_management_last_refresh', currentTime.toString());\n                \n                // Refresh all managers\n                if (window.app.vendors) {\n                    window.app.vendors.renderVendorsTable();\n                    window.app.vendors.setupFilterDropdowns();\n                }\n                if (window.app.transactions) {\n                    window.app.transactions.renderTransactionsTable();\n                    window.app.transactions.populateFilterDropdowns();\n                }\n                if (window.app.projects) {\n                    window.app.projects.renderProjectsGrid();\n                }\n                if (window.app.analytics) {\n                    window.app.analytics.loadDashboard();\n                }\n                \n                // Refresh settings and company name display\n                if (window.app.settings) {\n                    const settings = window.app.settings.loadSettings();\n                    window.app.settings.applySettings(settings);\n                }\n                \n                // Force reload current section to ensure fresh data\n                const currentSection = window.app.currentSection || 'dashboard';\n                window.app.loadSection(currentSection);\n            }\n        }, 200);\n    }\n\n    updateUIState() {\n        const loginBtn = document.getElementById('login-btn');\n        const userProfile = document.getElementById('user-profile');\n        const userName = document.getElementById('user-name');\n        const userAvatar = document.getElementById('user-avatar');\n\n        if (this.isAuthenticated && this.currentUser) {\n            // Hide login button, show user profile\n            if (loginBtn) loginBtn.style.display = 'none';\n            if (userProfile) userProfile.style.display = 'flex';\n            \n            // Update user info\n            if (userName) {\n                userName.textContent = this.currentUser.displayName || this.currentUser.email.split('@')[0];\n            }\n            \n            if (userAvatar) {\n                if (this.currentUser.photoURL) {\n                    userAvatar.src = this.currentUser.photoURL;\n                } else {\n                    // Hide avatar when no photo URL is available\n                    userAvatar.style.display = 'none';\n                }\n            }\n            \n        } else {\n            // Show login button, hide user profile\n            if (loginBtn) loginBtn.style.display = 'flex';\n            if (userProfile) userProfile.style.display = 'none';\n        }\n    }\n\n    getInitials(name) {\n        if (!name) return 'U';\n        return name.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2);\n    }\n\n    generateAvatarDataURL(initials) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.width = 40;\n        canvas.height = 40;\n        \n        // Background\n        ctx.fillStyle = '#F59E0B';\n        ctx.fillRect(0, 0, 40, 40);\n        \n        // Text\n        ctx.fillStyle = '#FFFFFF';\n        ctx.font = 'bold 16px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(initials, 20, 20);\n        \n        return canvas.toDataURL();\n    }\n\n    setLoading(buttonId, isLoading) {\n        const button = document.getElementById(buttonId);\n        if (!button) return;\n        \n        if (isLoading) {\n            button.disabled = true;\n            button.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Please wait...';\n        } else {\n            button.disabled = false;\n            if (buttonId === 'login-btn') {\n                button.innerHTML = '<i class=\"fas fa-sign-in-alt\"></i> Login';\n            } else if (buttonId === 'signup-btn') {\n                button.innerHTML = '<i class=\"fas fa-user-plus\"></i> Sign Up';\n            }\n        }\n    }\n\n    // Check if user needs to be authenticated for a feature\n    requireAuth(feature = 'this feature') {\n        if (!this.isAuthenticated) {\n            showToast(`Please log in to use ${feature}`, 'warning');\n            this.showLoginModal();\n            return false;\n        }\n        return true;\n    }\n\n    // Get current user info\n    getCurrentUser() {\n        return this.currentUser;\n    }\n\n    // Check if Firebase is initialized\n    isReady() {\n        return this.isInitialized;\n    }\n}","size_bytes":24723},"js/firebase-config.js":{"content":"// Firebase Configuration\n// IMPORTANT: Replace these values with your actual Firebase project configuration\n// Get these values from: Firebase Console > Project Settings > Your apps > Web app config\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAx_9AtQoZ0TYSVdWwyuJUTwSKeRgiQDWY\",\n  authDomain: \"bizmanager-db.firebaseapp.com\",\n  databaseURL:\n    \"https://bizmanager-db-default-rtdb.asia-southeast1.firebasedatabase.app\",\n  projectId: \"bizmanager-db\",\n  storageBucket: \"bizmanager-db.firebasestorage.app\",\n  messagingSenderId: \"710480846384\",\n  appId: \"1:710480846384:web:6ea6c6e1c55b2964b597f5\",\n  measurementId: \"G-VHP8FZ7WJT\",\n};\n// Initialize Firebase (this will be imported by other modules)\nexport { firebaseConfig };\n","size_bytes":790},"js/firebase-integration.js":{"content":"// Firebase Integration Helper - adds methods to existing App class\n// This file extends the main App functionality with Firebase features\n\nexport function addFirebaseIntegration(app) {\n    // Add Firebase integration methods to the existing app instance\n    \n    app.setupFirebaseIntegration = function() {\n        // Listen for auth state changes to sync data\n        this.auth.onAuthStateChanged((user) => {\n            if (user) {\n                // User signed in - sync data and update UI\n                console.log('User authenticated, syncing data...');\n                this.storage.syncDataFromCloud();\n                this.refreshAllSections();\n            } else {\n                // User signed out - work with local data only\n                console.log('User signed out, using local data only');\n            }\n        });\n\n        // Add sync button to UI\n        this.addSyncButton();\n        \n        // Add offline indicator\n        this.addOfflineIndicator();\n    };\n    \n    app.addSyncButton = function() {\n        const headerActions = document.querySelector('.header-actions');\n        if (headerActions && !document.getElementById('sync-btn')) {\n            const syncBtn = document.createElement('button');\n            syncBtn.id = 'sync-btn';\n            syncBtn.className = 'btn btn-secondary';\n            syncBtn.innerHTML = '<i class=\"fas fa-sync-alt\"></i>';\n            syncBtn.title = 'Sync data across devices';\n            syncBtn.style.display = 'none';\n            syncBtn.style.marginRight = '0.5rem';\n            \n            syncBtn.addEventListener('click', async () => {\n                if (this.auth.requireAuth('sync data')) {\n                    syncBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i>';\n                    syncBtn.disabled = true;\n                    \n                    const success = await this.storage.forceSyncAll();\n                    \n                    if (success) {\n                        showToast('Data synced successfully', 'success');\n                        this.refreshAllSections();\n                        syncBtn.innerHTML = '<i class=\"fas fa-check\"></i>';\n                        setTimeout(() => {\n                            syncBtn.innerHTML = '<i class=\"fas fa-sync-alt\"></i>';\n                        }, 2000);\n                    } else {\n                        showToast('Sync failed. Please try again.', 'error');\n                        syncBtn.innerHTML = '<i class=\"fas fa-exclamation-triangle\"></i>';\n                        setTimeout(() => {\n                            syncBtn.innerHTML = '<i class=\"fas fa-sync-alt\"></i>';\n                        }, 2000);\n                    }\n                    \n                    syncBtn.disabled = false;\n                }\n            });\n\n            // Show sync button only when authenticated\n            this.auth.onAuthStateChanged((user) => {\n                syncBtn.style.display = user ? 'flex' : 'none';\n            });\n\n            headerActions.insertBefore(syncBtn, headerActions.firstChild);\n        }\n    };\n    \n    app.addOfflineIndicator = function() {\n        if (!document.getElementById('offline-indicator')) {\n            const indicator = document.createElement('div');\n            indicator.id = 'offline-indicator';\n            indicator.className = 'offline-indicator';\n            indicator.innerHTML = '<i class=\"fas fa-wifi-slash\"></i> Offline Mode';\n            document.body.appendChild(indicator);\n            \n            const updateIndicator = () => {\n                if (navigator.onLine) {\n                    indicator.style.display = 'none';\n                } else {\n                    indicator.style.display = 'block';\n                    indicator.classList.add('show');\n                }\n            };\n            \n            window.addEventListener('online', updateIndicator);\n            window.addEventListener('offline', updateIndicator);\n            updateIndicator();\n        }\n    };\n    \n    app.refreshAllSections = function() {\n        // Refresh the current section to show updated data\n        if (this.currentSection) {\n            this.loadSection(this.currentSection);\n        }\n        \n        // Update analytics if on dashboard\n        if (this.currentSection === 'dashboard') {\n            this.analytics.loadDashboard();\n        }\n    };\n    \n    // Enhanced authentication checking for features\n    app.requireAuth = function(feature = 'this feature') {\n        return this.auth.requireAuth(feature);\n    };\n    \n    // Add user profile management\n    app.showUserProfile = function() {\n        const user = this.auth.getCurrentUser();\n        if (user) {\n            // Show user profile modal or section\n            showToast(`Logged in as: ${user.displayName || user.email}`, 'info');\n        }\n    };\n}\n\n// Auto-initialize when imported with main app\nif (typeof window !== 'undefined' && window.app) {\n    addFirebaseIntegration(window.app);\n}","size_bytes":4962},"js/firebase-storage.js":{"content":"// Firebase Firestore integration for cross-device data sync\nimport { firebaseConfig } from './firebase-config.js';\n\nexport class FirebaseStorageManager {\n    constructor() {\n        this.db = null;\n        this.auth = null;\n        this.currentUser = null;\n        this.isInitialized = false;\n        this.isOnline = navigator.onLine;\n        \n        // Fallback to localStorage for offline functionality\n        this.localStorageKeys = {\n            vendors: 'business_management_vendors',\n            transactions: 'business_management_transactions', \n            projects: 'business_management_projects',\n            settings: 'business_management_settings',\n            lastSync: 'business_management_last_sync'\n        };\n        \n        this.init();\n        this.setupOfflineDetection();\n    }\n\n    async init() {\n    try {\n        // Import Firebase services\n        const { initializeApp } = await import('https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js');\n        const { getAuth, onAuthStateChanged } = await import('https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js');\n        const { getFirestore, enableNetwork, disableNetwork } = await import('https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js');\n        \n        // Initialize Firebase\n        const app = initializeApp(firebaseConfig);\n        this.auth = getAuth(app);\n        this.db = getFirestore(app);\n        \n        // Initialize data\n        this.initializeData();\n        \n        // Listen for auth state changes\n        onAuthStateChanged(this.auth, (user) => {\n            this.currentUser = user;\n            if (user) {\n                console.log('User authenticated:', user.uid);\n                this.syncDataFromCloud();\n            } else {\n                console.log('User signed out');\n                this.currentUser = null;\n                // Clear data when user signs out\n                this.clearLocalUserData();\n            }\n        });\n        \n        this.isInitialized = true;\n        console.log('Firebase initialized successfully');\n        \n    } catch (error) {\n        console.error('Failed to initialize Firebase:', error);\n        console.log('Falling back to localStorage only');\n        this.isInitialized = false;\n    }\n}\n\n    setupOfflineDetection() {\n        window.addEventListener('online', () => {\n            this.isOnline = true;\n            console.log('Back online - syncing data');\n            if (this.currentUser) {\n                this.syncDataToCloud();\n            }\n        });\n\n        window.addEventListener('offline', () => {\n            this.isOnline = false;\n            console.log('Gone offline - using localStorage');\n        });\n    }\n\n    // Get user's Firestore document reference\n    getUserDocRef(collection) {\n        if (!this.currentUser || !this.db) return null;\n        \n        const { doc, collection: firestoreCollection } = window.firestoreModules;\n        return doc(firestoreCollection(this.db, 'users', this.currentUser.uid, collection));\n    }\n\n    // Sync data from cloud to local storage\n    async syncDataFromCloud() {\n        if (!this.isOnline || !this.currentUser || !this.isInitialized) return;\n\n        try {\n            const { doc, getDoc, collection } = await import('https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js');\n            \n            const collections = ['vendors', 'transactions', 'projects', 'settings'];\n            \n            for (const collectionName of collections) {\n                const docRef = doc(this.db, 'users', this.currentUser.uid, collectionName, 'data');\n                const docSnap = await getDoc(docRef);\n                \n                if (docSnap.exists()) {\n                    const data = docSnap.data();\n                    localStorage.setItem(this.localStorageKeys[collectionName], JSON.stringify(data.items || data));\n                    console.log(`Synced ${collectionName} from cloud`);\n                }\n            }\n            \n            localStorage.setItem(this.localStorageKeys.lastSync, new Date().toISOString());\n            \n        } catch (error) {\n            console.error('Error syncing from cloud:', error);\n        }\n    }\n\n    // Sync data from local storage to cloud\n    async syncDataToCloud() {\n        if (!this.isOnline || !this.currentUser || !this.isInitialized) return;\n\n        try {\n            const { doc, setDoc } = await import('https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js');\n            \n            const collections = ['vendors', 'transactions', 'projects', 'settings'];\n            \n            for (const collectionName of collections) {\n                const localData = localStorage.getItem(this.localStorageKeys[collectionName]);\n                if (localData) {\n                    const docRef = doc(this.db, 'users', this.currentUser.uid, collectionName, 'data');\n                    await setDoc(docRef, {\n                        items: JSON.parse(localData),\n                        lastUpdated: new Date().toISOString()\n                    }, { merge: true });\n                    console.log(`Synced ${collectionName} to cloud`);\n                }\n            }\n            \n        } catch (error) {\n            console.error('Error syncing to cloud:', error);\n        }\n    }\n\n    // Vendor operations (with cloud sync)\n    getVendors() {\n        try {\n            return JSON.parse(localStorage.getItem(this.localStorageKeys.vendors)) || [];\n        } catch (error) {\n            console.error('Error loading vendors:', error);\n            return [];\n        }\n    }\n\n    async saveVendors(vendors) {\n        try {\n            localStorage.setItem(this.localStorageKeys.vendors, JSON.stringify(vendors));\n            \n            // Sync to cloud if online and authenticated\n            if (this.isOnline && this.currentUser && this.isInitialized) {\n                await this.syncVendorsToCloud(vendors);\n            }\n            \n            return true;\n        } catch (error) {\n            console.error('Error saving vendors:', error);\n            return false;\n        }\n    }\n\n    async syncVendorsToCloud(vendors) {\n        try {\n            const { doc, setDoc } = await import('https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js');\n            const docRef = doc(this.db, 'users', this.currentUser.uid, 'vendors', 'data');\n            await setDoc(docRef, {\n                items: vendors,\n                lastUpdated: new Date().toISOString()\n            }, { merge: true });\n        } catch (error) {\n            console.error('Error syncing vendors to cloud:', error);\n        }\n    }\n\n    addVendor(vendor) {\n        if (!this.requireAuth()) {\n            console.log('Authentication required for adding vendor');\n            return Promise.resolve(null);\n        }\n        \n        const vendors = this.getVendors();\n        vendor.id = this.generateId();\n        vendor.createdAt = new Date().toISOString();\n        vendor.updatedAt = new Date().toISOString();\n        vendor.totalSpent = 0;\n        vendor.status = vendor.status || 'active';\n        \n        vendors.push(vendor);\n        return this.saveVendors(vendors).then(() => {\n            this.triggerDataRefresh();\n            return vendor;\n        }).catch(() => null);\n    }\n\n    updateVendor(id, updatedVendor) {\n        const vendors = this.getVendors();\n        const index = vendors.findIndex(v => v.id === id);\n        \n        if (index !== -1) {\n            updatedVendor.updatedAt = new Date().toISOString();\n            vendors[index] = { ...vendors[index], ...updatedVendor };\n            return this.saveVendors(vendors).then(() => {\n                this.triggerDataRefresh();\n                return vendors[index];\n            }).catch(() => null);\n        }\n        return null;\n    }\n\n    deleteVendor(id) {\n        const vendors = this.getVendors();\n        const filteredVendors = vendors.filter(v => v.id !== id);\n        return this.saveVendors(filteredVendors).then(() => {\n            this.triggerDataRefresh();\n            return true;\n        });\n    }\n\n    // Transaction operations\n    getTransactions() {\n        try {\n            return JSON.parse(localStorage.getItem(this.localStorageKeys.transactions)) || [];\n        } catch (error) {\n            console.error('Error loading transactions:', error);\n            return [];\n        }\n    }\n\n    // In firebase-storage.js, add to the FirebaseStorageManager class\n    getVendorById(id) {\n        const vendors = this.getVendors();\n        return vendors.find(v => v.id === id) || null;\n    }\n\n    getProjectById(id) {\n        const projects = this.getProjects();\n        return projects.find(p => p.id === id) || null;\n    }\n\n    getTransactionById(id) {\n        const transactions = this.getTransactions();\n        return transactions.find(t => t.id === id) || null;\n    }\n\n    getTransactionsByProject(projectId) {\n        const transactions = this.getTransactions();\n        return transactions.filter(t => t.projectId === projectId);\n    }\n\n    getTransactionsByVendor(vendorId) {\n        const transactions = this.getTransactions();\n        return transactions.filter(t => t.vendorId === vendorId);\n    }\n\n    async saveTransactions(transactions) {\n        try {\n            localStorage.setItem(this.localStorageKeys.transactions, JSON.stringify(transactions));\n            \n            if (this.isOnline && this.currentUser && this.isInitialized) {\n                await this.syncTransactionsToCloud(transactions);\n            }\n            \n            return true;\n        } catch (error) {\n            console.error('Error saving transactions:', error);\n            return false;\n        }\n    }\n\n    async syncTransactionsToCloud(transactions) {\n        try {\n            const { doc, setDoc } = await import('https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js');\n            const docRef = doc(this.db, 'users', this.currentUser.uid, 'transactions', 'data');\n            await setDoc(docRef, {\n                items: transactions,\n                lastUpdated: new Date().toISOString()\n            }, { merge: true });\n        } catch (error) {\n            console.error('Error syncing transactions to cloud:', error);\n        }\n    }\n\n    addTransaction(transaction) {\n        if (!this.requireAuth()) {\n            console.log('Authentication required for adding transaction');\n            return Promise.resolve(null);\n        }\n        \n        const transactions = this.getTransactions();\n        transaction.id = this.generateId();\n        transaction.createdAt = new Date().toISOString();\n        transaction.updatedAt = new Date().toISOString();\n        \n        transactions.push(transaction);\n        return this.saveTransactions(transactions).then(() => {\n            this.triggerDataRefresh();\n            return transaction;\n        }).catch(() => null);\n    }\n\n    updateTransaction(id, updatedTransaction) {\n        const transactions = this.getTransactions();\n        const index = transactions.findIndex(t => t.id === id);\n        \n        if (index !== -1) {\n            updatedTransaction.updatedAt = new Date().toISOString();\n            transactions[index] = { ...transactions[index], ...updatedTransaction };\n            return this.saveTransactions(transactions).then(() => {\n                this.triggerDataRefresh();\n                return transactions[index];\n            }).catch(() => null);\n        }\n        return null;\n    }\n\n    deleteTransaction(id) {\n        const transactions = this.getTransactions();\n        const filteredTransactions = transactions.filter(t => t.id !== id);\n        return this.saveTransactions(filteredTransactions).then(() => {\n            this.triggerDataRefresh();\n            return true;\n        });\n    }\n\n    // Project operations\n    getProjects() {\n        try {\n            return JSON.parse(localStorage.getItem(this.localStorageKeys.projects)) || [];\n        } catch (error) {\n            console.error('Error loading projects:', error);\n            return [];\n        }\n    }\n\n    async saveProjects(projects) {\n        try {\n            localStorage.setItem(this.localStorageKeys.projects, JSON.stringify(projects));\n            \n            if (this.isOnline && this.currentUser && this.isInitialized) {\n                await this.syncProjectsToCloud(projects);\n            }\n            \n            return true;\n        } catch (error) {\n            console.error('Error saving projects:', error);\n            return false;\n        }\n    }\n\n    async syncProjectsToCloud(projects) {\n        try {\n            const { doc, setDoc } = await import('https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js');\n            const docRef = doc(this.db, 'users', this.currentUser.uid, 'projects', 'data');\n            await setDoc(docRef, {\n                items: projects,\n                lastUpdated: new Date().toISOString()\n            }, { merge: true });\n        } catch (error) {\n            console.error('Error syncing projects to cloud:', error);\n        }\n    }\n\n    addProject(project) {\n        if (!this.requireAuth()) {\n            console.log('Authentication required for adding project');\n            return Promise.resolve(null);\n        }\n        \n        const projects = this.getProjects();\n        project.id = this.generateId();\n        project.createdAt = new Date().toISOString();\n        project.updatedAt = new Date().toISOString();\n        project.status = project.status || 'planning';\n        project.progress = project.progress || 0;\n        \n        projects.push(project);\n        return this.saveProjects(projects).then(() => {\n            this.triggerDataRefresh();\n            return project;\n        }).catch(() => null);\n    }\n\n    updateProject(id, updatedProject) {\n        const projects = this.getProjects();\n        const index = projects.findIndex(p => p.id === id);\n        \n        if (index !== -1) {\n            updatedProject.updatedAt = new Date().toISOString();\n            projects[index] = { ...projects[index], ...updatedProject };\n            return this.saveProjects(projects).then(() => {\n                this.triggerDataRefresh();\n                return projects[index];\n            }).catch(() => null);\n        }\n        return null;\n    }\n\n    deleteProject(id) {\n        const projects = this.getProjects();\n        const filteredProjects = projects.filter(p => p.id !== id);\n        return this.saveProjects(filteredProjects).then(() => {\n            this.triggerDataRefresh();\n            return true;\n        });\n    }\n\n    // Settings operations\n    getSettings() {\n        try {\n            const settings = JSON.parse(localStorage.getItem(this.localStorageKeys.settings));\n            return settings || {\n                companyName: 'Your Business',\n                businessType: 'construction',\n                primaryColor: '#F59E0B',\n                currency: 'INR',\n                theme: 'light',\n                customCategories: {\n                    vendor: [],\n                    transaction: []\n                }\n            };\n        } catch (error) {\n            console.error('Error loading settings:', error);\n            return {};\n        }\n    }\n\n    async saveSettings(settings) {\n        try {\n            localStorage.setItem(this.localStorageKeys.settings, JSON.stringify(settings));\n            \n            if (this.isOnline && this.currentUser && this.isInitialized) {\n                await this.syncSettingsToCloud(settings);\n            }\n            \n            return true;\n        } catch (error) {\n            console.error('Error saving settings:', error);\n            return false;\n        }\n    }\n\n    async syncSettingsToCloud(settings) {\n        try {\n            const { doc, setDoc } = await import('https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js');\n            const docRef = doc(this.db, 'users', this.currentUser.uid, 'settings', 'data');\n            await setDoc(docRef, {\n                ...settings,\n                lastUpdated: new Date().toISOString()\n            }, { merge: true });\n        } catch (error) {\n            console.error('Error syncing settings to cloud:', error);\n        }\n    }\n\n    // User profile operations\n    async saveUserProfile(profile) {\n        if (!this.currentUser || !this.isInitialized) return false;\n        \n        try {\n            const { doc, setDoc } = await import('https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js');\n            const docRef = doc(this.db, 'users', this.currentUser.uid);\n            await setDoc(docRef, {\n                ...profile,\n                uid: this.currentUser.uid,\n                email: this.currentUser.email,\n                lastUpdated: new Date().toISOString()\n            }, { merge: true });\n            return true;\n        } catch (error) {\n            console.error('Error saving user profile:', error);\n            return false;\n        }\n    }\n\n    async getUserProfile() {\n        if (!this.currentUser || !this.isInitialized) return null;\n        \n        try {\n            const { doc, getDoc } = await import('https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js');\n            const docRef = doc(this.db, 'users', this.currentUser.uid);\n            const docSnap = await getDoc(docRef);\n            \n            if (docSnap.exists()) {\n                return docSnap.data();\n            }\n            return null;\n        } catch (error) {\n            console.error('Error getting user profile:', error);\n            return null;\n        }\n    }\n\n    // Clear local user data when logging out\n    clearLocalUserData() {\n        const dataKeys = [\n            this.localStorageKeys.vendors,\n            this.localStorageKeys.transactions,\n            this.localStorageKeys.projects,\n            this.localStorageKeys.settings,  // Added settings to be cleared\n            this.localStorageKeys.lastSync\n        ];\n        \n        dataKeys.forEach(key => {\n            localStorage.removeItem(key);\n        });\n        \n        // Initialize empty data structure\n        this.initializeData();\n        \n        console.log('Local user data cleared');\n    }\n\n    // Check if user is authenticated before allowing operations\n    requireAuth() {\n        if (!this.currentUser) {\n            return false;\n        }\n        return true;\n    }\n\n    // Utility functions\n    generateId() {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n    \n    // Auto-refresh mechanism to fix caching issues\n    triggerDataRefresh() {\n        // Small delay to ensure data is saved properly\n        setTimeout(() => {\n            if (window.app) {\n                console.log('Triggering data refresh to fix cache issues');\n                \n                // Set refresh timestamp\n                localStorage.setItem('business_management_last_refresh', Date.now().toString());\n                \n                // Refresh all UI components\n                if (window.app.vendors && window.app.currentSection === 'vendors') {\n                    window.app.vendors.renderVendorsTable();\n                    if (window.app.vendors.setupFilterDropdowns) {\n                        window.app.vendors.setupFilterDropdowns();\n                    }\n                }\n                \n                if (window.app.transactions && window.app.currentSection === 'transactions') {\n                    window.app.transactions.renderTransactionsTable();\n                    if (window.app.transactions.populateFilterDropdowns) {\n                        window.app.transactions.populateFilterDropdowns();\n                    }\n                }\n                \n                if (window.app.projects && window.app.currentSection === 'projects') {\n                    window.app.projects.renderProjectsGrid();\n                }\n                \n                // Always refresh analytics for dashboard\n                if (window.app.analytics) {\n                    window.app.analytics.loadDashboard();\n                }\n            }\n        }, 100);\n    }\n\n    // Initialize data with defaults if needed  \n    initializeData() {\n        if (!localStorage.getItem(this.localStorageKeys.vendors)) {\n            this.saveVendors([]);\n        }\n        if (!localStorage.getItem(this.localStorageKeys.transactions)) {\n            this.saveTransactions([]);\n        }\n        if (!localStorage.getItem(this.localStorageKeys.projects)) {\n            this.saveProjects([]);\n        }\n        if (!localStorage.getItem(this.localStorageKeys.settings)) {\n            this.saveSettings({\n                companyName: 'Your Business',\n                businessType: 'construction',\n                primaryColor: '#F59E0B',\n                currency: 'INR',\n                theme: 'light',\n                customCategories: {\n                    vendor: [],\n                    transaction: []\n                }\n            });\n        }\n    }\n\n    // Force sync all data (useful for manual sync button)\n    async forceSyncAll() {\n        if (!this.isOnline || !this.currentUser || !this.isInitialized) {\n            console.log('Cannot sync: offline or not authenticated');\n            return false;\n        }\n\n        try {\n            await this.syncDataToCloud();\n            await this.syncDataFromCloud();\n            console.log('Force sync completed');\n            return true;\n        } catch (error) {\n            console.error('Force sync failed:', error);\n            return false;\n        }\n    }\n}","size_bytes":21576},"js/main.js":{"content":"// Main application entry point\r\nimport { FirebaseStorageManager } from './firebase-storage.js';\r\nimport { VendorManager } from './vendors.js';\r\nimport { TransactionManager } from './transactions.js';\r\nimport { ProjectManager } from './projects.js';\r\nimport { AnalyticsManager } from './analytics.js';\r\n\r\nimport { SettingsManager } from './settings.js';\r\nimport { FirebaseAuthManager } from './firebase-auth.js';\r\nimport { showToast, showLoading, hideLoading } from './utils.js';\r\nimport { addFirebaseIntegration } from './firebase-integration.js';\r\n\r\nclass App {\r\n    constructor() {\r\n        this.storage = new FirebaseStorageManager();\r\n        this.auth = new FirebaseAuthManager();\r\n        \r\n        // Initialize other managers after storage is ready\r\n        this.settings = new SettingsManager(this.storage);\r\n        this.vendors = new VendorManager(this.storage);\r\n        this.transactions = new TransactionManager(this.storage);\r\n        this.projects = new ProjectManager(this.storage);\r\n        this.analytics = new AnalyticsManager(this.storage);\r\n\r\n        \r\n        // Add Firebase integration methods\r\n        addFirebaseIntegration(this);\r\n        \r\n        this.currentSection = 'dashboard';\r\n        \r\n        // Initialize with async support\r\n        this.init();\r\n    }\r\n\r\n    async init() {\r\n        // Wait for storage to initialize\r\n        await this.storage.init();\r\n        \r\n        this.setupNavigation();\r\n        this.setupServiceWorker();\r\n        this.setupOfflineDetection();\r\n        this.setupDataManagement();\r\n        this.loadSection('dashboard');\r\n        \r\n        // Apply saved settings\r\n        this.applyInitialSettings();\r\n        \r\n        // Show welcome message\r\n        setTimeout(() => {\r\n            const settings = this.settings.loadSettings();\r\n            const hasShownWelcome = sessionStorage.getItem('welcome_shown');\n            if (!hasShownWelcome) {\n                showToast(`Welcome to ${settings.companyName} Management System`, 'success');\n                sessionStorage.setItem('welcome_shown', 'true');\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    applyInitialSettings() {\r\n        const settings = this.settings.loadSettings();\r\n        this.settings.applySettings(settings);\r\n    }\r\n\r\n    setupNavigation() {\r\n        const navButtons = document.querySelectorAll('.nav-btn');\r\n        navButtons.forEach(btn => {\r\n            btn.addEventListener('click', (e) => {\r\n                const section = e.currentTarget.dataset.section;\r\n                this.loadSection(section);\r\n            });\r\n        });\r\n    }\r\n\r\n    loadSection(sectionName) {\r\n        showLoading();\r\n        \r\n        // Update navigation\r\n        document.querySelectorAll('.nav-btn').forEach(btn => {\r\n            btn.classList.remove('active');\r\n        });\r\n        document.querySelector(`[data-section=\"${sectionName}\"]`).classList.add('active');\r\n        \r\n        // Hide all sections\r\n        document.querySelectorAll('.content-section').forEach(section => {\r\n            section.classList.remove('active');\r\n        });\r\n        \r\n        // Show selected section\r\n        document.getElementById(`${sectionName}-section`).classList.add('active');\r\n        \r\n        // Load section data\r\n        setTimeout(() => {\r\n            this.loadSectionData(sectionName);\r\n            hideLoading();\r\n        }, 100);\r\n        \r\n        this.currentSection = sectionName;\r\n    }\r\n\r\n    loadSectionData(sectionName) {\r\n        switch (sectionName) {\r\n            case 'dashboard':\r\n                this.analytics.loadDashboard();\r\n                break;\r\n            case 'vendors':\r\n                this.vendors.loadVendors();\r\n                break;\r\n            case 'transactions':\r\n                this.transactions.loadTransactions();\r\n                break;\r\n            case 'projects':\r\n                this.projects.loadProjects();\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n    setupServiceWorker() {\r\n        if ('serviceWorker' in navigator) {\r\n            navigator.serviceWorker.register('./sw.js')\r\n                .then(registration => {\r\n                    console.log('Service Worker registered successfully:', registration);\r\n                })\r\n                .catch(error => {\r\n                    console.log('Service Worker registration failed:', error);\r\n                });\r\n        }\r\n    }\r\n\r\n    setupOfflineDetection() {\r\n        const offlineIndicator = document.getElementById('offline-indicator');\r\n        \r\n        const updateOnlineStatus = () => {\r\n            if (navigator.onLine) {\r\n                offlineIndicator.innerHTML = '<i class=\"fas fa-wifi\"></i><span>Online</span>';\r\n                offlineIndicator.classList.remove('offline');\r\n            } else {\r\n                offlineIndicator.innerHTML = '<i class=\"fas fa-wifi-slash\"></i><span>Offline</span>';\r\n                offlineIndicator.classList.add('offline');\r\n            }\r\n        };\r\n\r\n        window.addEventListener('online', updateOnlineStatus);\r\n        window.addEventListener('offline', updateOnlineStatus);\r\n        updateOnlineStatus();\r\n    }\r\n\r\n    setupDataManagement() {\r\n        // Export data\r\n        document.getElementById('export-data').addEventListener('click', () => {\r\n            this.exportData();\r\n        });\r\n    }\r\n\r\n    exportData() {\r\n        try {\r\n            // Export data as CSV format\r\n            const vendors = this.storage.getVendors();\r\n            const transactions = this.storage.getTransactions();\r\n            const projects = this.storage.getProjects();\r\n\r\n            // Create vendor CSV\r\n            let vendorCSV = 'Name,Category,Contact,Phone,Email,Address,Total Spent,Status\\n';\r\n            vendors.forEach(vendor => {\r\n                vendorCSV += `\"${vendor.name}\",\"${vendor.category}\",\"${vendor.contact || ''}\",\"${vendor.phone || ''}\",\"${vendor.email || ''}\",\"${vendor.address || ''}\",\"${vendor.totalSpent || 0}\",\"${vendor.status}\"\\n`;\r\n            });\r\n\r\n            // Create transaction CSV\r\n            let transactionCSV = 'Date,Type,Category,Vendor,Project,Amount,Payment Method,Description\\n';\r\n            transactions.forEach(transaction => {\r\n                const vendorName = vendors.find(v => v.id === transaction.vendorId)?.name || '';\r\n                const projectName = projects.find(p => p.id === transaction.projectId)?.name || '';\r\n                transactionCSV += `\"${transaction.date}\",\"${transaction.type}\",\"${transaction.category || ''}\",\"${vendorName}\",\"${projectName}\",\"${transaction.amount}\",\"${transaction.paymentMethod || ''}\",\"${transaction.description || ''}\"\\n`;\r\n            });\r\n\r\n            // Create project CSV\r\n            let projectCSV = 'Name,Client,Status,Start Date,End Date,Budget,Progress,Description\\n';\r\n            projects.forEach(project => {\r\n                projectCSV += `\"${project.name}\",\"${project.client || ''}\",\"${project.status}\",\"${project.startDate || ''}\",\"${project.endDate || ''}\",\"${project.budget || 0}\",\"${project.progress || 0}\",\"${project.description || ''}\"\\n`;\r\n            });\r\n\r\n            // Create zip-like export with multiple CSV files\r\n            const date = new Date().toISOString().split('T')[0];\r\n            \r\n            // Download vendors CSV\r\n            this.downloadCSV(vendorCSV, `vendors-${date}.csv`);\r\n            setTimeout(() => {\r\n                // Download transactions CSV\r\n                this.downloadCSV(transactionCSV, `transactions-${date}.csv`);\r\n                setTimeout(() => {\r\n                    // Download projects CSV\r\n                    this.downloadCSV(projectCSV, `projects-${date}.csv`);\r\n                }, 500);\r\n            }, 500);\r\n\r\n            showToast('Data exported successfully as CSV files', 'success');\r\n        } catch (error) {\r\n            console.error('Export error:', error);\r\n            showToast('Failed to export data', 'error');\r\n        }\r\n    }\r\n\r\n    downloadCSV(csvContent, filename) {\r\n        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n        const link = document.createElement('a');\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = filename;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    }\r\n\r\n\r\n}\r\n\r\n// Initialize app when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    window.app = new App();\r\n});\r\n\r\n\r\n// Global modal functions\r\nwindow.closeModal = () => {\r\n    const overlay = document.getElementById('modal-overlay');\r\n    overlay.classList.remove('show');\r\n    setTimeout(() => {\r\n        overlay.style.display = 'none';\r\n    }, 200);\r\n};\r\n\r\nwindow.showModal = (modalId) => {\r\n    const overlay = document.getElementById('modal-overlay');\r\n    const modals = overlay.querySelectorAll('.modal');\r\n    \r\n    // Hide all modals\r\n    modals.forEach(modal => modal.style.display = 'none');\r\n    \r\n    // Show target modal\r\n    document.getElementById(modalId).style.display = 'block';\r\n    overlay.style.display = 'flex';\r\n    \r\n    setTimeout(() => {\r\n        overlay.classList.add('show');\r\n    }, 10);\r\n};\r\n","size_bytes":9137},"js/projects.js":{"content":"// Project management functionality\nimport { showToast, formatCurrency, formatDate } from './utils.js';\n\nexport class ProjectManager {\n    constructor(storage) {\n        this.storage = storage;\n        this.currentProject = null;\n        this.init();\n    }\n\n    init() {\n        this.setupEventListeners();\n        this.setupModal();\n    }\n\n    setupEventListeners() {\n        // Add project button\n        document.getElementById('add-project-btn').addEventListener('click', () => {\n            this.showProjectModal();\n        });\n\n        // Search functionality\n        document.getElementById('project-search').addEventListener('input', () => {\n            this.filterProjects();\n        });\n\n        // Filter functionality\n        document.getElementById('project-status-filter').addEventListener('change', () => {\n            this.filterProjects();\n        });\n    }\n\n    setupModal() {\n        this.createProjectModal();\n    }\n\n    createProjectModal() {\n        const existingModal = document.getElementById('project-modal');\n        if (existingModal) return;\n\n        const modalHTML = `\n            <div class=\"modal\" id=\"project-modal\">\n                <div class=\"modal-header\">\n                    <h3 id=\"project-modal-title\">Add Project</h3>\n                    <button class=\"btn-close\" onclick=\"closeModal()\">&times;</button>\n                </div>\n                <form id=\"project-form\" class=\"modal-body\">\n                    <div class=\"form-group\">\n                        <label for=\"project-name\">Project Name *</label>\n                        <input type=\"text\" id=\"project-name\" required>\n                    </div>\n                    \n                    <div class=\"form-row\">\n                        <div class=\"form-group\">\n                            <label for=\"project-type\">Type</label>\n                            <select id=\"project-type\">\n                                <option value=\"\">Select Type</option>\n                                <option value=\"residential\">Residential</option>\n                                <option value=\"commercial\">Commercial</option>\n                                <option value=\"renovation\">Renovation</option>\n                                <option value=\"infrastructure\">Infrastructure</option>\n                                <option value=\"maintenance\">Maintenance</option>\n                            </select>\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"project-status\">Status</label>\n                            <select id=\"project-status\">\n                                <option value=\"planning\">Planning</option>\n                                <option value=\"active\">Active</option>\n                                <option value=\"on-hold\">On Hold</option>\n                                <option value=\"completed\">Completed</option>\n                            </select>\n                        </div>\n                    </div>\n                    \n                    <div class=\"form-group\" style=\"display: none;\">\n                        <label for=\"project-location\">Location</label>\n                        <input type=\"text\" id=\"project-location\">\n                    </div>\n                    \n                    <div class=\"form-row\">\n                        <div class=\"form-group\">\n                            <label for=\"project-start-date\">Start Date</label>\n                            <input type=\"date\" id=\"project-start-date\">\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"project-end-date\">End Date</label>\n                            <input type=\"date\" id=\"project-end-date\">\n                        </div>\n                    </div>\n                    \n                    <div class=\"form-row\">\n                        <div class=\"form-group\">\n                            <label for=\"project-budget\">Budget</label>\n                            <input type=\"number\" id=\"project-budget\" step=\"0.01\" min=\"0\">\n                        </div>\n                        \n                        <div class=\"form-group\" style=\"display: none;\">\n                            <label for=\"project-progress\">Progress (%)</label>\n                            <input type=\"number\" id=\"project-progress\" min=\"0\" max=\"100\" value=\"0\">\n                        </div>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"project-client\">Client</label>\n                        <input type=\"text\" id=\"project-client\">\n                    </div>\n                    \n                    <div class=\"form-row\">\n                        <div class=\"form-group\">\n                            <label for=\"project-client-contact\">Client Contact</label>\n                            <input type=\"text\" id=\"project-client-contact\">\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"project-client-phone\">Client Phone</label>\n                            <input type=\"tel\" id=\"project-client-phone\">\n                        </div>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"project-description\">Description</label>\n                        <textarea id=\"project-description\" rows=\"3\"></textarea>\n                    </div>\n                    \n                    <div class=\"form-group\" style=\"display: none;\">\n                        <label for=\"project-notes\">Notes</label>\n                        <textarea id=\"project-notes\" rows=\"2\"></textarea>\n                    </div>\n                    \n                    <div class=\"modal-actions\">\n                        <button type=\"button\" class=\"btn btn-secondary\" onclick=\"closeModal()\">Cancel</button>\n                        <button type=\"submit\" class=\"btn btn-primary\">Save Project</button>\n                    </div>\n                </form>\n            </div>\n        `;\n\n        document.getElementById('modal-overlay').insertAdjacentHTML('beforeend', modalHTML);\n\n        // Setup form submission\n        document.getElementById('project-form').addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.saveProject();\n        });\n    }\n\n    loadProjects() {\n        this.renderProjectsGrid();\n    }\n\n    renderProjectsGrid() {\n        const projects = this.getFilteredProjects();\n        const grid = document.getElementById('projects-grid');\n        \n        if (projects.length === 0) {\n            grid.innerHTML = `\n                <div class=\"empty-state\">\n                    <i class=\"fas fa-hammer\"></i>\n                    <h3>No Projects Found</h3>\n                    <p>Add your first project to get started</p>\n                </div>\n            `;\n            return;\n        }\n\n        grid.innerHTML = projects.map(project => {\n            const transactions = this.storage.getTransactionsByProject(project.id);\n            const totalSpent = transactions\n                .filter(t => t.type === 'expense')\n                .reduce((sum, t) => sum + t.amount, 0);\n            const totalIncome = transactions\n                .filter(t => t.type === 'income')\n                .reduce((sum, t) => sum + t.amount, 0);\n\n            return `\n                <div class=\"project-card\" data-project-id=\"${project.id}\">\n                    <div class=\"project-header\">\n                        <h3>${project.name}</h3>\n                        <span class=\"status-badge ${project.status}\">${project.status}</span>\n                    </div>\n                    \n                    <div class=\"project-meta\">\n                        ${project.type ? `\n                            <div class=\"project-meta-item\">\n                                <i class=\"fas fa-tag\"></i>\n                                <span>${project.type}</span>\n                            </div>\n                        ` : ''}\n                        \n                        ${project.location ? `\n                            <div class=\"project-meta-item\">\n                                <i class=\"fas fa-map-marker-alt\"></i>\n                                <span>${project.location}</span>\n                            </div>\n                        ` : ''}\n                        \n                        ${project.client ? `\n                            <div class=\"project-meta-item\">\n                                <i class=\"fas fa-user\"></i>\n                                <span>${project.client}</span>\n                            </div>\n                        ` : ''}\n                        \n                        ${project.startDate ? `\n                            <div class=\"project-meta-item\">\n                                <i class=\"fas fa-calendar-start\"></i>\n                                <span>Start: ${formatDate(project.startDate)}</span>\n                            </div>\n                        ` : ''}\n                        \n                        ${project.endDate ? `\n                            <div class=\"project-meta-item\">\n                                <i class=\"fas fa-calendar-end\"></i>\n                                <span>End: ${formatDate(project.endDate)}</span>\n                            </div>\n                        ` : ''}\n                    </div>\n                    \n                    <div class=\"project-progress\" style=\"display: none;\">\n                        <div class=\"project-progress-label\">\n                            <span>Progress</span>\n                            <span>${project.progress || 0}%</span>\n                        </div>\n                        <div class=\"progress-bar\">\n                            <div class=\"progress-fill\" style=\"width: ${project.progress || 0}%\"></div>\n                        </div>\n                    </div>\n                    \n                    <div class=\"project-financials\">\n                        <div class=\"financial-item\">\n                            <span class=\"financial-label\">Budget:</span>\n                            <span class=\"financial-value\">${project.budget ? formatCurrency(project.budget) : 'N/A'}</span>\n                        </div>\n                        <div class=\"financial-item\">\n                            <span class=\"financial-label\">Spent:</span>\n                            <span class=\"financial-value text-danger\">${formatCurrency(totalSpent)}</span>\n                        </div>\n                        <div class=\"financial-item\">\n                            <span class=\"financial-label\">Income:</span>\n                            <span class=\"financial-value text-success\">${formatCurrency(totalIncome)}</span>\n                        </div>\n                        ${project.budget ? `\n                            <div class=\"financial-item\">\n                                <span class=\"financial-label\">Remaining:</span>\n                                <span class=\"financial-value ${project.budget - totalSpent >= 0 ? 'text-success' : 'text-danger'}\">\n                                    ${formatCurrency(project.budget - totalSpent)}\n                                </span>\n                            </div>\n                        ` : ''}\n                    </div>\n                    \n                    ${project.description ? `\n                        <div class=\"project-description\">\n                            <p>${project.description}</p>\n                        </div>\n                    ` : ''}\n                    \n                    <div class=\"project-actions\">\n                        <button class=\"btn btn-sm btn-secondary\" onclick=\"projectManager.viewProject('${project.id}')\">\n                            <i class=\"fas fa-eye\"></i> View\n                        </button>\n                        <button class=\"btn btn-sm btn-primary\" onclick=\"projectManager.editProject('${project.id}')\">\n                            <i class=\"fas fa-edit\"></i> Edit\n                        </button>\n                        <button class=\"btn btn-sm btn-danger\" onclick=\"projectManager.deleteProject('${project.id}')\">\n                            <i class=\"fas fa-trash\"></i> Delete\n                        </button>\n                    </div>\n                </div>\n            `;\n        }).join('');\n\n        // Make projectManager globally available\n        window.projectManager = this;\n    }\n\n    getFilteredProjects() {\n        let projects = this.storage.getProjects();\n        \n        // Apply search filter\n        const searchTerm = document.getElementById('project-search').value.toLowerCase();\n        if (searchTerm) {\n            projects = projects.filter(project =>\n                project.name.toLowerCase().includes(searchTerm) ||\n                project.description.toLowerCase().includes(searchTerm) ||\n                project.location.toLowerCase().includes(searchTerm) ||\n                project.client.toLowerCase().includes(searchTerm)\n            );\n        }\n\n        // Apply status filter\n        const statusFilter = document.getElementById('project-status-filter').value;\n        if (statusFilter) {\n            projects = projects.filter(project => project.status === statusFilter);\n        }\n\n        // Sort by creation date (newest first)\n        projects.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n\n        return projects;\n    }\n\n    filterProjects() {\n        this.renderProjectsGrid();\n    }\n\n    showProjectModal(project = null) {\n        // Check authentication\n        if (!this.storage.requireAuth()) {\n            showToast('Please login to manage projects', 'warning');\n            return;\n        }\n        this.currentProject = project;\n        const title = project ? 'Edit Project' : 'Add Project';\n        \n        document.getElementById('project-modal-title').textContent = title;\n        \n        // Reset form\n        document.getElementById('project-form').reset();\n        \n        // Populate form if editing\n        if (project) {\n            document.getElementById('project-name').value = project.name || '';\n            document.getElementById('project-type').value = project.type || '';\n            document.getElementById('project-status').value = project.status || 'planning';\n            document.getElementById('project-location').value = project.location || '';\n            document.getElementById('project-start-date').value = project.startDate || '';\n            document.getElementById('project-end-date').value = project.endDate || '';\n            document.getElementById('project-budget').value = project.budget || '';\n            document.getElementById('project-progress').value = project.progress || 0;\n            document.getElementById('project-client').value = project.client || '';\n            document.getElementById('project-client-contact').value = project.clientContact || '';\n            document.getElementById('project-client-phone').value = project.clientPhone || '';\n            document.getElementById('project-description').value = project.description || '';\n            document.getElementById('project-notes').value = project.notes || '';\n        }\n        \n        window.showModal('project-modal');\n    }\n\n    saveProject() {\n        const projectData = {\n            name: document.getElementById('project-name').value.trim(),\n            type: document.getElementById('project-type').value,\n            status: document.getElementById('project-status').value,\n            location: document.getElementById('project-location').value.trim(),\n            startDate: document.getElementById('project-start-date').value,\n            endDate: document.getElementById('project-end-date').value,\n            budget: parseFloat(document.getElementById('project-budget').value) || null,\n            progress: parseInt(document.getElementById('project-progress').value) || 0,\n            client: document.getElementById('project-client').value.trim(),\n            clientContact: document.getElementById('project-client-contact').value.trim(),\n            clientPhone: document.getElementById('project-client-phone').value.trim(),\n            description: document.getElementById('project-description').value.trim(),\n            notes: document.getElementById('project-notes').value.trim()\n        };\n\n        // Validate required fields\n        if (!projectData.name) {\n            showToast('Please enter a project name', 'error');\n            return;\n        }\n\n        // Validate date range\n        if (projectData.startDate && projectData.endDate && projectData.startDate > projectData.endDate) {\n            showToast('End date must be after start date', 'error');\n            return;\n        }\n\n        // Validate progress\n        if (projectData.progress < 0 || projectData.progress > 100) {\n            showToast('Progress must be between 0 and 100', 'error');\n            return;\n        }\n\n        try {\n            let result;\n            if (this.currentProject) {\n                result = this.storage.updateProject(this.currentProject.id, projectData);\n                showToast('Project updated successfully', 'success');\n            } else {\n                result = this.storage.addProject(projectData);\n                showToast('Project added successfully', 'success');\n            }\n\n            if (result) {\n                window.closeModal();\n                this.renderProjectsGrid();\n                \n                // Refresh analytics if on dashboard\n                if (window.app && window.app.analytics) {\n                    window.app.analytics.loadDashboard();\n                }\n            } else {\n                showToast('Failed to save project', 'error');\n            }\n        } catch (error) {\n            console.error('Error saving project:', error);\n            showToast('Failed to save project', 'error');\n        }\n    }\n\n    viewProject(projectId) {\n        const project = this.storage.getProjectById(projectId);\n        if (!project) {\n            showToast('Project not found', 'error');\n            return;\n        }\n\n        const transactions = this.storage.getTransactionsByProject(projectId);\n        const totalSpent = transactions\n            .filter(t => t.type === 'expense')\n            .reduce((sum, t) => sum + t.amount, 0);\n        const totalIncome = transactions\n            .filter(t => t.type === 'income')\n            .reduce((sum, t) => sum + t.amount, 0);\n\n        const modalContent = `\n            <div class=\"project-details\">\n                <div class=\"project-header\">\n                    <h3>${project.name}</h3>\n                    <span class=\"status-badge ${project.status}\">${project.status}</span>\n                </div>\n                \n                <div class=\"project-info-grid\">\n                    ${project.type ? `\n                        <div class=\"info-item\">\n                            <label>Type:</label>\n                            <span>${project.type}</span>\n                        </div>\n                    ` : ''}\n                    \n                    ${project.location ? `\n                        <div class=\"info-item\">\n                            <label>Location:</label>\n                            <span>${project.location}</span>\n                        </div>\n                    ` : ''}\n                    \n                    ${project.client ? `\n                        <div class=\"info-item\">\n                            <label>Client:</label>\n                            <span>${project.client}</span>\n                        </div>\n                    ` : ''}\n                    \n                    ${project.clientContact ? `\n                        <div class=\"info-item\">\n                            <label>Client Contact:</label>\n                            <span>${project.clientContact}</span>\n                        </div>\n                    ` : ''}\n                    \n                    ${project.clientPhone ? `\n                        <div class=\"info-item\">\n                            <label>Client Phone:</label>\n                            <span>${project.clientPhone}</span>\n                        </div>\n                    ` : ''}\n                    \n                    ${project.startDate ? `\n                        <div class=\"info-item\">\n                            <label>Start Date:</label>\n                            <span>${formatDate(project.startDate)}</span>\n                        </div>\n                    ` : ''}\n                    \n                    ${project.endDate ? `\n                        <div class=\"info-item\">\n                            <label>End Date:</label>\n                            <span>${formatDate(project.endDate)}</span>\n                        </div>\n                    ` : ''}\n                    \n                    <div class=\"info-item\">\n                        <label>Progress:</label>\n                        <span>${project.progress || 0}%</span>\n                    </div>\n                    \n                    ${project.budget ? `\n                        <div class=\"info-item\">\n                            <label>Budget:</label>\n                            <span><strong>${formatCurrency(project.budget)}</strong></span>\n                        </div>\n                    ` : ''}\n                    \n                    <div class=\"info-item\">\n                        <label>Total Spent:</label>\n                        <span class=\"text-danger\"><strong>${formatCurrency(totalSpent)}</strong></span>\n                    </div>\n                    \n                    <div class=\"info-item\">\n                        <label>Total Income:</label>\n                        <span class=\"text-success\"><strong>${formatCurrency(totalIncome)}</strong></span>\n                    </div>\n                    \n                    ${project.budget ? `\n                        <div class=\"info-item\">\n                            <label>Remaining Budget:</label>\n                            <span class=\"${project.budget - totalSpent >= 0 ? 'text-success' : 'text-danger'}\">\n                                <strong>${formatCurrency(project.budget - totalSpent)}</strong>\n                            </span>\n                        </div>\n                    ` : ''}\n                    \n                    <div class=\"info-item\">\n                        <label>Transactions:</label>\n                        <span>${transactions.length} transactions</span>\n                    </div>\n                    \n                    <div class=\"info-item\">\n                        <label>Created:</label>\n                        <span>${formatDate(project.createdAt)}</span>\n                    </div>\n                </div>\n                \n                ${project.description ? `\n                    <div class=\"info-item\">\n                        <label>Description:</label>\n                        <p>${project.description}</p>\n                    </div>\n                ` : ''}\n                \n                ${project.notes ? `\n                    <div class=\"info-item\">\n                        <label>Notes:</label>\n                        <p>${project.notes}</p>\n                    </div>\n                ` : ''}\n                \n                <div class=\"project-actions\">\n                    <button class=\"btn btn-primary\" onclick=\"projectManager.editProject('${project.id}')\">\n                        <i class=\"fas fa-edit\"></i> Edit Project\n                    </button>\n                    <button class=\"btn btn-secondary\" onclick=\"closeModal()\">Close</button>\n                </div>\n            </div>\n        `;\n\n        this.showInfoModal('Project Details', modalContent);\n    }\n\n    editProject(projectId) {\n        const project = this.storage.getProjectById(projectId);\n        if (!project) {\n            showToast('Project not found', 'error');\n            return;\n        }\n        \n        this.showProjectModal(project);\n    }\n\n    deleteProject(projectId) {\n        const project = this.storage.getProjectById(projectId);\n        if (!project) {\n            showToast('Project not found', 'error');\n            return;\n        }\n\n        // Check if project has transactions\n        const transactions = this.storage.getTransactionsByProject(projectId);\n        \n        let confirmMessage = `Are you sure you want to delete \"${project.name}\"?`;\n        if (transactions.length > 0) {\n            confirmMessage += `\\n\\nThis project has ${transactions.length} transaction(s). Deleting the project will not affect existing transactions.`;\n        }\n\n        if (confirm(confirmMessage)) {\n            try {\n                this.storage.deleteProject(projectId);\n                showToast('Project deleted successfully', 'success');\n                this.renderProjectsGrid();\n                \n                // Refresh analytics if on dashboard\n                if (window.app && window.app.analytics) {\n                    window.app.analytics.loadDashboard();\n                }\n            } catch (error) {\n                console.error('Error deleting project:', error);\n                showToast('Failed to delete project', 'error');\n            }\n        }\n    }\n\n    showInfoModal(title, content) {\n        // Create or update info modal\n        let modal = document.getElementById('info-modal');\n        if (!modal) {\n            modal = document.createElement('div');\n            modal.id = 'info-modal';\n            modal.className = 'modal';\n            modal.innerHTML = `\n                <div class=\"modal-header\">\n                    <h3 id=\"info-modal-title\"></h3>\n                    <button class=\"btn-close\" onclick=\"closeModal()\">&times;</button>\n                </div>\n                <div class=\"modal-body\" id=\"info-modal-body\"></div>\n            `;\n            document.getElementById('modal-overlay').appendChild(modal);\n        }\n\n        document.getElementById('info-modal-title').textContent = title;\n        document.getElementById('info-modal-body').innerHTML = content;\n        \n        window.showModal('info-modal');\n    }\n\n    // Update project progress\n    updateProjectProgress(projectId, progress) {\n        const project = this.storage.getProjectById(projectId);\n        if (!project) {\n            showToast('Project not found', 'error');\n            return;\n        }\n\n        if (progress < 0 || progress > 100) {\n            showToast('Progress must be between 0 and 100', 'error');\n            return;\n        }\n\n        try {\n            this.storage.updateProject(projectId, { progress });\n            this.renderProjectsGrid();\n            showToast('Project progress updated', 'success');\n        } catch (error) {\n            console.error('Error updating project progress:', error);\n            showToast('Failed to update progress', 'error');\n        }\n    }\n}\n","size_bytes":27024},"js/settings.js":{"content":"// Settings and customization functionality\r\nimport { showToast, formatCurrency } from './utils.js';\r\n\r\nexport class SettingsManager {\r\n    constructor(storage) {\r\n        this.storage = storage;\r\n        this.defaultSettings = {\r\n            companyName: 'Your Business',\r\n            businessType: 'construction',\r\n\r\n\r\n            currency: 'INR',\r\n            language: 'en',\r\n            dateFormat: 'DD/MM/YYYY',\r\n            customCategories: {\r\n                vendor: [],\r\n                transaction: [],\r\n                project: []\r\n            },\r\n            contactsAccess: false,\r\n            theme: 'light'\r\n        };\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.loadSettings();\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    loadSettings() {\r\n        const settings = this.storage.getSettings();\r\n        if (!settings || Object.keys(settings).length === 0) {\r\n            this.storage.saveSettings(this.defaultSettings);\r\n            return this.defaultSettings;\r\n        }\r\n        return { ...this.defaultSettings, ...settings };\r\n    }\r\n\r\n    setupEventListeners() {\r\n        // Settings modal trigger\r\n        document.addEventListener('click', (e) => {\r\n            if (e.target.id === 'settings-btn' || e.target.closest('#settings-btn')) {\r\n                this.showSettingsModal();\r\n            }\r\n        });\r\n    }\r\n\r\n    showSettingsModal() {\r\n        const settings = this.loadSettings();\r\n        \r\n        const modalHTML = `\r\n            <div class=\"modal settings-modal\" id=\"settings-modal\">\r\n                <div class=\"modal-header\">\r\n                    <h3>Business Settings</h3>\r\n                    <button class=\"btn-close\" onclick=\"closeModal()\">&times;</button>\r\n                </div>\r\n                <div class=\"modal-body settings-content\">\r\n                    <div class=\"settings-tabs\">\r\n                        <button class=\"tab-btn active\" data-tab=\"general\">General</button>\r\n\r\n                        <button class=\"tab-btn\" data-tab=\"categories\">Categories</button>\r\n                        <button class=\"tab-btn\" data-tab=\"advanced\">Advanced</button>\r\n                    </div>\r\n\r\n                    <form id=\"settings-form\">\r\n                        <!-- General Settings -->\r\n                        <div class=\"tab-content active\" id=\"general-tab\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"company-name\">Company/Business Name *</label>\r\n                                <input type=\"text\" id=\"company-name\" value=\"${settings.companyName}\" required>\r\n                            </div>\r\n                            \r\n                            <div class=\"form-group\">\r\n                                <label for=\"business-type\">Business Type</label>\r\n                                <select id=\"business-type\">\r\n                                    <option value=\"construction\" ${settings.businessType === 'construction' ? 'selected' : ''}>Construction</option>\r\n                                    <option value=\"retail\" ${settings.businessType === 'retail' ? 'selected' : ''}>Retail/Shop</option>\r\n                                    <option value=\"manufacturing\" ${settings.businessType === 'manufacturing' ? 'selected' : ''}>Manufacturing</option>\r\n                                    <option value=\"services\" ${settings.businessType === 'services' ? 'selected' : ''}>Services</option>\r\n                                    <option value=\"restaurant\" ${settings.businessType === 'restaurant' ? 'selected' : ''}>Restaurant/Food</option>\r\n                                    <option value=\"automotive\" ${settings.businessType === 'automotive' ? 'selected' : ''}>Automotive</option>\r\n                                    <option value=\"healthcare\" ${settings.businessType === 'healthcare' ? 'selected' : ''}>Healthcare</option>\r\n                                    <option value=\"education\" ${settings.businessType === 'education' ? 'selected' : ''}>Education</option>\r\n                                    <option value=\"other\" ${settings.businessType === 'other' ? 'selected' : ''}>Other</option>\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"currency-select\">Currency</label>\r\n                                <select id=\"currency-select\">\r\n                                    <option value=\"INR\" ${settings.currency === 'INR' ? 'selected' : ''}>Indian Rupee (‚Çπ)</option>\r\n                                    <option value=\"USD\" ${settings.currency === 'USD' ? 'selected' : ''}>US Dollar ($)</option>\r\n                                    <option value=\"EUR\" ${settings.currency === 'EUR' ? 'selected' : ''}>Euro (‚Ç¨)</option>\r\n                                    <option value=\"GBP\" ${settings.currency === 'GBP' ? 'selected' : ''}>British Pound (¬£)</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                        <!-- Categories Settings -->\r\n                        <div class=\"tab-content\" id=\"categories-tab\">\r\n                            <div class=\"custom-categories\">\r\n                                <h4>Custom Vendor Categories</h4>\r\n                                <div class=\"category-manager\" data-type=\"vendor\">\r\n                                    <div class=\"add-category\">\r\n                                        <input type=\"text\" placeholder=\"Add custom vendor category\" id=\"new-vendor-category\">\r\n                                        <button type=\"button\" onclick=\"settingsManager.addCustomCategory('vendor')\">Add</button>\r\n                                    </div>\r\n                                    <div class=\"category-list\" id=\"vendor-categories\">\r\n                                        ${(settings.customCategories.vendor || []).map(cat => `\r\n                                            <div class=\"category-item\">\r\n                                                <span>${cat}</span>\r\n                                                <button type=\"button\" onclick=\"settingsManager.removeCustomCategory('vendor', '${cat}')\">&times;</button>\r\n                                            </div>\r\n                                        `).join('')}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <h4>Custom Transaction Categories</h4>\r\n                                <div class=\"category-manager\" data-type=\"transaction\">\r\n                                    <div class=\"add-category\">\r\n                                        <input type=\"text\" placeholder=\"Add custom transaction category\" id=\"new-transaction-category\">\r\n                                        <button type=\"button\" onclick=\"settingsManager.addCustomCategory('transaction')\">Add</button>\r\n                                    </div>\r\n                                    <div class=\"category-list\" id=\"transaction-categories\">\r\n                                        ${(settings.customCategories.transaction || []).map(cat => `\r\n                                            <div class=\"category-item\">\r\n                                                <span>${cat}</span>\r\n                                                <button type=\"button\" onclick=\"settingsManager.removeCustomCategory('transaction', '${cat}')\">&times;</button>\r\n                                            </div>\r\n                                        `).join('')}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Advanced Settings -->\r\n                        <div class=\"tab-content\" id=\"advanced-tab\">\r\n                            <div class=\"form-group\">\r\n                                <label>\r\n                                    <input type=\"checkbox\" id=\"contacts-access\" ${settings.contactsAccess ? 'checked' : ''}>\r\n                                    Enable Contact List Access\r\n                                </label>\r\n                                <small>Allow importing contacts from device for vendors and clients</small>\r\n                            </div>\r\n                            \r\n                            <div class=\"form-group\">\r\n                                <label for=\"date-format\">Date Format</label>\r\n                                <select id=\"date-format\">\r\n                                    <option value=\"DD/MM/YYYY\" ${settings.dateFormat === 'DD/MM/YYYY' ? 'selected' : ''}>DD/MM/YYYY</option>\r\n                                    <option value=\"MM/DD/YYYY\" ${settings.dateFormat === 'MM/DD/YYYY' ? 'selected' : ''}>MM/DD/YYYY</option>\r\n                                    <option value=\"YYYY-MM-DD\" ${settings.dateFormat === 'YYYY-MM-DD' ? 'selected' : ''}>YYYY-MM-DD</option>\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <button type=\"button\" class=\"btn btn-secondary\" onclick=\"settingsManager.resetToDefaults()\">Reset to Defaults</button>\r\n                                <button type=\"button\" class=\"btn btn-secondary\" onclick=\"settingsManager.clearCache()\">Clear Cache</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"modal-actions\">\r\n                            <button type=\"button\" class=\"btn btn-secondary\" onclick=\"closeModal()\">Cancel</button>\r\n                            <button type=\"submit\" class=\"btn btn-primary\">Save Settings</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        // Remove existing modal if any\r\n        const existingModal = document.getElementById('settings-modal');\r\n        if (existingModal) {\r\n            existingModal.remove();\r\n        }\r\n\r\n        document.getElementById('modal-overlay').insertAdjacentHTML('beforeend', modalHTML);\r\n        \r\n        this.setupSettingsEventListeners();\r\n        window.showModal('settings-modal');\r\n        window.settingsManager = this;\r\n    }\r\n\r\n    setupSettingsEventListeners() {\r\n        // Tab switching\r\n        document.querySelectorAll('.tab-btn').forEach(btn => {\r\n            btn.addEventListener('click', (e) => {\r\n                const tabName = e.target.dataset.tab;\r\n                this.switchTab(tabName);\r\n            });\r\n        });\r\n\r\n\r\n        // Form submission\r\n        document.getElementById('settings-form').addEventListener('submit', (e) => {\r\n            e.preventDefault();\r\n            this.saveSettings();\r\n        });\r\n    }\r\n\r\n    switchTab(tabName) {\r\n        // Update tab buttons\r\n        document.querySelectorAll('.tab-btn').forEach(btn => {\r\n            btn.classList.remove('active');\r\n        });\r\n        document.querySelector(`[data-tab=\"${tabName}\"]`).classList.add('active');\r\n\r\n        // Update tab content\r\n        document.querySelectorAll('.tab-content').forEach(content => {\r\n            content.classList.remove('active');\r\n        });\r\n        document.getElementById(`${tabName}-tab`).classList.add('active');\r\n    }\r\n\r\n\r\n\n    addCustomCategory(type) {\n        const input = document.getElementById(`new-${type}-category`);\n        const category = input.value.trim();\n        \n        if (!category) {\n            showToast('Please enter a category name', 'warning');\n            return;\n        }\n\n        const settings = this.loadSettings();\n        if (!settings.customCategories[type]) {\n            settings.customCategories[type] = [];\n        }\n\n        if (settings.customCategories[type].includes(category)) {\n            showToast('Category already exists', 'warning');\n            return;\n        }\n\n        settings.customCategories[type].push(category);\n        this.storage.saveSettings(settings);\n        \n        // Update display\n        const categoryList = document.getElementById(`${type}-categories`);\n        const categoryItem = document.createElement('div');\n        categoryItem.className = 'category-item';\n        categoryItem.innerHTML = `\n            <span>${category}</span>\n            <button type=\"button\" onclick=\"settingsManager.removeCustomCategory('${type}', '${category}')\">&times;</button>\n        `;\n        categoryList.appendChild(categoryItem);\n        \n        input.value = '';\n        showToast('Category added successfully', 'success');\n    }\n\n    removeCustomCategory(type, category) {\n        const settings = this.loadSettings();\n        if (settings.customCategories[type]) {\n            settings.customCategories[type] = settings.customCategories[type].filter(cat => cat !== category);\n            this.storage.saveSettings(settings);\n            \n            // Remove from display\n            const categoryItems = document.querySelectorAll(`#${type}-categories .category-item`);\n            categoryItems.forEach(item => {\n                if (item.querySelector('span').textContent === category) {\n                    item.remove();\n                }\n            });\n            \n            showToast('Category removed successfully', 'success');\n        }\n    }\n\n    saveSettings() {\n        const settings = {\n            companyName: document.getElementById('company-name').value,\n            businessType: document.getElementById('business-type').value,\n            currency: document.getElementById('currency-select').value,\n            dateFormat: document.getElementById('date-format').value,\n            contactsAccess: document.getElementById('contacts-access').checked,\n            customCategories: this.loadSettings().customCategories,\n            theme: 'light'\n        };\n\n        try {\n            this.storage.saveSettings(settings);\n            this.applySettings(settings);\n            \n            showToast('Settings saved successfully', 'success');\n            \n            // Close modal\n            window.closeModal();\n            \n            // Refresh all data displays\n            setTimeout(() => {\n                window.location.reload();\n            }, 500);\n            \n        } catch (error) {\n            console.error('Error saving settings:', error);\n            showToast('Error saving settings', 'error');\n        }\n    }\n\n    applySettings(settings) {\n        // Update company name in header\n        const companyNameElements = document.querySelectorAll('.company-name, .logo-text span');\n        companyNameElements.forEach(el => {\n            el.textContent = settings.companyName;\n        });\n    }\n\n    resetToDefaults() {\n        if (confirm('Are you sure you want to reset all settings to defaults? This action cannot be undone.')) {\n            this.storage.saveSettings(this.defaultSettings);\n            this.applySettings(this.defaultSettings);\n            showToast('Settings reset to defaults', 'success');\n            \n            // Refresh the page to show changes\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n        }\n    }\n\n    clearCache() {\n        if (confirm('Are you sure you want to clear all cached data? This will remove all offline data.')) {\n            localStorage.clear();\n            showToast('Cache cleared successfully', 'success');\n            \n            // Reload to fresh state\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n        }\n    }\n}\n","size_bytes":15576},"js/storage.js":{"content":"// Local storage management for offline functionality\r\nexport class StorageManager {\r\n    constructor() {\r\n        this.keys = {\r\n            vendors: 'business_management_vendors',\r\n            transactions: 'business_management_transactions',\r\n            projects: 'business_management_projects',\r\n            settings: 'business_management_settings'\r\n        };\r\n        this.initializeData();\r\n    }\r\n\r\n    initializeData() {\r\n        // Initialize with empty arrays if no data exists\r\n        if (!localStorage.getItem(this.keys.vendors)) {\r\n            this.saveVendors([]);\r\n        }\r\n        if (!localStorage.getItem(this.keys.transactions)) {\r\n            this.saveTransactions([]);\r\n        }\r\n        if (!localStorage.getItem(this.keys.projects)) {\r\n            this.saveProjects([]);\r\n        }\r\n        if (!localStorage.getItem(this.keys.settings)) {\r\n            this.saveSettings({\r\n                companyName: 'Your Business',\r\n                businessType: 'construction',\r\n                primaryColor: '#F59E0B',\r\n                currency: 'INR',\r\n                theme: 'light',\r\n                customCategories: {\r\n                    vendor: [],\r\n                    transaction: []\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Vendor operations\r\n    getVendors() {\r\n        try {\r\n            return JSON.parse(localStorage.getItem(this.keys.vendors)) || [];\r\n        } catch (error) {\r\n            console.error('Error loading vendors:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    saveVendors(vendors) {\r\n        try {\r\n            localStorage.setItem(this.keys.vendors, JSON.stringify(vendors));\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error saving vendors:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    addVendor(vendor) {\r\n        const vendors = this.getVendors();\r\n        vendor.id = this.generateId();\r\n        vendor.createdAt = new Date().toISOString();\r\n        vendor.updatedAt = new Date().toISOString();\r\n        vendor.totalSpent = 0;\r\n        vendor.status = vendor.status || 'active';\r\n        \r\n        vendors.push(vendor);\r\n        return this.saveVendors(vendors) ? vendor : null;\r\n    }\r\n\r\n    updateVendor(id, updatedVendor) {\r\n        const vendors = this.getVendors();\r\n        const index = vendors.findIndex(v => v.id === id);\r\n        \r\n        if (index !== -1) {\r\n            vendors[index] = { ...vendors[index], ...updatedVendor, updatedAt: new Date().toISOString() };\r\n            return this.saveVendors(vendors) ? vendors[index] : null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    deleteVendor(id) {\r\n        const vendors = this.getVendors();\r\n        const filteredVendors = vendors.filter(v => v.id !== id);\r\n        return this.saveVendors(filteredVendors);\r\n    }\r\n\r\n    getVendorById(id) {\r\n        const vendors = this.getVendors();\r\n        return vendors.find(v => v.id === id) || null;\r\n    }\r\n\r\n    // Transaction operations\r\n    getTransactions() {\r\n        try {\r\n            return JSON.parse(localStorage.getItem(this.keys.transactions)) || [];\r\n        } catch (error) {\r\n            console.error('Error loading transactions:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    saveTransactions(transactions) {\r\n        try {\r\n            localStorage.setItem(this.keys.transactions, JSON.stringify(transactions));\r\n            this.updateVendorTotals();\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error saving transactions:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    addTransaction(transaction) {\r\n        const transactions = this.getTransactions();\r\n        transaction.id = this.generateId();\r\n        transaction.createdAt = new Date().toISOString();\r\n        transaction.updatedAt = new Date().toISOString();\r\n        \r\n        transactions.push(transaction);\r\n        return this.saveTransactions(transactions) ? transaction : null;\r\n    }\r\n\r\n    updateTransaction(id, updatedTransaction) {\r\n        const transactions = this.getTransactions();\r\n        const index = transactions.findIndex(t => t.id === id);\r\n        \r\n        if (index !== -1) {\r\n            transactions[index] = { ...transactions[index], ...updatedTransaction, updatedAt: new Date().toISOString() };\r\n            return this.saveTransactions(transactions) ? transactions[index] : null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    deleteTransaction(id) {\r\n        const transactions = this.getTransactions();\r\n        const filteredTransactions = transactions.filter(t => t.id !== id);\r\n        return this.saveTransactions(filteredTransactions);\r\n    }\r\n\r\n    getTransactionById(id) {\r\n        const transactions = this.getTransactions();\r\n        return transactions.find(t => t.id === id) || null;\r\n    }\r\n\r\n    // Project operations\r\n    getProjects() {\r\n        try {\r\n            return JSON.parse(localStorage.getItem(this.keys.projects)) || [];\r\n        } catch (error) {\r\n            console.error('Error loading projects:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    saveProjects(projects) {\r\n        try {\r\n            localStorage.setItem(this.keys.projects, JSON.stringify(projects));\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error saving projects:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    addProject(project) {\r\n        const projects = this.getProjects();\r\n        project.id = this.generateId();\r\n        project.createdAt = new Date().toISOString();\r\n        project.updatedAt = new Date().toISOString();\r\n        project.progress = project.progress || 0;\r\n        project.status = project.status || 'planning';\r\n        \r\n        projects.push(project);\r\n        return this.saveProjects(projects) ? project : null;\r\n    }\r\n\r\n    updateProject(id, updatedProject) {\r\n        const projects = this.getProjects();\r\n        const index = projects.findIndex(p => p.id === id);\r\n        \r\n        if (index !== -1) {\r\n            projects[index] = { ...projects[index], ...updatedProject, updatedAt: new Date().toISOString() };\r\n            return this.saveProjects(projects) ? projects[index] : null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    deleteProject(id) {\r\n        const projects = this.getProjects();\r\n        const filteredProjects = projects.filter(p => p.id !== id);\r\n        return this.saveProjects(filteredProjects);\r\n    }\r\n\r\n    getProjectById(id) {\r\n        const projects = this.getProjects();\r\n        return projects.find(p => p.id === id) || null;\r\n    }\r\n\r\n\r\n\r\n    // Settings operations\r\n    getSettings() {\r\n        try {\r\n            return JSON.parse(localStorage.getItem(this.keys.settings)) || {};\r\n        } catch (error) {\r\n            console.error('Error loading settings:', error);\r\n            return {};\r\n        }\r\n    }\r\n\r\n    saveSettings(settings) {\r\n        try {\r\n            localStorage.setItem(this.keys.settings, JSON.stringify(settings));\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error saving settings:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Utility methods\r\n    generateId() {\r\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\r\n    }\r\n\r\n    updateVendorTotals() {\r\n        const vendors = this.getVendors();\r\n        const transactions = this.getTransactions();\r\n        \r\n        vendors.forEach(vendor => {\r\n            const vendorTransactions = transactions.filter(t => t.vendorId === vendor.id && t.type === 'expense');\r\n            vendor.totalSpent = vendorTransactions.reduce((total, t) => total + (t.amount || 0), 0);\r\n        });\r\n        \r\n        this.saveVendors(vendors);\r\n    }\r\n\r\n    // Data import/export\r\n    exportData() {\r\n        return {\r\n            vendors: this.getVendors(),\r\n            transactions: this.getTransactions(),\r\n            projects: this.getProjects(),\r\n            settings: this.getSettings(),\r\n            exportDate: new Date().toISOString()\r\n        };\r\n    }\r\n\r\n    importData(data) {\r\n        try {\r\n            if (data.vendors) this.saveVendors(data.vendors);\r\n            if (data.transactions) this.saveTransactions(data.transactions);\r\n            if (data.projects) this.saveProjects(data.projects);\r\n            if (data.settings) this.saveSettings(data.settings);\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error importing data:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Search and filter methods\r\n    searchVendors(query) {\r\n        const vendors = this.getVendors();\r\n        const lowerQuery = query.toLowerCase();\r\n        \r\n        return vendors.filter(vendor =>\r\n            vendor.name.toLowerCase().includes(lowerQuery) ||\r\n            vendor.category.toLowerCase().includes(lowerQuery) ||\r\n            vendor.contact.toLowerCase().includes(lowerQuery) ||\r\n            vendor.email.toLowerCase().includes(lowerQuery)\r\n        );\r\n    }\r\n\r\n    searchTransactions(query) {\r\n        const transactions = this.getTransactions();\r\n        const lowerQuery = query.toLowerCase();\r\n        \r\n        return transactions.filter(transaction =>\r\n            transaction.description.toLowerCase().includes(lowerQuery) ||\r\n            transaction.vendorName.toLowerCase().includes(lowerQuery) ||\r\n            transaction.projectName.toLowerCase().includes(lowerQuery)\r\n        );\r\n    }\r\n\r\n    searchProjects(query) {\r\n        const projects = this.getProjects();\r\n        const lowerQuery = query.toLowerCase();\r\n        \r\n        return projects.filter(project =>\r\n            project.name.toLowerCase().includes(lowerQuery) ||\r\n            project.description.toLowerCase().includes(lowerQuery) ||\r\n            project.location.toLowerCase().includes(lowerQuery)\r\n        );\r\n    }\r\n\r\n\r\n\r\n    // Analytics helpers\r\n    getTransactionsByDateRange(startDate, endDate) {\r\n        const transactions = this.getTransactions();\r\n        const start = new Date(startDate);\r\n        const end = new Date(endDate);\r\n        \r\n        return transactions.filter(transaction => {\r\n            const transactionDate = new Date(transaction.date);\r\n            return transactionDate >= start && transactionDate <= end;\r\n        });\r\n    }\r\n\r\n    getTransactionsByVendor(vendorId) {\r\n        const transactions = this.getTransactions();\r\n        return transactions.filter(transaction => transaction.vendorId === vendorId);\r\n    }\r\n\r\n    getTransactionsByProject(projectId) {\r\n        const transactions = this.getTransactions();\r\n        return transactions.filter(transaction => transaction.projectId === projectId);\r\n    }\r\n\r\n    getProjectsByStatus(status) {\r\n        const projects = this.getProjects();\r\n        return projects.filter(project => project.status === status);\r\n    }\r\n\r\n\r\n}\r\n","size_bytes":10857},"js/transactions.js":{"content":"// Transaction management functionality\nimport { showToast, formatCurrency, formatDate, formatDateWithTime, pickContact, isContactPickerSupported } from './utils.js';\n\nexport class TransactionManager {\n    constructor(storage) {\n        this.storage = storage;\n        this.currentTransaction = null;\n        this.sortColumn = 'date';\n        this.sortDirection = 'desc';\n        this.init();\n    }\n\n    init() {\n        this.setupEventListeners();\n        this.setupModal();\n    }\n\n    setupEventListeners() {\n        // Add transaction button\n        document.getElementById('add-transaction-btn').addEventListener('click', () => {\n            this.showTransactionModal();\n        });\n\n        // Quick add income button\n        document.getElementById('add-income-btn').addEventListener('click', () => {\n            this.showTransactionModal('income');\n        });\n\n        // Quick add expense button\n        document.getElementById('add-expense-btn').addEventListener('click', () => {\n            this.showTransactionModal('expense');\n        });\n\n        // Quick add credit button\n        document.getElementById('add-credit-btn').addEventListener('click', () => {\n            this.showTransactionModal('credit');\n        });\n\n        // Quick add partial button\n        document.getElementById('add-partial-btn').addEventListener('click', () => {\n            this.showTransactionModal('partial');\n        });\n\n        // Search functionality\n        document.getElementById('transaction-search').addEventListener('input', () => {\n            this.filterTransactions();\n        });\n\n        // Filter functionality\n        document.getElementById('transaction-type-filter').addEventListener('change', () => {\n            this.filterTransactions();\n        });\n\n        document.getElementById('transaction-vendor-filter').addEventListener('change', () => {\n            this.filterTransactions();\n        });\n\n        document.getElementById('transaction-project-filter').addEventListener('change', () => {\n            this.filterTransactions();\n        });\n\n        document.getElementById('transaction-date-from').addEventListener('change', () => {\n            this.filterTransactions();\n        });\n\n        document.getElementById('transaction-date-to').addEventListener('change', () => {\n            this.filterTransactions();\n        });\n\n        // New filter event listeners\n        document.getElementById('transaction-category-filter').addEventListener('change', () => {\n            this.filterTransactions();\n        });\n\n        document.getElementById('transaction-payment-filter').addEventListener('change', () => {\n            this.filterTransactions();\n        });\n\n        // Table sorting\n        document.querySelectorAll('#transactions-table th[data-sort]').forEach(th => {\n            th.addEventListener('click', (e) => {\n                const column = e.currentTarget.dataset.sort;\n                this.sortTransactions(column);\n            });\n        });\n    }\n\n    setupModal() {\n        // Create transaction modal if it doesn't exist\n        this.createTransactionModal();\n    }\n\n    createTransactionModal() {\n        const existingModal = document.getElementById('transaction-modal');\n        if (existingModal) return;\n\n        const modalHTML = `\n            <div class=\"modal\" id=\"transaction-modal\">\n                <div class=\"modal-header\">\n                    <h3 id=\"transaction-modal-title\">Add Transaction</h3>\n                    <button class=\"btn-close\" onclick=\"closeModal()\">&times;</button>\n                </div>\n                <form id=\"transaction-form\" class=\"modal-body\">\n                    <div class=\"form-row\">\n                        <div class=\"form-group\">\n                            <label for=\"transaction-type\">Type *</label>\n                            <select id=\"transaction-type\" required>\n                                <option value=\"\">Select Type</option>\n                                <option value=\"income\">You Got</option>\n                                <option value=\"expense\">You Give</option>\n                            </select>\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"transaction-date\">Date & Time *</label>\n                            <input type=\"datetime-local\" id=\"transaction-date\" required>\n                        </div>\n                    </div>\n                    \n                    <div class=\"form-row\">\n                        <div class=\"form-group\">\n                            <label for=\"transaction-vendor\">Vendor</label>\n                            <div class=\"input-with-quick-add\">\n                                <select id=\"transaction-vendor\">\n                                    <option value=\"\">Select Vendor</option>\n                                </select>\n                                <button type=\"button\" class=\"btn-quick-add\" id=\"quick-add-vendor\" title=\"Add New Vendor\">\n                                    <i class=\"fas fa-plus\"></i>\n                                </button>\n                            </div>\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"transaction-project\">Project</label>\n                            <div class=\"input-with-quick-add\">\n                                <select id=\"transaction-project\">\n                                    <option value=\"\">Select Project</option>\n                                </select>\n                                <button type=\"button\" class=\"btn-quick-add\" id=\"quick-add-project\" title=\"Add New Project\">\n                                    <i class=\"fas fa-plus\"></i>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div class=\"form-row\">\n                        <div class=\"form-group\">\n                            <label for=\"transaction-amount\">Amount *</label>\n                            <input type=\"number\" id=\"transaction-amount\" step=\"0.01\" min=\"0\" required>\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"transaction-category\">Category</label>\n                            <select id=\"transaction-category\">\n                                <option value=\"\">Select Category</option>\n                                <option value=\"materials\">Materials</option>\n                                <option value=\"labor\">Labor</option>\n                                <option value=\"equipment\">Equipment</option>\n                                <option value=\"transport\">Transport</option>\n                                <option value=\"utilities\">Utilities</option>\n                                <option value=\"permits\">Permits & Licenses</option>\n                                <option value=\"consultation\">Consultation</option>\n                                <option value=\"rental\">Rental</option>\n                                <option value=\"maintenance\">Maintenance</option>\n                                <option value=\"payment\">Client Payment</option>\n                                <option value=\"advance\">Advance Payment</option>\n                                <option value=\"other\">Other</option>\n                            </select>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label>Payment Method</label>\n                        <div class=\"radio-group\" id=\"transaction-payment-method\">\n                            <label class=\"radio-option\">\n                                <input type=\"radio\" name=\"payment-method\" value=\"cash\">\n                                <span class=\"radio-label\">Cash</span>\n                            </label>\n                            <label class=\"radio-option\">\n                                <input type=\"radio\" name=\"payment-method\" value=\"check\">\n                                <span class=\"radio-label\">Check</span>\n                            </label>\n                            <label class=\"radio-option\">\n                                <input type=\"radio\" name=\"payment-method\" value=\"upi\">\n                                <span class=\"radio-label\">UPI</span>\n                            </label>\n                            <label class=\"radio-option\">\n                                <input type=\"radio\" name=\"payment-method\" value=\"bank-transfer\">\n                                <span class=\"radio-label\">Bank Transfer</span>\n                            </label>\n                            <label class=\"radio-option\">\n                                <input type=\"radio\" name=\"payment-method\" value=\"card\">\n                                <span class=\"radio-label\">Card</span>\n                            </label>\n                            <label class=\"radio-option\">\n                                <input type=\"radio\" name=\"payment-method\" value=\"credit\">\n                                <span class=\"radio-label\">Credit (Pay Later)</span>\n                            </label>\n                        </div>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"transaction-payment-status\">Payment Status</label>\n                        <select id=\"transaction-payment-status\">\n                            <option value=\"paid\">Paid</option>\n                            <option value=\"credit\">Credit (Unpaid)</option>\n                            <option value=\"partial\">Partially Paid</option>\n                        </select>\n                    </div>\n                    \n                    <div class=\"form-group\" id=\"amount-paid-group\" style=\"display: none;\">\n                        <label for=\"transaction-amount-paid\">Amount Paid</label>\n                        <input type=\"number\" id=\"transaction-amount-paid\" step=\"0.01\" min=\"0\" placeholder=\"Enter amount already paid\">\n                    </div>\n                    \n                    <div class=\"form-group\" id=\"due-date-group\" style=\"display: none;\">\n                        <label for=\"transaction-due-date\">Due Date</label>\n                        <input type=\"date\" id=\"transaction-due-date\">\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"transaction-description\">Description</label>\n                        <textarea id=\"transaction-description\" rows=\"3\"></textarea>\n                    </div>\n                    \n                    <div class=\"form-group\" style=\"display: none;\">\n                        <label for=\"transaction-notes\">Notes</label>\n                        <textarea id=\"transaction-notes\" rows=\"2\"></textarea>\n                    </div>\n                    \n                    <div class=\"modal-actions\">\n                        <button type=\"button\" class=\"btn btn-secondary\" onclick=\"closeModal()\">Cancel</button>\n                        <button type=\"submit\" class=\"btn btn-primary\">Save Transaction</button>\n                    </div>\n                </form>\n            </div>\n        `;\n\n        document.getElementById('modal-overlay').insertAdjacentHTML('beforeend', modalHTML);\n\n        // Setup form submission\n        document.getElementById('transaction-form').addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.saveTransaction();\n        });\n\n        // Setup quick add buttons\n        document.getElementById('quick-add-vendor').addEventListener('click', () => {\n            this.showQuickAddVendorModal();\n        });\n\n        document.getElementById('quick-add-project').addEventListener('click', () => {\n            this.showQuickAddProjectModal();\n        });\n\n        // Set default date to today\n        document.getElementById('transaction-date').value = new Date().toISOString().split('T')[0];\n        \n        // Setup payment status change handler\n        document.getElementById('transaction-payment-status').addEventListener('change', (e) => {\n            this.handlePaymentStatusChange(e.target.value);\n        });\n    }\n\n    handlePaymentStatusChange(status) {\n        const amountPaidGroup = document.getElementById('amount-paid-group');\n        const dueDateGroup = document.getElementById('due-date-group');\n        \n        if (status === 'partial') {\n            amountPaidGroup.style.display = 'block';\n            dueDateGroup.style.display = 'block';\n        } else if (status === 'credit') {\n            amountPaidGroup.style.display = 'none';\n            dueDateGroup.style.display = 'block';\n        } else {\n            amountPaidGroup.style.display = 'none';\n            dueDateGroup.style.display = 'none';\n        }\n    }\n\n    showQuickAddVendorModal() {\n        const existingModal = document.getElementById('quick-vendor-modal');\n        if (existingModal) existingModal.remove();\n\n        const contactPickerSupported = isContactPickerSupported();\n        \n        const modalHTML = `\n            <div class=\"modal-overlay\" id=\"quick-vendor-modal\">\n                <div class=\"modal\">\n                    <div class=\"modal-header\">\n                        <h3>Quick Add Vendor</h3>\n                        <button class=\"btn-close\" onclick=\"this.parentElement.parentElement.parentElement.remove()\">&times;</button>\n                    </div>\n                <form id=\"quick-vendor-form\" class=\"modal-body\">\n                    <div class=\"form-group\">\n                        <label for=\"quick-vendor-name\">Vendor Name *</label>\n                        <div class=\"contact-picker-wrapper\">\n                            <input type=\"text\" id=\"quick-vendor-name\" required>\n                            ${contactPickerSupported ? `\n                                <button type=\"button\" class=\"btn-contact-picker\" id=\"vendor-contact-picker\">\n                                    <i class=\"fas fa-address-book\"></i>\n                                    Pick from Contacts\n                                </button>\n                            ` : ''}\n                        </div>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"quick-vendor-phone\">Phone Number</label>\n                        <input type=\"tel\" id=\"quick-vendor-phone\">\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"quick-vendor-category\">Category</label>\n                        <select id=\"quick-vendor-category\">\n                            <option value=\"\">Select Category</option>\n                            <option value=\"supplier\">Supplier</option>\n                            <option value=\"contractor\">Contractor</option>\n                            <option value=\"service-provider\">Service Provider</option>\n                            <option value=\"consultant\">Consultant</option>\n                            <option value=\"client\">Client</option>\n                            <option value=\"other\">Other</option>\n                        </select>\n                    </div>\n                    \n                    <div class=\"modal-actions\">\n                        <button type=\"button\" class=\"btn btn-secondary\" onclick=\"this.closest('.modal-overlay').remove()\">Cancel</button>\n                        <button type=\"submit\" class=\"btn btn-primary\">Add Vendor</button>\n                    </div>\n                    </form>\n                </div>\n            </div>\n        `;\n\n        document.body.insertAdjacentHTML('beforeend', modalHTML);\n        \n        // Show the modal with animation\n        setTimeout(() => {\n            document.getElementById('quick-vendor-modal').classList.add('show');\n        }, 10);\n\n        // Setup contact picker for vendor\n        if (contactPickerSupported) {\n            document.getElementById('vendor-contact-picker').addEventListener('click', async () => {\n                const contact = await pickContact();\n                if (contact) {\n                    document.getElementById('quick-vendor-name').value = contact.name;\n                    document.getElementById('quick-vendor-phone').value = contact.phone;\n                }\n            });\n        }\n\n        // Setup form submission\n        document.getElementById('quick-vendor-form').addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.saveQuickVendor();\n        });\n    }\n\n    showQuickAddProjectModal() {\n        const existingModal = document.getElementById('quick-project-modal');\n        if (existingModal) existingModal.remove();\n\n        const contactPickerSupported = isContactPickerSupported();\n        \n        const modalHTML = `\n            <div class=\"modal-overlay\" id=\"quick-project-modal\">\n                <div class=\"modal\">\n                    <div class=\"modal-header\">\n                        <h3>Quick Add Project</h3>\n                        <button class=\"btn-close\" onclick=\"this.parentElement.parentElement.parentElement.remove()\">&times;</button>\n                    </div>\n                <form id=\"quick-project-form\" class=\"modal-body\">\n                    <div class=\"form-group\">\n                        <label for=\"quick-project-name\">Project Name *</label>\n                        <input type=\"text\" id=\"quick-project-name\" required>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"quick-project-client\">Client Name</label>\n                        <div class=\"contact-picker-wrapper\">\n                            <input type=\"text\" id=\"quick-project-client\">\n                            ${contactPickerSupported ? `\n                                <button type=\"button\" class=\"btn-contact-picker\" id=\"project-contact-picker\">\n                                    <i class=\"fas fa-address-book\"></i>\n                                    Pick from Contacts\n                                </button>\n                            ` : ''}\n                        </div>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"quick-project-phone\">Client Phone</label>\n                        <input type=\"tel\" id=\"quick-project-phone\">\n                    </div>\n                    \n                    <div class=\"form-row\">\n                        <div class=\"form-group\">\n                            <label for=\"quick-project-type\">Project Type</label>\n                            <select id=\"quick-project-type\">\n                                <option value=\"\">Select Type</option>\n                                <option value=\"construction\">Construction</option>\n                                <option value=\"renovation\">Renovation</option>\n                                <option value=\"maintenance\">Maintenance</option>\n                                <option value=\"consultation\">Consultation</option>\n                                <option value=\"other\">Other</option>\n                            </select>\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"quick-project-budget\">Budget</label>\n                            <input type=\"number\" id=\"quick-project-budget\" step=\"0.01\" min=\"0\">\n                        </div>\n                    </div>\n                    \n                    <div class=\"modal-actions\">\n                        <button type=\"button\" class=\"btn btn-secondary\" onclick=\"this.closest('.modal-overlay').remove()\">Cancel</button>\n                        <button type=\"submit\" class=\"btn btn-primary\">Add Project</button>\n                    </div>\n                    </form>\n                </div>\n            </div>\n        `;\n\n        document.body.insertAdjacentHTML('beforeend', modalHTML);\n        \n        // Show the modal with animation\n        setTimeout(() => {\n            document.getElementById('quick-project-modal').classList.add('show');\n        }, 10);\n\n        // Setup contact picker for project client\n        if (contactPickerSupported) {\n            document.getElementById('project-contact-picker').addEventListener('click', async () => {\n                const contact = await pickContact();\n                if (contact) {\n                    document.getElementById('quick-project-client').value = contact.name;\n                    document.getElementById('quick-project-phone').value = contact.phone;\n                }\n            });\n        }\n\n        // Setup form submission\n        document.getElementById('quick-project-form').addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.saveQuickProject();\n        });\n    }\n\n    saveQuickVendor() {\n        const vendorData = {\n            name: document.getElementById('quick-vendor-name').value.trim(),\n            phone: document.getElementById('quick-vendor-phone').value.trim(),\n            category: document.getElementById('quick-vendor-category').value,\n            status: 'active',\n            email: '',\n            address: '',\n            notes: 'Added via quick add during transaction creation'\n        };\n\n        if (!vendorData.name) {\n            showToast('Please enter a vendor name', 'error');\n            return;\n        }\n\n        const savedVendor = this.storage.addVendor(vendorData);\n        if (savedVendor) {\n            showToast('Vendor added successfully', 'success');\n            \n            // Close modal\n            document.getElementById('quick-vendor-modal').remove();\n            \n            // Refresh vendor dropdown and select the new vendor\n            this.populateFilterDropdowns();\n            document.getElementById('transaction-vendor').value = savedVendor.id;\n        } else {\n            showToast('Failed to add vendor', 'error');\n        }\n    }\n\n    saveQuickProject() {\n        const projectData = {\n            name: document.getElementById('quick-project-name').value.trim(),\n            client: document.getElementById('quick-project-client').value.trim(),\n            clientPhone: document.getElementById('quick-project-phone').value.trim(),\n            type: document.getElementById('quick-project-type').value,\n            budget: parseFloat(document.getElementById('quick-project-budget').value) || null,\n            status: 'planning',\n            progress: 0,\n            location: '',\n            startDate: '',\n            endDate: '',\n            clientContact: '',\n            description: 'Created via quick add during transaction creation',\n            notes: ''\n        };\n\n        if (!projectData.name) {\n            showToast('Please enter a project name', 'error');\n            return;\n        }\n\n        const savedProject = this.storage.addProject(projectData);\n        if (savedProject) {\n            showToast('Project added successfully', 'success');\n            \n            // Close modal\n            document.getElementById('quick-project-modal').remove();\n            \n            // Refresh project dropdown and select the new project\n            this.populateFilterDropdowns();\n            document.getElementById('transaction-project').value = savedProject.id;\n        } else {\n            showToast('Failed to add project', 'error');\n        }\n    }\n\n    loadTransactions() {\n        this.populateFilterDropdowns();\n        this.renderTransactionsTable();\n    }\n\n    populateFilterDropdowns() {\n        // Populate vendor filter\n        const vendors = this.storage.getVendors();\n        const vendorFilter = document.getElementById('transaction-vendor-filter');\n        const vendorSelect = document.getElementById('transaction-vendor');\n        \n        [vendorFilter, vendorSelect].forEach(select => {\n            if (select) {\n                const currentValue = select.value;\n                select.innerHTML = select.id.includes('filter') ? \n                    '<option value=\"\">All Vendors</option>' : \n                    '<option value=\"\">Select Vendor</option>';\n                \n                vendors.forEach(vendor => {\n                    select.innerHTML += `<option value=\"${vendor.id}\">${vendor.name}</option>`;\n                });\n                \n                select.value = currentValue;\n            }\n        });\n\n        // Populate project filter\n        const projects = this.storage.getProjects();\n        const projectFilter = document.getElementById('transaction-project-filter');\n        const projectSelect = document.getElementById('transaction-project');\n        \n        [projectFilter, projectSelect].forEach(select => {\n            if (select) {\n                const currentValue = select.value;\n                select.innerHTML = select.id.includes('filter') ? \n                    '<option value=\"\">All Projects</option>' : \n                    '<option value=\"\">Select Project</option>';\n                \n                projects.forEach(project => {\n                    select.innerHTML += `<option value=\"${project.id}\">${project.name}</option>`;\n                });\n                \n                select.value = currentValue;\n            }\n        });\n    }\n\n    renderTransactionsTable() {\n        const transactions = this.getFilteredTransactions();\n        const tbody = document.getElementById('transactions-table-body');\n        \n        if (transactions.length === 0) {\n            tbody.innerHTML = `\n                <tr>\n                    <td colspan=\"9\" class=\"empty-state\">\n                        <div class=\"empty-state\">\n                            <i class=\"fas fa-receipt\"></i>\n                            <h3>No Transactions Found</h3>\n                            <p>Add your first transaction to get started</p>\n                        </div>\n                    </td>\n                </tr>\n            `;\n            return;\n        }\n\n        tbody.innerHTML = transactions.map(transaction => {\n            const vendor = this.storage.getVendorById(transaction.vendorId);\n            const project = this.storage.getProjectById(transaction.projectId);\n            const paymentStatus = transaction.paymentStatus || 'paid';\n            const outstandingAmount = transaction.outstandingAmount || 0;\n            \n            // Get payment status display and color\n            const getPaymentStatusDisplay = (status) => {\n                switch(status) {\n                    case 'paid': return '<span class=\"payment-status paid\"><i class=\"fas fa-check-circle\"></i> Paid</span>';\n                    case 'credit': return '<span class=\"payment-status credit\"><i class=\"fas fa-clock\"></i> Credit</span>';\n                    case 'partial': return '<span class=\"payment-status partial\"><i class=\"fas fa-hourglass-half\"></i> Partial</span>';\n                    default: return '<span class=\"payment-status paid\"><i class=\"fas fa-check-circle\"></i> Paid</span>';\n                }\n            };\n            \n            return `\n                <tr data-transaction-id=\"${transaction.id}\" class=\"${transaction.type === 'income' ? 'bg-success' : 'bg-danger'}\">\n                    <td>${formatDateWithTime(transaction.date)}</td>\n                    \n                    <td>${vendor ? vendor.name : 'N/A'}</td>\n                    <td>${project ? project.name : 'N/A'}</td>\n                    <td class=\"${transaction.type === 'income' ? 'text-success' : 'text-danger'}\">\n                        <strong>${formatCurrency(transaction.amount)}</strong> <br/>\n                        <p class=\"payment-status\">${getPaymentStatusDisplay(paymentStatus)}</p>\n                    </td>\n                    \n                    <td class=\"text-danger\">\n                        ${outstandingAmount > 0 ? `<strong>${formatCurrency(outstandingAmount)}</strong>` : '-'}\n                    </td>\n                    <td><span class=\"payment-method\">${transaction.paymentMethod || 'N/A'}</span></td>\n                    <td>\n                        <div class=\"transaction-desc\">\n                            ${transaction.description}\n                        </div>\n                    </td>\n                    <td>\n                        <div class=\"action-buttons\">\n                            ${outstandingAmount > 0 ? `\n                                <button class=\"action-btn pay\" onclick=\"transactionManager.markAsPaid('${transaction.id}')\" title=\"Mark as Paid\">\n                                    <i class=\"fas fa-dollar-sign\"></i>\n                                </button>\n                            ` : ''}\n                            <button class=\"action-btn view\" onclick=\"transactionManager.viewTransaction('${transaction.id}')\" title=\"View\">\n                                <i class=\"fas fa-eye\"></i>\n                            </button>\n                            <button class=\"action-btn edit\" onclick=\"transactionManager.editTransaction('${transaction.id}')\" title=\"Edit\">\n                                <i class=\"fas fa-edit\"></i>\n                            </button>\n                            <button class=\"action-btn delete\" onclick=\"transactionManager.deleteTransaction('${transaction.id}')\" title=\"Delete\">\n                                <i class=\"fas fa-trash\"></i>\n                            </button>\n                        </div>\n                    </td>\n                </tr>\n            `;\n        }).join('');\n\n        // Update transaction summary\n        this.updateTransactionSummary(transactions);\n\n        // Make transactionManager globally available\n        window.transactionManager = this;\n    }\n\n    getFilteredTransactions() {\n        let transactions = this.storage.getTransactions();\n        \n        // Apply search filter\n        const searchTerm = document.getElementById('transaction-search').value.toLowerCase();\n        if (searchTerm) {\n            transactions = transactions.filter(transaction => {\n                const vendor = this.storage.getVendorById(transaction.vendorId);\n                const project = this.storage.getProjectById(transaction.projectId);\n                \n                return transaction.description.toLowerCase().includes(searchTerm) ||\n                       (vendor && vendor.name.toLowerCase().includes(searchTerm)) ||\n                       (project && project.name.toLowerCase().includes(searchTerm)) ||\n                       (transaction.category && transaction.category.toLowerCase().includes(searchTerm)) ||\n                       (transaction.paymentMethod && transaction.paymentMethod.toLowerCase().includes(searchTerm));\n            });\n        }\n\n        // Apply type filter\n        const typeFilter = document.getElementById('transaction-type-filter').value;\n        if (typeFilter) {\n            transactions = transactions.filter(transaction => transaction.type === typeFilter);\n        }\n\n        // Apply vendor filter\n        const vendorFilter = document.getElementById('transaction-vendor-filter').value;\n        if (vendorFilter) {\n            transactions = transactions.filter(transaction => transaction.vendorId === vendorFilter);\n        }\n\n        // Apply project filter\n        const projectFilter = document.getElementById('transaction-project-filter').value;\n        if (projectFilter) {\n            transactions = transactions.filter(transaction => transaction.projectId === projectFilter);\n        }\n\n        // Apply date range filter\n        const dateFrom = document.getElementById('transaction-date-from').value;\n        const dateTo = document.getElementById('transaction-date-to').value;\n        \n        if (dateFrom) {\n            transactions = transactions.filter(transaction => transaction.date >= dateFrom);\n        }\n        \n        if (dateTo) {\n            transactions = transactions.filter(transaction => transaction.date <= dateTo);\n        }\n\n        // Apply category filter\n        const categoryFilter = document.getElementById('transaction-category-filter').value;\n        if (categoryFilter) {\n            transactions = transactions.filter(transaction => transaction.category === categoryFilter);\n        }\n\n        // Apply payment method filter\n        const paymentFilter = document.getElementById('transaction-payment-filter').value;\n        if (paymentFilter) {\n            transactions = transactions.filter(transaction => transaction.paymentMethod === paymentFilter);\n        }\n\n        // Apply sorting\n        transactions.sort((a, b) => {\n            let aValue = a[this.sortColumn];\n            let bValue = b[this.sortColumn];\n            \n            // Handle different data types\n            if (this.sortColumn === 'amount') {\n                aValue = parseFloat(aValue) || 0;\n                bValue = parseFloat(bValue) || 0;\n            } else if (this.sortColumn === 'date') {\n                aValue = new Date(aValue);\n                bValue = new Date(bValue);\n            } else if (this.sortColumn === 'vendor') {\n                const vendorA = this.storage.getVendorById(a.vendorId);\n                const vendorB = this.storage.getVendorById(b.vendorId);\n                aValue = vendorA ? vendorA.name.toLowerCase() : '';\n                bValue = vendorB ? vendorB.name.toLowerCase() : '';\n            } else if (this.sortColumn === 'project') {\n                const projectA = this.storage.getProjectById(a.projectId);\n                const projectB = this.storage.getProjectById(b.projectId);\n                aValue = projectA ? projectA.name.toLowerCase() : '';\n                bValue = projectB ? projectB.name.toLowerCase() : '';\n            } else {\n                aValue = String(aValue).toLowerCase();\n                bValue = String(bValue).toLowerCase();\n            }\n            \n            if (aValue < bValue) return this.sortDirection === 'asc' ? -1 : 1;\n            if (aValue > bValue) return this.sortDirection === 'asc' ? 1 : -1;\n            return 0;\n        });\n\n        return transactions;\n    }\n\n    sortTransactions(column) {\n        if (this.sortColumn === column) {\n            this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\n        } else {\n            this.sortColumn = column;\n            this.sortDirection = 'asc';\n        }\n\n        // Update sort indicators\n        document.querySelectorAll('#transactions-table th[data-sort] i').forEach(icon => {\n            icon.className = 'fas fa-sort';\n        });\n\n        const currentTh = document.querySelector(`#transactions-table th[data-sort=\"${column}\"] i`);\n        currentTh.className = `fas fa-sort-${this.sortDirection === 'asc' ? 'up' : 'down'}`;\n\n        this.renderTransactionsTable();\n    }\n\n    filterTransactions() {\n        this.renderTransactionsTable();\n    }\n\n    updateTransactionSummary(filteredTransactions) {\n        const allTransactions = this.storage.getTransactions();\n        \n        // Calculate totals for all transactions\n        const totalIncome = allTransactions\n            .filter(t => t.type === 'income')\n            .reduce((sum, t) => sum + parseFloat(t.amount || 0), 0);\n        \n        const totalExpense = allTransactions\n            .filter(t => t.type === 'expense')\n            .reduce((sum, t) => sum + parseFloat(t.amount || 0), 0);\n        \n        const netAmount = totalIncome - totalExpense;\n        \n        // Calculate filtered total\n        const filteredTotal = filteredTransactions\n            .reduce((sum, t) => {\n                const amount = parseFloat(t.amount || 0);\n                return t.type === 'income' ? sum + amount : sum - amount;\n            }, 0);\n        \n        // Calculate outstanding credit amounts\n        const outstandingTotal = allTransactions\n            .filter(t => t.paymentStatus === 'credit' || t.paymentStatus === 'partial')\n            .reduce((sum, t) => sum + parseFloat(t.outstandingAmount || 0), 0);\n        \n        // Update summary display\n        document.getElementById('total-income').textContent = formatCurrency(totalIncome);\n        document.getElementById('total-expense').textContent = formatCurrency(totalExpense);\n        document.getElementById('net-amount').textContent = formatCurrency(netAmount);\n        document.getElementById('net-amount').className = `summary-value ${netAmount >= 0 ? 'income' : 'expense'}`;\n        document.getElementById('filtered-total').textContent = formatCurrency(Math.abs(filteredTotal));\n        \n        // Update outstanding total if element exists\n        const outstandingElement = document.getElementById('outstanding-total');\n        if (outstandingElement) {\n            outstandingElement.textContent = formatCurrency(outstandingTotal);\n        }\n    }\n\n    showTransactionModal(transactionOrType = null) {\n        // Check authentication\n        if (!this.storage.requireAuth()) {\n            showToast('Please login to manage transactions', 'warning');\n            return;\n        }\n        \n        // Handle different parameter types\n        let transaction = null;\n        let presetType = null;\n        \n        if (typeof transactionOrType === 'string') {\n            // Parameter is a transaction type for quick add\n            presetType = transactionOrType;\n        } else if (transactionOrType && typeof transactionOrType === 'object') {\n            // Parameter is a transaction object for editing\n            transaction = transactionOrType;\n        }\n        \n        this.currentTransaction = transaction;\n        const title = transaction ? 'Edit Transaction' : 'Add Transaction';\n        \n        document.getElementById('transaction-modal-title').textContent = title;\n        \n        // Populate dropdowns\n        this.populateFilterDropdowns();\n        \n        // Reset form\n        document.getElementById('transaction-form').reset();\n        \n        // Set default date to today if adding new\n        if (!transaction) {\n            // Set to current date with current time\n            const now = new Date();\n            const year = now.getFullYear();\n            const month = String(now.getMonth() + 1).padStart(2, '0');\n            const day = String(now.getDate()).padStart(2, '0');\n            const hours = String(now.getHours()).padStart(2, '0');\n            const minutes = String(now.getMinutes()).padStart(2, '0');\n            \n            document.getElementById('transaction-date').value = `${year}-${month}-${day}T${hours}:${minutes}`;\n        }\n        \n        // Set preset type if it's a quick add\n        if (presetType) {\n            if (presetType === 'credit' || presetType === 'partial') {\n                // For credit and partial, set as expense by default\n                document.getElementById('transaction-type').value = 'expense';\n                // Set the payment status\n                document.getElementById('transaction-payment-status').value = presetType;\n                // Trigger the payment status change handler\n                this.handlePaymentStatusChange(presetType);\n            } else {\n                document.getElementById('transaction-type').value = presetType;\n            }\n        }\n        \n        // Populate form if editing\n        if (transaction) {\n            document.getElementById('transaction-type').value = transaction.type || '';\n            document.getElementById('transaction-date').value = transaction.date || '';\n            document.getElementById('transaction-vendor').value = transaction.vendorId || '';\n            document.getElementById('transaction-project').value = transaction.projectId || '';\n            document.getElementById('transaction-amount').value = transaction.amount || '';\n            document.getElementById('transaction-category').value = transaction.category || '';\n            // Set payment method radio button\n            const paymentMethodRadios = document.querySelectorAll('input[name=\"payment-method\"]');\n            paymentMethodRadios.forEach(radio => {\n                radio.checked = radio.value === (transaction.paymentMethod || '');\n            });\n            document.getElementById('transaction-payment-status').value = transaction.paymentStatus || 'paid';\n            document.getElementById('transaction-amount-paid').value = transaction.amountPaid || '';\n            document.getElementById('transaction-due-date').value = transaction.dueDate || '';\n            document.getElementById('transaction-description').value = transaction.description || '';\n            document.getElementById('transaction-notes').value = transaction.notes || '';\n            \n            // Trigger payment status change to show/hide appropriate fields\n            this.handlePaymentStatusChange(transaction.paymentStatus || 'paid');\n        }\n        \n        window.showModal('transaction-modal');\n    }\n\n    saveTransaction() {\n        const paymentStatus = document.getElementById('transaction-payment-status').value;\n        const amount = parseFloat(document.getElementById('transaction-amount').value);\n        const amountPaid = paymentStatus === 'partial' ? parseFloat(document.getElementById('transaction-amount-paid').value) || 0 : (paymentStatus === 'paid' ? amount : 0);\n        \n        const transactionData = {\n            type: document.getElementById('transaction-type').value,\n            date: document.getElementById('transaction-date').value,\n            vendorId: document.getElementById('transaction-vendor').value || null,\n            projectId: document.getElementById('transaction-project').value || null,\n            amount: amount,\n            category: document.getElementById('transaction-category').value,\n            paymentMethod: document.querySelector('input[name=\"payment-method\"]:checked')?.value || '',\n            paymentStatus: paymentStatus,\n            amountPaid: amountPaid,\n            outstandingAmount: amount - amountPaid,\n            dueDate: document.getElementById('transaction-due-date').value || null,\n            description: document.getElementById('transaction-description').value.trim() || '-',\n            notes: document.getElementById('transaction-notes').value.trim()\n        };\n\n        // Validate required fields\n        if (!transactionData.type || !transactionData.date || !transactionData.amount) {\n            showToast('Please fill in all required fields', 'error');\n            return;\n        }\n\n        // Validate amount\n        if (transactionData.amount <= 0) {\n            showToast('Amount must be greater than zero', 'error');\n            return;\n        }\n        \n        // Validate partial payment amount\n        if (transactionData.paymentStatus === 'partial' && transactionData.amountPaid >= transactionData.amount) {\n            showToast('Amount paid cannot be greater than or equal to total amount', 'error');\n            return;\n        }\n\n        try {\n            let result;\n            if (this.currentTransaction) {\n                result = this.storage.updateTransaction(this.currentTransaction.id, transactionData);\n                showToast('Transaction updated successfully', 'success');\n            } else {\n                result = this.storage.addTransaction(transactionData);\n                showToast('Transaction added successfully', 'success');\n            }\n\n            if (result) {\n                window.closeModal();\n                this.renderTransactionsTable();\n                \n                // Refresh analytics if on dashboard\n                if (window.app && window.app.analytics) {\n                    window.app.analytics.loadDashboard();\n                }\n            } else {\n                showToast('Failed to save transaction', 'error');\n            }\n        } catch (error) {\n            console.error('Error saving transaction:', error);\n            showToast('Failed to save transaction', 'error');\n        }\n    }\n\n    viewTransaction(transactionId) {\n        const transaction = this.storage.getTransactionById(transactionId);\n        if (!transaction) {\n            showToast('Transaction not found', 'error');\n            return;\n        }\n\n        const vendor = this.storage.getVendorById(transaction.vendorId);\n        const project = this.storage.getProjectById(transaction.projectId);\n        \n        const modalContent = `\n            <div class=\"transaction-details\">\n                <div class=\"transaction-header\">\n                    <h3>${transaction.description}</h3>\n                    <span class=\"status-badge ${transaction.type}\">${transaction.type}</span>\n                </div>\n                \n                <div class=\"transaction-info-grid\">\n                    <div class=\"info-item\">\n                        <label>Amount:</label>\n                        <span class=\"${transaction.type === 'income' ? 'text-success' : 'text-danger'}\">\n                            <strong>${formatCurrency(transaction.amount)}</strong>\n                        </span>\n                    </div>\n                    \n                    <div class=\"info-item\">\n                        <label>Date & Time:</label>\n                        <span>${formatDateWithTime(transaction.date)}</span>\n                    </div>\n                    \n                    <div class=\"info-item\">\n                        <label>Category:</label>\n                        <span>${transaction.category || 'N/A'}</span>\n                    </div>\n                    \n                    <div class=\"info-item\">\n                        <label>Vendor:</label>\n                        <span>${vendor ? vendor.name : 'N/A'}</span>\n                    </div>\n                    \n                    <div class=\"info-item\">\n                        <label>Project:</label>\n                        <span>${project ? project.name : 'N/A'}</span>\n                    </div>\n                    \n                    <div class=\"info-item\">\n                        <label>Created:</label>\n                        <span>${formatDate(transaction.createdAt)}</span>\n                    </div>\n                </div>\n                \n                ${transaction.notes ? `\n                    <div class=\"info-item\">\n                        <label>Notes:</label>\n                        <p>${transaction.notes}</p>\n                    </div>\n                ` : ''}\n                \n                <div class=\"transaction-actions\">\n                    <button class=\"btn btn-primary\" onclick=\"transactionManager.editTransaction('${transaction.id}')\">\n                        <i class=\"fas fa-edit\"></i> Edit Transaction\n                    </button>\n                    <button class=\"btn btn-secondary\" onclick=\"closeModal()\">Close</button>\n                </div>\n            </div>\n        `;\n\n        this.showInfoModal('Transaction Details', modalContent);\n    }\n\n    editTransaction(transactionId) {\n        const transaction = this.storage.getTransactionById(transactionId);\n        if (!transaction) {\n            showToast('Transaction not found', 'error');\n            return;\n        }\n        \n        this.showTransactionModal(transaction);\n    }\n\n    deleteTransaction(transactionId) {\n        const transaction = this.storage.getTransactionById(transactionId);\n        if (!transaction) {\n            showToast('Transaction not found', 'error');\n            return;\n        }\n\n        const confirmMessage = `Are you sure you want to delete this ${transaction.type} transaction of ${formatCurrency(transaction.amount)}?`;\n\n        if (confirm(confirmMessage)) {\n            try {\n                this.storage.deleteTransaction(transactionId);\n                showToast('Transaction deleted successfully', 'success');\n                this.renderTransactionsTable();\n                \n                // Refresh analytics if on dashboard\n                if (window.app && window.app.analytics) {\n                    window.app.analytics.loadDashboard();\n                }\n            } catch (error) {\n                console.error('Error deleting transaction:', error);\n                showToast('Failed to delete transaction', 'error');\n            }\n        }\n    }\n\n    showInfoModal(title, content) {\n        // Create or update info modal\n        let modal = document.getElementById('info-modal');\n        if (!modal) {\n            modal = document.createElement('div');\n            modal.id = 'info-modal';\n            modal.className = 'modal';\n            modal.innerHTML = `\n                <div class=\"modal-header\">\n                    <h3 id=\"info-modal-title\"></h3>\n                    <button class=\"btn-close\" onclick=\"closeModal()\">&times;</button>\n                </div>\n                <div class=\"modal-body\" id=\"info-modal-body\"></div>\n            `;\n            document.getElementById('modal-overlay').appendChild(modal);\n        }\n\n        document.getElementById('info-modal-title').textContent = title;\n        document.getElementById('info-modal-body').innerHTML = content;\n        \n        window.showModal('info-modal');\n    }\n\n    // Export transactions to CSV\n    exportTransactionsToCSV() {\n        const transactions = this.getFilteredTransactions();\n        const headers = ['Date', 'Type', 'Vendor', 'Project', 'Amount', 'Category', 'Description', 'Notes'];\n        \n        const csvContent = [\n            headers.join(','),\n            ...transactions.map(transaction => {\n                const vendor = this.storage.getVendorById(transaction.vendorId);\n                const project = this.storage.getProjectById(transaction.projectId);\n                \n                return [\n                    `\"${transaction.date}\"`,\n                    `\"${transaction.type}\"`,\n                    `\"${vendor ? vendor.name : ''}\"`,\n                    `\"${project ? project.name : ''}\"`,\n                    transaction.amount,\n                    `\"${transaction.category || ''}\"`,\n                    `\"${transaction.description}\"`,\n                    `\"${transaction.notes || ''}\"`\n                ].join(',');\n            })\n        ].join('\\n');\n\n        const blob = new Blob([csvContent], { type: 'text/csv' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `transactions-${new Date().toISOString().split('T')[0]}.csv`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n\n        showToast('Transactions exported to CSV', 'success');\n    }\n\n    markAsPaid(transactionId) {\n        const transaction = this.storage.getTransactionById(transactionId);\n        if (!transaction) {\n            showToast('Transaction not found', 'error');\n            return;\n        }\n\n        if (confirm(`Mark transaction \"${transaction.description}\" as fully paid?`)) {\n            try {\n                const updatedData = {\n                    paymentStatus: 'paid',\n                    amountPaid: transaction.amount,\n                    outstandingAmount: 0\n                };\n                \n                this.storage.updateTransaction(transactionId, updatedData);\n                showToast('Transaction marked as paid', 'success');\n                this.renderTransactionsTable();\n                \n                // Refresh analytics if on dashboard\n                if (window.app && window.app.analytics) {\n                    window.app.analytics.loadDashboard();\n                }\n            } catch (error) {\n                console.error('Error marking transaction as paid:', error);\n                showToast('Failed to update transaction', 'error');\n            }\n        }\n    }\n}\n","size_bytes":51738},"js/user-storage.js":{"content":"// User-specific storage management for data isolation\nexport class UserStorageManager {\n    constructor() {\n        this.currentUserId = null;\n        this.keys = {\n            vendors: 'business_management_vendors',\n            transactions: 'business_management_transactions',\n            projects: 'business_management_projects',\n            settings: 'business_management_settings'\n        };\n    }\n\n    // Set current user for data isolation\n    setCurrentUser(userId) {\n        this.currentUserId = userId;\n        this.initializeUserData();\n    }\n\n    // Clear current user (logout)\n    clearCurrentUser() {\n        this.currentUserId = null;\n    }\n\n    // Get user-specific storage keys\n    getUserKeys() {\n        if (!this.currentUserId) {\n            throw new Error('No user is currently logged in');\n        }\n        return {\n            vendors: `${this.keys.vendors}_${this.currentUserId}`,\n            transactions: `${this.keys.transactions}_${this.currentUserId}`,\n            projects: `${this.keys.projects}_${this.currentUserId}`,\n            settings: `${this.keys.settings}_${this.currentUserId}`\n        };\n    }\n\n    initializeUserData() {\n        if (!this.currentUserId) return;\n        \n        const userKeys = this.getUserKeys();\n        \n        // Initialize with empty arrays if no data exists for this user\n        if (!localStorage.getItem(userKeys.vendors)) {\n            this.saveVendors([]);\n        }\n        if (!localStorage.getItem(userKeys.transactions)) {\n            this.saveTransactions([]);\n        }\n        if (!localStorage.getItem(userKeys.projects)) {\n            this.saveProjects([]);\n        }\n        if (!localStorage.getItem(userKeys.settings)) {\n            this.saveSettings({\n                companyName: 'Your Business',\n                businessType: 'construction',\n                primaryColor: '#F59E0B',\n                currency: 'INR',\n                theme: 'light',\n                customCategories: {\n                    vendor: [],\n                    transaction: []\n                }\n            });\n        }\n    }\n\n    // Check if user is logged in\n    requireUser() {\n        if (!this.currentUserId) {\n            throw new Error('User must be logged in to access this data');\n        }\n    }\n\n    // Vendor operations\n    getVendors() {\n        this.requireUser();\n        try {\n            const userKeys = this.getUserKeys();\n            return JSON.parse(localStorage.getItem(userKeys.vendors)) || [];\n        } catch (error) {\n            console.error('Error loading vendors:', error);\n            return [];\n        }\n    }\n\n    saveVendors(vendors) {\n        this.requireUser();\n        try {\n            const userKeys = this.getUserKeys();\n            localStorage.setItem(userKeys.vendors, JSON.stringify(vendors));\n            return true;\n        } catch (error) {\n            console.error('Error saving vendors:', error);\n            return false;\n        }\n    }\n\n    addVendor(vendor) {\n        this.requireUser();\n        const vendors = this.getVendors();\n        vendor.id = this.generateId();\n        vendor.createdAt = new Date().toISOString();\n        vendor.updatedAt = new Date().toISOString();\n        vendor.totalSpent = 0;\n        vendor.status = vendor.status || 'active';\n        \n        vendors.push(vendor);\n        return this.saveVendors(vendors) ? vendor : null;\n    }\n\n    updateVendor(id, updatedVendor) {\n        this.requireUser();\n        const vendors = this.getVendors();\n        const index = vendors.findIndex(v => v.id === id);\n        \n        if (index !== -1) {\n            vendors[index] = { ...vendors[index], ...updatedVendor, updatedAt: new Date().toISOString() };\n            this.saveVendors(vendors);\n            this.updateVendorTotals();\n            return vendors[index];\n        }\n        return null;\n    }\n\n    deleteVendor(id) {\n        this.requireUser();\n        const vendors = this.getVendors();\n        const filteredVendors = vendors.filter(v => v.id !== id);\n        \n        if (filteredVendors.length !== vendors.length) {\n            this.saveVendors(filteredVendors);\n            this.updateVendorTotals();\n            return true;\n        }\n        return false;\n    }\n\n    getVendorById(id) {\n        this.requireUser();\n        const vendors = this.getVendors();\n        return vendors.find(v => v.id === id);\n    }\n\n    // Transaction operations\n    getTransactions() {\n        this.requireUser();\n        try {\n            const userKeys = this.getUserKeys();\n            return JSON.parse(localStorage.getItem(userKeys.transactions)) || [];\n        } catch (error) {\n            console.error('Error loading transactions:', error);\n            return [];\n        }\n    }\n\n    saveTransactions(transactions) {\n        this.requireUser();\n        try {\n            const userKeys = this.getUserKeys();\n            localStorage.setItem(userKeys.transactions, JSON.stringify(transactions));\n            return true;\n        } catch (error) {\n            console.error('Error saving transactions:', error);\n            return false;\n        }\n    }\n\n    addTransaction(transaction) {\n        this.requireUser();\n        const transactions = this.getTransactions();\n        transaction.id = this.generateId();\n        transaction.createdAt = new Date().toISOString();\n        transaction.updatedAt = new Date().toISOString();\n        \n        transactions.push(transaction);\n        const success = this.saveTransactions(transactions);\n        \n        if (success) {\n            this.updateVendorTotals();\n        }\n        \n        return success ? transaction : null;\n    }\n\n    updateTransaction(id, updatedTransaction) {\n        this.requireUser();\n        const transactions = this.getTransactions();\n        const index = transactions.findIndex(t => t.id === id);\n        \n        if (index !== -1) {\n            transactions[index] = { ...transactions[index], ...updatedTransaction, updatedAt: new Date().toISOString() };\n            this.saveTransactions(transactions);\n            this.updateVendorTotals();\n            return transactions[index];\n        }\n        return null;\n    }\n\n    deleteTransaction(id) {\n        this.requireUser();\n        const transactions = this.getTransactions();\n        const filteredTransactions = transactions.filter(t => t.id !== id);\n        \n        if (filteredTransactions.length !== transactions.length) {\n            this.saveTransactions(filteredTransactions);\n            this.updateVendorTotals();\n            return true;\n        }\n        return false;\n    }\n\n    getTransactionById(id) {\n        this.requireUser();\n        const transactions = this.getTransactions();\n        return transactions.find(t => t.id === id);\n    }\n\n    // Project operations\n    getProjects() {\n        this.requireUser();\n        try {\n            const userKeys = this.getUserKeys();\n            return JSON.parse(localStorage.getItem(userKeys.projects)) || [];\n        } catch (error) {\n            console.error('Error loading projects:', error);\n            return [];\n        }\n    }\n\n    saveProjects(projects) {\n        this.requireUser();\n        try {\n            const userKeys = this.getUserKeys();\n            localStorage.setItem(userKeys.projects, JSON.stringify(projects));\n            return true;\n        } catch (error) {\n            console.error('Error saving projects:', error);\n            return false;\n        }\n    }\n\n    addProject(project) {\n        this.requireUser();\n        const projects = this.getProjects();\n        project.id = this.generateId();\n        project.createdAt = new Date().toISOString();\n        project.updatedAt = new Date().toISOString();\n        project.status = project.status || 'planning';\n        project.progress = project.progress || 0;\n        \n        projects.push(project);\n        return this.saveProjects(projects) ? project : null;\n    }\n\n    updateProject(id, updatedProject) {\n        this.requireUser();\n        const projects = this.getProjects();\n        const index = projects.findIndex(p => p.id === id);\n        \n        if (index !== -1) {\n            projects[index] = { ...projects[index], ...updatedProject, updatedAt: new Date().toISOString() };\n            this.saveProjects(projects);\n            return projects[index];\n        }\n        return null;\n    }\n\n    deleteProject(id) {\n        this.requireUser();\n        const projects = this.getProjects();\n        const filteredProjects = projects.filter(p => p.id !== id);\n        \n        if (filteredProjects.length !== projects.length) {\n            this.saveProjects(filteredProjects);\n            return true;\n        }\n        return false;\n    }\n\n    getProjectById(id) {\n        this.requireUser();\n        const projects = this.getProjects();\n        return projects.find(p => p.id === id);\n    }\n\n    // Settings operations\n    getSettings() {\n        this.requireUser();\n        try {\n            const userKeys = this.getUserKeys();\n            return JSON.parse(localStorage.getItem(userKeys.settings)) || {};\n        } catch (error) {\n            console.error('Error loading settings:', error);\n            return {};\n        }\n    }\n\n    saveSettings(settings) {\n        this.requireUser();\n        try {\n            const userKeys = this.getUserKeys();\n            localStorage.setItem(userKeys.settings, JSON.stringify(settings));\n            return true;\n        } catch (error) {\n            console.error('Error saving settings:', error);\n            return false;\n        }\n    }\n\n    // Utility methods\n    generateId() {\n        return Date.now().toString(36) + Math.random().toString(36).substring(2);\n    }\n\n    updateVendorTotals() {\n        this.requireUser();\n        const vendors = this.getVendors();\n        const transactions = this.getTransactions();\n        \n        vendors.forEach(vendor => {\n            const vendorTransactions = transactions.filter(t => t.vendorId === vendor.id && t.type === 'expense');\n            vendor.totalSpent = vendorTransactions.reduce((sum, t) => sum + (parseFloat(t.amount) || 0), 0);\n        });\n        \n        this.saveVendors(vendors);\n    }\n\n    // Search and filter methods\n    searchVendors(query) {\n        this.requireUser();\n        const vendors = this.getVendors();\n        const lowerQuery = query.toLowerCase();\n        return vendors.filter(vendor => \n            vendor.name.toLowerCase().includes(lowerQuery) ||\n            vendor.email.toLowerCase().includes(lowerQuery) ||\n            vendor.phone.includes(query) ||\n            vendor.category.toLowerCase().includes(lowerQuery)\n        );\n    }\n\n    searchTransactions(query) {\n        this.requireUser();\n        const transactions = this.getTransactions();\n        const lowerQuery = query.toLowerCase();\n        return transactions.filter(transaction => \n            transaction.description.toLowerCase().includes(lowerQuery) ||\n            transaction.category.toLowerCase().includes(lowerQuery) ||\n            transaction.amount.toString().includes(query)\n        );\n    }\n\n    searchProjects(query) {\n        this.requireUser();\n        const projects = this.getProjects();\n        const lowerQuery = query.toLowerCase();\n        return projects.filter(project => \n            project.name.toLowerCase().includes(lowerQuery) ||\n            project.description.toLowerCase().includes(lowerQuery) ||\n            project.category.toLowerCase().includes(lowerQuery)\n        );\n    }\n\n    // Date range filtering\n    getTransactionsByDateRange(startDate, endDate) {\n        this.requireUser();\n        const transactions = this.getTransactions();\n        const start = new Date(startDate);\n        const end = new Date(endDate);\n        \n        return transactions.filter(transaction => {\n            const transactionDate = new Date(transaction.date);\n            return transactionDate >= start && transactionDate <= end;\n        });\n    }\n\n    getTransactionsByVendor(vendorId) {\n        this.requireUser();\n        const transactions = this.getTransactions();\n        return transactions.filter(transaction => transaction.vendorId === vendorId);\n    }\n\n    getTransactionsByProject(projectId) {\n        this.requireUser();\n        const transactions = this.getTransactions();\n        return transactions.filter(transaction => transaction.projectId === projectId);\n    }\n\n    getProjectsByStatus(status) {\n        this.requireUser();\n        const projects = this.getProjects();\n        return projects.filter(project => project.status === status);\n    }\n\n    // Data export/import\n    exportData() {\n        this.requireUser();\n        return {\n            vendors: this.getVendors(),\n            transactions: this.getTransactions(),\n            projects: this.getProjects(),\n            settings: this.getSettings(),\n            exportDate: new Date().toISOString(),\n            userId: this.currentUserId\n        };\n    }\n\n    importData(data) {\n        this.requireUser();\n        if (data.vendors) this.saveVendors(data.vendors);\n        if (data.transactions) this.saveTransactions(data.transactions);\n        if (data.projects) this.saveProjects(data.projects);\n        if (data.settings) this.saveSettings(data.settings);\n        \n        // Update vendor totals after import\n        this.updateVendorTotals();\n        return true;\n    }\n}","size_bytes":13317},"js/utils.js":{"content":"// Utility functions for the application\n\n// Toast notification system\nexport function showToast(message, type = 'info', duration = 4000) {\n    const toastContainer = document.getElementById('toast-container');\n    const toastId = 'toast-' + Date.now();\n    \n    const toastHTML = `\n        <div class=\"toast ${type}\" id=\"${toastId}\">\n            <div class=\"toast-icon\">\n                <i class=\"fas ${getToastIcon(type)}\"></i>\n            </div>\n            <div class=\"toast-content\">\n                <div class=\"toast-title\">${getToastTitle(type)}</div>\n                <div class=\"toast-message\">${message}</div>\n            </div>\n            <button class=\"toast-close\" onclick=\"removeToast('${toastId}')\">\n                <i class=\"fas fa-times\"></i>\n            </button>\n        </div>\n    `;\n    \n    toastContainer.insertAdjacentHTML('beforeend', toastHTML);\n    \n    const toastElement = document.getElementById(toastId);\n    \n    // Trigger animation\n    setTimeout(() => {\n        toastElement.classList.add('show');\n    }, 100);\n    \n    // Auto remove\n    setTimeout(() => {\n        removeToast(toastId);\n    }, duration);\n    \n    // Make removeToast globally available\n    window.removeToast = removeToast;\n}\n\nfunction removeToast(toastId) {\n    const toast = document.getElementById(toastId);\n    if (toast) {\n        toast.classList.remove('show');\n        setTimeout(() => {\n            if (toast.parentNode) {\n                toast.parentNode.removeChild(toast);\n            }\n        }, 300);\n    }\n}\n\nfunction getToastIcon(type) {\n    const icons = {\n        success: 'fa-check-circle',\n        error: 'fa-exclamation-circle',\n        warning: 'fa-exclamation-triangle',\n        info: 'fa-info-circle'\n    };\n    return icons[type] || icons.info;\n}\n\nfunction getToastTitle(type) {\n    const titles = {\n        success: 'Success',\n        error: 'Error',\n        warning: 'Warning',\n        info: 'Information'\n    };\n    return titles[type] || titles.info;\n}\n\n// Loading indicator\nexport function showLoading() {\n    const loading = document.getElementById('loading');\n    loading.classList.remove('hidden');\n}\n\nexport function hideLoading() {\n    const loading = document.getElementById('loading');\n    loading.classList.add('hidden');\n}\n\n// Currency formatting\nexport function formatCurrency(amount, currency = 'INR') {\n    const formatter = new Intl.NumberFormat('en-IN', {\n        style: 'currency',\n        currency: currency,\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n    });\n    \n    return formatter.format(amount || 0);\n}\n\n// Date formatting\nexport function formatDate(dateString, options = {}) {\n    if (!dateString) return 'N/A';\n    \n    const defaultOptions = {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n    };\n    \n    const formatOptions = { ...defaultOptions, ...options };\n    const date = new Date(dateString);\n    \n    if (isNaN(date.getTime())) return 'Invalid Date';\n    \n    return date.toLocaleDateString('en-US', formatOptions);\n}\n\n// Date formatting with timestamp\nexport function formatDateWithTime(dateString, options = {}) {\n    if (!dateString) return 'N/A';\n    \n    const date = new Date(dateString);\n    \n    if (isNaN(date.getTime())) return 'Invalid Date';\n    \n    const dateOptions = {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n    };\n    \n    const timeOptions = {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true\n    };\n    \n    const formattedDate = date.toLocaleDateString('en-US', dateOptions);\n    const formattedTime = date.toLocaleTimeString('en-US', timeOptions);\n    \n    return `${formattedDate}<br><small class=\"timestamp\">${formattedTime}</small>`;\n}\n\n// Contact Picker API\nexport async function pickContact() {\n    if ('contacts' in navigator && 'ContactsManager' in window) {\n        try {\n            const properties = ['name', 'tel'];\n            const opts = { multiple: false };\n            \n            const contacts = await navigator.contacts.select(properties, opts);\n            if (contacts.length > 0) {\n                const contact = contacts[0];\n                return {\n                    name: contact.name?.[0] || '',\n                    phone: contact.tel?.[0] || ''\n                };\n            }\n        } catch (error) {\n            console.error('Contact picker error:', error);\n            showToast('Contact picker not available on this device', 'warning');\n        }\n    } else {\n        showToast('Contact picker not supported on this browser', 'warning');\n    }\n    return null;\n}\n\n// Check if contact picker is supported\nexport function isContactPickerSupported() {\n    return 'contacts' in navigator && 'ContactsManager' in window;\n}\n\n// Date and time formatting\nexport function formatDateTime(dateString) {\n    if (!dateString) return 'N/A';\n    \n    const date = new Date(dateString);\n    if (isNaN(date.getTime())) return 'Invalid Date';\n    \n    return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n    });\n}\n\n// Number formatting\nexport function formatNumber(number, decimals = 0) {\n    if (number === null || number === undefined || isNaN(number)) return '0';\n    \n    return new Intl.NumberFormat('en-US', {\n        minimumFractionDigits: decimals,\n        maximumFractionDigits: decimals\n    }).format(number);\n}\n\n// Percentage formatting\nexport function formatPercentage(value, decimals = 1) {\n    if (value === null || value === undefined || isNaN(value)) return '0%';\n    \n    return new Intl.NumberFormat('en-US', {\n        style: 'percent',\n        minimumFractionDigits: decimals,\n        maximumFractionDigits: decimals\n    }).format(value / 100);\n}\n\n// Phone number formatting\nexport function formatPhoneNumber(phoneNumber) {\n    if (!phoneNumber) return '';\n    \n    // Remove all non-digit characters\n    const cleaned = phoneNumber.replace(/\\D/g, '');\n    \n    // Format as (XXX) XXX-XXXX for US numbers\n    if (cleaned.length === 10) {\n        return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n    }\n    \n    // Return original if not 10 digits\n    return phoneNumber;\n}\n\n// Text truncation\nexport function truncateText(text, maxLength = 50) {\n    if (!text || text.length <= maxLength) return text;\n    return text.substring(0, maxLength) + '...';\n}\n\n// Debounce function for search inputs\nexport function debounce(func, wait, immediate = false) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            timeout = null;\n            if (!immediate) func(...args);\n        };\n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func(...args);\n    };\n}\n\n// Validate email format\nexport function isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n\n// Validate phone number\nexport function isValidPhoneNumber(phone) {\n    const phoneRegex = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\n    return phoneRegex.test(phone);\n}\n\n// Generate unique ID\nexport function generateId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n}\n\n// Deep clone object\nexport function deepClone(obj) {\n    if (obj === null || typeof obj !== 'object') return obj;\n    if (obj instanceof Date) return new Date(obj.getTime());\n    if (obj instanceof Array) return obj.map(item => deepClone(item));\n    \n    const clonedObj = {};\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            clonedObj[key] = deepClone(obj[key]);\n        }\n    }\n    return clonedObj;\n}\n\n// Local storage helpers\nexport function saveToLocalStorage(key, data) {\n    try {\n        localStorage.setItem(key, JSON.stringify(data));\n        return true;\n    } catch (error) {\n        console.error('Error saving to localStorage:', error);\n        return false;\n    }\n}\n\nexport function loadFromLocalStorage(key, defaultValue = null) {\n    try {\n        const item = localStorage.getItem(key);\n        return item ? JSON.parse(item) : defaultValue;\n    } catch (error) {\n        console.error('Error loading from localStorage:', error);\n        return defaultValue;\n    }\n}\n\n// File size formatting\nexport function formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    \n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    \n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n// Color utilities\nexport function hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n\nexport function rgbToHex(r, g, b) {\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n}\n\n// DOM manipulation helpers\nexport function createElement(tag, className = '', innerHTML = '') {\n    const element = document.createElement(tag);\n    if (className) element.className = className;\n    if (innerHTML) element.innerHTML = innerHTML;\n    return element;\n}\n\nexport function removeElement(element) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\n// Array utilities\nexport function groupBy(array, key) {\n    return array.reduce((groups, item) => {\n        const groupKey = typeof key === 'function' ? key(item) : item[key];\n        groups[groupKey] = groups[groupKey] || [];\n        groups[groupKey].push(item);\n        return groups;\n    }, {});\n}\n\nexport function sortBy(array, key, direction = 'asc') {\n    return [...array].sort((a, b) => {\n        const aValue = typeof key === 'function' ? key(a) : a[key];\n        const bValue = typeof key === 'function' ? key(b) : b[key];\n        \n        if (aValue < bValue) return direction === 'asc' ? -1 : 1;\n        if (aValue > bValue) return direction === 'asc' ? 1 : -1;\n        return 0;\n    });\n}\n\n// URL utilities\nexport function getQueryParam(param) {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get(param);\n}\n\nexport function setQueryParam(param, value) {\n    const url = new URL(window.location);\n    url.searchParams.set(param, value);\n    window.history.pushState({}, '', url);\n}\n\n// Print utilities\nexport function printElement(elementId) {\n    const element = document.getElementById(elementId);\n    if (!element) return;\n    \n    const printWindow = window.open('', '_blank');\n    printWindow.document.write(`\n        <html>\n            <head>\n                <title>Print</title>\n                <link rel=\"stylesheet\" href=\"styles/main.css\">\n                <link rel=\"stylesheet\" href=\"styles/components.css\">\n                <style>\n                    @media print {\n                        body { margin: 0; }\n                        .no-print { display: none !important; }\n                    }\n                </style>\n            </head>\n            <body>\n                ${element.outerHTML}\n            </body>\n        </html>\n    `);\n    printWindow.document.close();\n    printWindow.focus();\n    printWindow.print();\n    printWindow.close();\n}\n\n// Export utilities\nexport function downloadCSV(data, filename) {\n    const csvContent = \"data:text/csv;charset=utf-8,\" + data;\n    const encodedUri = encodeURI(csvContent);\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodedUri);\n    link.setAttribute(\"download\", filename);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n}\n\nexport function downloadJSON(data, filename) {\n    const jsonContent = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(data, null, 2));\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"href\", jsonContent);\n    link.setAttribute(\"download\", filename);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n}\n\n// Theme utilities\nexport function setTheme(theme) {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('theme', theme);\n}\n\nexport function getTheme() {\n    return localStorage.getItem('theme') || 'light';\n}\n\n// Performance utilities\nexport function measurePerformance(name, fn) {\n    const start = performance.now();\n    const result = fn();\n    const end = performance.now();\n    console.log(`${name} took ${end - start} milliseconds`);\n    return result;\n}\n\n// Browser detection\nexport function getBrowserInfo() {\n    const userAgent = navigator.userAgent;\n    let browserName = \"Unknown\";\n    \n    if (userAgent.indexOf(\"Chrome\") > -1) {\n        browserName = \"Chrome\";\n    } else if (userAgent.indexOf(\"Firefox\") > -1) {\n        browserName = \"Firefox\";\n    } else if (userAgent.indexOf(\"Safari\") > -1) {\n        browserName = \"Safari\";\n    } else if (userAgent.indexOf(\"Edge\") > -1) {\n        browserName = \"Edge\";\n    }\n    \n    return {\n        name: browserName,\n        userAgent: userAgent,\n        isOnline: navigator.onLine,\n        platform: navigator.platform\n    };\n}\n\n// Feature detection\nexport function supportsLocalStorage() {\n    try {\n        const test = 'test';\n        localStorage.setItem(test, test);\n        localStorage.removeItem(test);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\nexport function supportsServiceWorker() {\n    return 'serviceWorker' in navigator;\n}\n\n// Error handling\nexport function handleError(error, context = '') {\n    console.error(`Error in ${context}:`, error);\n    showToast(`An error occurred${context ? ` in ${context}` : ''}. Please try again.`, 'error');\n}\n\n// Network status\nexport function isOnline() {\n    return navigator.onLine;\n}\n\n// Progressive Web App utilities\nexport function installPWA() {\n    if (window.deferredPrompt) {\n        window.deferredPrompt.prompt();\n        window.deferredPrompt.userChoice.then((choiceResult) => {\n            if (choiceResult.outcome === 'accepted') {\n                showToast('App installed successfully!', 'success');\n            }\n            window.deferredPrompt = null;\n        });\n    }\n}\n","size_bytes":14343},"js/vendors.js":{"content":"// Vendor management functionality\r\nimport { showToast, formatCurrency, formatDate } from './utils.js';\r\n\r\nexport class VendorManager {\r\n    constructor(storage) {\r\n        this.storage = storage;\r\n        this.currentVendor = null;\r\n        this.sortColumn = 'name';\r\n        this.sortDirection = 'asc';\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.setupEventListeners();\r\n        this.setupModal();\r\n    }\r\n\r\n    setupEventListeners() {\r\n        // Add vendor button\r\n        document.getElementById('add-vendor-btn').addEventListener('click', () => {\r\n            this.showVendorModal();\r\n        });\r\n\r\n        // Search functionality\r\n        document.getElementById('vendor-search').addEventListener('input', (e) => {\r\n            this.filterVendors();\r\n        });\r\n\r\n        // Filter functionality\r\n        document.getElementById('vendor-category-filter').addEventListener('change', () => {\r\n            this.filterVendors();\r\n        });\r\n\r\n        document.getElementById('vendor-status-filter').addEventListener('change', () => {\r\n            this.filterVendors();\r\n        });\r\n\r\n        // Table sorting\r\n        document.querySelectorAll('#vendors-table th[data-sort]').forEach(th => {\r\n            th.addEventListener('click', (e) => {\r\n                const column = e.currentTarget.dataset.sort;\r\n                this.sortVendors(column);\r\n            });\r\n        });\r\n    }\r\n\r\n    setupModal() {\r\n        // Vendor form submission\r\n        document.getElementById('vendor-form').addEventListener('submit', (e) => {\r\n            e.preventDefault();\r\n            this.saveVendor();\r\n        });\r\n\r\n        // Handle category selection change\r\n        document.getElementById('vendor-category').addEventListener('change', (e) => {\r\n            const otherCategoryGroup = document.getElementById('other-category-group');\r\n            otherCategoryGroup.style.display = e.target.value === 'other' ? 'block' : 'none';\r\n        });\r\n\r\n        // Handle add category button\r\n        document.getElementById('add-category-btn').addEventListener('click', () => {\r\n            this.addNewCategory();\r\n        });\r\n    }\r\n\r\n    // Add new method to handle adding categories\r\n    addNewCategory() {\r\n        const categoryInput = document.getElementById('other-category');\r\n        const categoryName = categoryInput.value.trim();\r\n        \r\n        if (!categoryName) {\r\n            showToast('Please enter a category name', 'error');\r\n            return;\r\n        }\r\n\r\n        // Get current settings\r\n        const settings = window.app.settings.loadSettings();\r\n        \r\n        // Initialize custom categories if not exists\r\n        if (!settings.customCategories) {\r\n            settings.customCategories = {\r\n                vendor: [],\r\n                transaction: [],\r\n                project: []\r\n            };\r\n        }\r\n        \r\n        if (!settings.customCategories.vendor) {\r\n            settings.customCategories.vendor = [];\r\n        }\r\n\r\n        // Check if category already exists\r\n        if (settings.customCategories.vendor.includes(categoryName)) {\r\n            showToast('Category already exists', 'warning');\r\n            return;\r\n        }\r\n\r\n        // Add new category\r\n        settings.customCategories.vendor.push(categoryName);\r\n        window.app.settings.storage.saveSettings(settings);\r\n\r\n        // Update the select dropdown\r\n        const categorySelect = document.getElementById('vendor-category');\r\n        const otherOption = categorySelect.querySelector('option[value=\"other\"]');\r\n        \r\n        // Create new option before \"Other\"\r\n        const newOption = document.createElement('option');\r\n        newOption.value = categoryName.toLowerCase().replace(/\\s+/g, '-');\r\n        newOption.textContent = categoryName;\r\n        categorySelect.insertBefore(newOption, otherOption);\r\n\r\n        // Select the new category and hide the input\r\n        categorySelect.value = newOption.value;\r\n        document.getElementById('other-category-group').style.display = 'none';\r\n        categoryInput.value = '';\r\n\r\n        showToast('Category added successfully', 'success');\r\n    }\r\n\r\n\r\n    loadVendors() {\r\n        this.renderVendorsTable();\r\n    }\r\n\r\n    renderVendorsTable() {\r\n        const vendors = this.getFilteredVendors();\r\n        const tbody = document.getElementById('vendors-table-body');\r\n        \r\n        if (vendors.length === 0) {\r\n            tbody.innerHTML = `\r\n                <tr>\r\n                    <td colspan=\"7\" class=\"empty-state\">\r\n                        <div class=\"empty-state\">\r\n                            <i class=\"fas fa-building\"></i>\r\n                            <h3>No Vendors Found</h3>\r\n                            <p>Add your first vendor to get started</p>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            `;\r\n            return;\r\n        }\r\n\r\n        tbody.innerHTML = vendors.map(vendor => `\r\n            <tr data-vendor-id=\"${vendor.id}\">\r\n                <td>\r\n                    <div class=\"vendor-info\">\r\n                        <strong>${vendor.name}</strong>\r\n                        ${vendor.contact ? `<br><small class=\"text-muted\">${vendor.contact}</small>` : ''}\r\n                        <p>${vendor.phone ? `${vendor.phone}` : ''}</p>\r\n                    </div>\r\n                </td>\r\n               \r\n                <td><strong class=\"you-give-amount\">${formatCurrency(this.calculateVendorAmounts(vendor).youGive)}</strong></td>\r\n                <td><strong class=\"you-got-amount\">${formatCurrency(this.calculateVendorAmounts(vendor).youGot)}</strong></td>\r\n                <td>\r\n                    ${this.formatCreditBalance(this.calculateVendorAmounts(vendor).creditBalance)}\r\n                </td>\r\n\r\n                <td>\r\n                    <div class=\"action-buttons\">\r\n                        <button class=\"action-btn view\" onclick=\"vendorManager.viewVendor('${vendor.id}')\" title=\"View\">\r\n                            <i class=\"fas fa-eye\"></i>\r\n                        </button>\r\n                        <button class=\"action-btn edit\" onclick=\"vendorManager.editVendor('${vendor.id}')\" title=\"Edit\">\r\n                            <i class=\"fas fa-edit\"></i>\r\n                        </button>\r\n                        <button class=\"action-btn delete\" onclick=\"vendorManager.deleteVendor('${vendor.id}')\" title=\"Delete\">\r\n                            <i class=\"fas fa-trash\"></i>\r\n                        </button>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        `).join('');\r\n\r\n        // Make vendorManager globally available for onclick handlers\r\n        window.vendorManager = this;\r\n    }\r\n\r\n    getFilteredVendors() {\r\n        let vendors = this.storage.getVendors();\r\n        \r\n        // Apply search filter\r\n        const searchTerm = document.getElementById('vendor-search').value.toLowerCase();\r\n        if (searchTerm) {\r\n            vendors = vendors.filter(vendor =>\r\n                vendor.name.toLowerCase().includes(searchTerm) ||\r\n                vendor.category.toLowerCase().includes(searchTerm) ||\r\n                vendor.contact.toLowerCase().includes(searchTerm) ||\r\n                vendor.email.toLowerCase().includes(searchTerm)\r\n            );\r\n        }\r\n\r\n        // Apply category filter\r\n        const categoryFilter = document.getElementById('vendor-category-filter').value;\r\n        if (categoryFilter) {\r\n            vendors = vendors.filter(vendor => vendor.category === categoryFilter);\r\n        }\r\n\r\n        // Apply status filter\r\n        const statusFilter = document.getElementById('vendor-status-filter').value;\r\n        if (statusFilter) {\r\n            vendors = vendors.filter(vendor => vendor.status === statusFilter);\r\n        }\r\n\r\n        // Apply sorting\r\n        vendors.sort((a, b) => {\r\n            let aValue = a[this.sortColumn];\r\n            let bValue = b[this.sortColumn];\r\n            \r\n            // Handle different data types\r\n            if (this.sortColumn === 'totalSpent') {\r\n                aValue = parseFloat(aValue) || 0;\r\n                bValue = parseFloat(bValue) || 0;\r\n            } else {\r\n                aValue = String(aValue).toLowerCase();\r\n                bValue = String(bValue).toLowerCase();\r\n            }\r\n            \r\n            if (aValue < bValue) return this.sortDirection === 'asc' ? -1 : 1;\r\n            if (aValue > bValue) return this.sortDirection === 'asc' ? 1 : -1;\r\n            return 0;\r\n        });\r\n\r\n        return vendors;\r\n    }\r\n\r\n    sortVendors(column) {\r\n        if (this.sortColumn === column) {\r\n            this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\r\n        } else {\r\n            this.sortColumn = column;\r\n            this.sortDirection = 'asc';\r\n        }\r\n\r\n        // Update sort indicators\r\n        document.querySelectorAll('#vendors-table th[data-sort] i').forEach(icon => {\r\n            icon.className = 'fas fa-sort';\r\n        });\r\n\r\n        const currentTh = document.querySelector(`#vendors-table th[data-sort=\"${column}\"] i`);\r\n        currentTh.className = `fas fa-sort-${this.sortDirection === 'asc' ? 'up' : 'down'}`;\r\n\r\n        this.renderVendorsTable();\r\n    }\r\n\r\n    filterVendors() {\r\n        this.renderVendorsTable();\r\n    }\r\n\r\n    showVendorModal(vendor = null) {\r\n        // Check authentication\r\n        if (!this.storage.requireAuth()) {\r\n            showToast('Please login to manage vendors', 'warning');\r\n            return;\r\n        }\r\n        this.currentVendor = vendor;\r\n        const title = vendor ? 'Edit Vendor' : 'Add Vendor';\r\n        \r\n        document.getElementById('vendor-modal-title').textContent = title;\r\n        \r\n        // Reset form\r\n        document.getElementById('vendor-form').reset();\r\n        \r\n        // Populate form if editing\r\n        if (vendor) {\r\n            document.getElementById('vendor-name').value = vendor.name || '';\r\n            document.getElementById('vendor-category').value = vendor.category || '';\r\n            document.getElementById('vendor-contact').value = vendor.contact || '';\r\n            document.getElementById('vendor-phone').value = vendor.phone || '';\r\n            document.getElementById('vendor-email').value = vendor.email || '';\r\n            document.getElementById('vendor-address').value = vendor.address || '';\r\n            document.getElementById('vendor-notes').value = vendor.notes || '';\r\n        }\r\n        \r\n        window.showModal('vendor-modal');\r\n    }\r\n\r\n    saveVendor() {\r\n         const formData = new FormData(document.getElementById('vendor-form'));\r\n        const categorySelect = document.getElementById('vendor-category');\r\n        const selectedCategory = categorySelect.value;\r\n\r\n        // If \"other\" was selected but no new category was added\r\n        if (selectedCategory === 'other') {\r\n            showToast('Please add a new category or select an existing one', 'error');\r\n            return;\r\n        }\r\n\r\n         const vendorData = {\r\n            name: document.getElementById('vendor-name').value.trim(),\r\n            category: selectedCategory,\r\n            contact: document.getElementById('vendor-contact').value.trim(),\r\n            phone: document.getElementById('vendor-phone').value.trim(),\r\n            email: document.getElementById('vendor-email').value.trim(),\r\n            address: document.getElementById('vendor-address').value.trim(),\r\n            notes: document.getElementById('vendor-notes').value.trim(),\r\n            status: 'active'\r\n        };\r\n\r\n        \r\n\r\n        // Validate required fields - now only name is required\r\n        if (!vendorData.name) {\r\n            showToast('Vendor name is required', 'error');\r\n            return;\r\n        }\r\n\r\n        // Validate email format if provided\r\n        if (vendorData.email && !this.isValidEmail(vendorData.email)) {\r\n            showToast('Please enter a valid email address', 'error');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            let result;\r\n            if (this.currentVendor) {\r\n                result = this.storage.updateVendor(this.currentVendor.id, vendorData);\r\n                showToast('Vendor updated successfully', 'success');\r\n            } else {\r\n                result = this.storage.addVendor(vendorData);\r\n                showToast('Vendor added successfully', 'success');\r\n            }\r\n\r\n            if (result) {\r\n                window.closeModal();\r\n                this.renderVendorsTable();\r\n            } else {\r\n                showToast('Failed to save vendor', 'error');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error saving vendor:', error);\r\n            showToast('Failed to save vendor', 'error');\r\n        }\r\n    }\r\n\r\n    viewVendor(vendorId) {\r\n        const vendor = this.storage.getVendorById(vendorId);\r\n        if (!vendor) {\r\n            showToast('Vendor not found', 'error');\r\n            return;\r\n        }\r\n\r\n        // Get vendor transactions\r\n        const transactions = this.storage.getTransactionsByVendor(vendorId);\r\n        \r\n        // Create view modal content\r\n        const modalContent = `\r\n            <div class=\"vendor-details\">\r\n                <div class=\"vendor-header\">\r\n                    <h3>${vendor.name}</h3>\r\n                    <span class=\"status-badge ${vendor.status}\">${vendor.status}</span>\r\n                </div>\r\n                \r\n                <div class=\"vendor-info-grid\">\r\n                    <div class=\"info-item\">\r\n                        <label>Category:</label>\r\n                        <span>${this.getCategoryLabel(vendor.category)}</span>\r\n                    </div>\r\n                    \r\n                    <div class=\"info-item\">\r\n                        <label>Contact Person:</label>\r\n                        <span>${vendor.contact || 'N/A'}</span>\r\n                    </div>\r\n                    \r\n                    <div class=\"info-item\">\r\n                        <label>Phone:</label>\r\n                        <span>${vendor.phone || 'N/A'}</span>\r\n                    </div>\r\n                    \r\n                    <div class=\"info-item\">\r\n                        <label>Email:</label>\r\n                        <span>${vendor.email || 'N/A'}</span>\r\n                    </div>\r\n                    \r\n                    <div class=\"info-item\">\r\n                        <label>Total Spent:</label>\r\n                        <span><strong>${formatCurrency(vendor.totalSpent || 0)}</strong></span>\r\n                    </div>\r\n                    \r\n                    <div class=\"info-item\">\r\n                        <label>Transactions:</label>\r\n                        <span>${transactions.length} transactions</span>\r\n                    </div>\r\n                </div>\r\n                \r\n                ${vendor.address ? `\r\n                    <div class=\"info-item\">\r\n                        <label>Address:</label>\r\n                        <p>${vendor.address}</p>\r\n                    </div>\r\n                ` : ''}\r\n                \r\n                ${vendor.notes ? `\r\n                    <div class=\"info-item\">\r\n                        <label>Notes:</label>\r\n                        <p>${vendor.notes}</p>\r\n                    </div>\r\n                ` : ''}\r\n                \r\n                <div class=\"vendor-actions\">\r\n                    <button class=\"btn btn-primary\" onclick=\"vendorManager.editVendor('${vendor.id}')\">\r\n                        <i class=\"fas fa-edit\"></i> Edit Vendor\r\n                    </button>\r\n                    <button class=\"btn btn-secondary\" onclick=\"closeModal()\">Close</button>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        // Show in a generic modal or create a custom one\r\n        this.showInfoModal('Vendor Details', modalContent);\r\n    }\r\n\r\n    editVendor(vendorId) {\r\n        const vendor = this.storage.getVendorById(vendorId);\r\n        if (!vendor) {\r\n            showToast('Vendor not found', 'error');\r\n            return;\r\n        }\r\n        \r\n        this.showVendorModal(vendor);\r\n    }\r\n\r\n    deleteVendor(vendorId) {\r\n        const vendor = this.storage.getVendorById(vendorId);\r\n        if (!vendor) {\r\n            showToast('Vendor not found', 'error');\r\n            return;\r\n        }\r\n\r\n        // Check if vendor has transactions\r\n        const transactions = this.storage.getTransactionsByVendor(vendorId);\r\n        \r\n        let confirmMessage = `Are you sure you want to delete \"${vendor.name}\"?`;\r\n        if (transactions.length > 0) {\r\n            confirmMessage += `\\n\\nThis vendor has ${transactions.length} transaction(s). Deleting the vendor will not affect existing transactions.`;\r\n        }\r\n\r\n        if (confirm(confirmMessage)) {\r\n            try {\r\n                this.storage.deleteVendor(vendorId);\r\n                showToast('Vendor deleted successfully', 'success');\r\n                this.renderVendorsTable();\r\n            } catch (error) {\r\n                console.error('Error deleting vendor:', error);\r\n                showToast('Failed to delete vendor', 'error');\r\n            }\r\n        }\r\n    }\r\n\r\n    formatCreditBalance(creditBalance) {\r\n        const amount = Math.abs(creditBalance);\r\n        const formattedAmount = formatCurrency(amount);\r\n        \r\n        if (creditBalance > 0) {\r\n            return `<div class=\"credit-positive\">\r\n                <strong>${formattedAmount}</strong>\r\n                <br><small class=\"credit-label\">Vendor owes you</small>\r\n            </div>`;\r\n        } else if (creditBalance < 0) {\r\n            return `<div class=\"credit-negative\">\r\n                <strong>${formattedAmount}</strong>\r\n                <br><small class=\"credit-label\">You owe vendor</small>\r\n            </div>`;\r\n        } else {\r\n            return `<div class=\"credit-zero\">\r\n                <strong>‚Çπ0.00</strong>\r\n                <br><small class=\"credit-label\">All settled</small>\r\n            </div>`;\r\n        }\r\n    }\r\n\r\n    calculateVendorAmounts(vendor) {\r\n        const transactions = this.storage.getTransactionsByVendor(vendor.id);\r\n        \r\n        let youGive = 0; // Money paid to vendor (expenses)\r\n        let youGot = 0;  // Money received from vendor (income)\r\n        let outstandingCredit = 0;\r\n        \r\n        transactions.forEach(transaction => {\r\n            const amount = parseFloat(transaction.amount) || 0;\r\n            const outstandingAmount = parseFloat(transaction.outstandingAmount) || 0;\r\n            \r\n            if (transaction.type === 'expense') {\r\n                youGive += amount;\r\n                // If there's outstanding amount on an expense, it means we owe the vendor\r\n                if (outstandingAmount > 0) {\r\n                    outstandingCredit += outstandingAmount;\r\n                }\r\n            } else if (transaction.type === 'income') {\r\n                youGot += amount;\r\n                // If there's outstanding amount on income, it means vendor owes us\r\n                if (outstandingAmount > 0) {\r\n                    outstandingCredit -= outstandingAmount;\r\n                }\r\n            }\r\n        });\r\n        \r\n        // Credit balance: positive means vendor owes us, negative means we owe vendor\r\n        const creditBalance = outstandingCredit;\r\n        \r\n        return {\r\n            youGive,\r\n            youGot,\r\n            creditBalance,\r\n            netBalance: youGot - youGive,\r\n            transactionCount: transactions.length\r\n        };\r\n    }\r\n\r\n    getCategoryLabel(category) {\r\n        if (!category) return 'Uncategorized'; // Handle empty category\r\n        const categories = {\r\n            // Construction\r\n            'materials': 'Materials Supplier',\r\n            'cement': 'Cement Supplier',\r\n            'steel': 'Steel Supplier',\r\n            'sand': 'Sand & Aggregate',\r\n            'bricks': 'Bricks & Blocks',\r\n            'tiles': 'Tiles & Flooring',\r\n            'marble': 'Marble Supplier',\r\n            'glass': 'Glass Supplier',\r\n            'hardware': 'Hardware Store',\r\n            'equipment': 'Equipment Rental',\r\n            'plumber': 'Plumber',\r\n            'electrician': 'Electrician',\r\n            'carpenter': 'Carpenter',\r\n            'painter': 'Painter',\r\n            'labor': 'Labor Contractor',\r\n            'architect': 'Architect',\r\n            'engineer': 'Engineer',\r\n            'subcontractor': 'Subcontractor',\r\n            \r\n            // Retail & Commerce\r\n            'wholesale': 'Wholesale Supplier',\r\n            'manufacturer': 'Manufacturer',\r\n            'distributor': 'Distributor',\r\n            'packaging': 'Packaging Supplier',\r\n            'printing': 'Printing Services',\r\n            'marketing': 'Marketing Agency',\r\n            'pos-vendor': 'POS System Vendor',\r\n            \r\n            // Services\r\n            'consulting': 'Consulting Services',\r\n            'legal': 'Legal Services',\r\n            'accounting': 'Accounting Services',\r\n            'cleaning': 'Cleaning Services',\r\n            'security': 'Security Services',\r\n            'maintenance': 'Maintenance Services',\r\n            'it-services': 'IT Services',\r\n            'training': 'Training Services',\r\n            \r\n            // Transportation & Logistics\r\n            'transport': 'Transport Services',\r\n            'logistics': 'Logistics Provider',\r\n            'courier': 'Courier Services',\r\n            'fuel': 'Fuel Supplier',\r\n            \r\n            // Utilities\r\n            'electricity': 'Electricity Provider',\r\n            'water': 'Water Supplier',\r\n            'internet': 'Internet Provider',\r\n            'telecom': 'Telecom Services',\r\n            'waste': 'Waste Management',\r\n            \r\n            // Food & Hospitality\r\n            'food-supplier': 'Food Supplier',\r\n            'beverage': 'Beverage Supplier',\r\n            'catering': 'Catering Services',\r\n            'kitchen-equipment': 'Kitchen Equipment',\r\n            \r\n            // General\r\n            'insurance': 'Insurance Provider',\r\n            'bank': 'Banking Services',\r\n            'office-supplies': 'Office Supplies',\r\n            'other': 'Other'\r\n        };\r\n        \r\n        // Check for custom categories from settings\r\n        if (window.app && window.app.settings) {\r\n            const settings = window.app.settings.loadSettings();\r\n            if (settings.customCategories && settings.customCategories.vendor) {\r\n                settings.customCategories.vendor.forEach(customCat => {\r\n                    categories[customCat.toLowerCase()] = customCat;\r\n                });\r\n            }\r\n        }\r\n        \r\n        return categories[category] || category;\r\n    }\r\n\r\n    isValidEmail(email) {\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        return emailRegex.test(email);\r\n    }\r\n\r\n    showInfoModal(title, content) {\r\n        // Create or update info modal\r\n        let modal = document.getElementById('info-modal');\r\n        if (!modal) {\r\n            modal = document.createElement('div');\r\n            modal.id = 'info-modal';\r\n            modal.className = 'modal';\r\n            modal.innerHTML = `\r\n                <div class=\"modal-header\">\r\n                    <h3 id=\"info-modal-title\"></h3>\r\n                    <button class=\"btn-close\" onclick=\"closeModal()\">&times;</button>\r\n                </div>\r\n                <div class=\"modal-body\" id=\"info-modal-body\"></div>\r\n            `;\r\n            document.getElementById('modal-overlay').appendChild(modal);\r\n        }\r\n\r\n        document.getElementById('info-modal-title').textContent = title;\r\n        document.getElementById('info-modal-body').innerHTML = content;\r\n        \r\n        window.showModal('info-modal');\r\n    }\r\n\r\n    // Export vendors to CSV\r\n    exportVendorsToCSV() {\r\n        const vendors = this.storage.getVendors();\r\n        const headers = ['Name', 'Category', 'Contact', 'Phone', 'Email', 'Address', 'Status', 'Total Spent', 'Created Date'];\r\n        \r\n        const csvContent = [\r\n            headers.join(','),\r\n            ...vendors.map(vendor => [\r\n                `\"${vendor.name}\"`,\r\n                `\"${vendor.category}\"`,\r\n                `\"${vendor.contact || ''}\"`,\r\n                `\"${vendor.phone || ''}\"`,\r\n                `\"${vendor.email || ''}\"`,\r\n                `\"${vendor.address || ''}\"`,\r\n                `\"${vendor.status}\"`,\r\n                vendor.totalSpent || 0,\r\n                `\"${formatDate(vendor.createdAt)}\"`\r\n            ].join(','))\r\n        ].join('\\n');\r\n\r\n        const blob = new Blob([csvContent], { type: 'text/csv' });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = `vendors-${new Date().toISOString().split('T')[0]}.csv`;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n        URL.revokeObjectURL(url);\r\n\r\n        showToast('Vendors exported to CSV', 'success');\r\n    }\r\n}\r\n\r\n\r\n// Global function for contact picker in vendor form\r\nwindow.pickContactForVendor = async function() {\r\n    try {\r\n        const { pickContact } = await import(\"./utils.js\");\r\n        const contact = await pickContact();\r\n        \r\n        if (contact) {\r\n            // Fill name and phone fields\r\n            const nameField = document.getElementById(\"vendor-name\");\r\n            const phoneField = document.getElementById(\"vendor-phone\");\r\n            \r\n            if (contact.name && nameField) {\r\n                nameField.value = contact.name;\r\n            }\r\n            if (contact.phone && phoneField) {\r\n                phoneField.value = contact.phone;\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error picking contact:\", error);\r\n        const { showToast } = await import(\"./utils.js\");\r\n        showToast(\"Contact picker not available\", \"warning\");\r\n    }\r\n};\r\n","size_bytes":25872},"styles/components.css":{"content":"/* Quick Action Buttons */\n.quick-action-buttons {\n    display: flex;\n    gap: var(--spacing-sm);\n    align-items: center;\n}\n\n.quick-action-buttons .btn {\n    margin: 0;\n}\n\n/* Dashboard Components */\n.dashboard-controls {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-md);\n    margin-bottom: var(--spacing-lg);\n}\n\n.dashboard-controls select {\n    padding: var(--spacing-sm) var(--spacing-md);\n    border: 1px solid var(--gray-300);\n    border-radius: var(--border-radius);\n    background: var(--white);\n    color: var(--gray-700);\n    font-size: var(--font-size-sm);\n    min-width: 120px;\n    transition: var(--transition);\n}\n\n.dashboard-controls select:focus {\n    outline: none;\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 3px var(--primary-light);\n}\n\n.dashboard-controls label {\n    font-size: var(--font-size-sm);\n    font-weight: 500;\n    color: var(--gray-700);\n}\n\n\n.date-filter {\n    position: relative;\n    min-width: 180px !important;\n}\n\n.date-filter::after {\n    content: \"‚ñº\" !important;\n    position: absolute;\n    right: var(--spacing-sm) !important;\n    top: 50%;\n    transform: translateY(-50%) !important;\n    font-size: var(--font-size-xs);\n    color: var(--gray-400) !important;\n    pointer-events: none !important;\n}\n\nselect#dashboard-period {\n    width: 100%;\n    padding: var(--spacing-sm) var(--spacing-md);\n    padding-right: var(--spacing-xl); /* Extra space for dropdown arrow */\n    border: var(--border-width) solid var(--gray-300);\n    border-radius: var(--border-radius);\n    font-size: var(--font-size-sm);\n    font-family: var(--font-family);\n    color: var(--gray-700);\n    background-color: var(--white);\n    appearance: none; /* Remove default styling */\n    cursor: pointer;\n    transition: var(--transition) !important;\n}\n\n#dashboard-period:hover {\n    border-color: var(--gray-400);\n}\n\n#dashboard-period:focus {\n    outline: none;\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 3px var(--primary-light);\n}\n\n/* Transaction Summary */\n.transaction-summary {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: var(--spacing-md);\n    margin-bottom: var(--spacing-lg);\n    padding: var(--spacing-lg);\n    background: var(--gray-50);\n    border-radius: var(--border-radius-lg);\n    border: 1px solid var(--gray-200);\n}\n\n.summary-card {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: var(--spacing-md);\n    background: var(--white);\n    border-radius: var(--border-radius);\n    box-shadow: var(--shadow-sm);\n    transition: var(--transition);\n}\n\n.summary-card:hover {\n    transform: translateY(-1px);\n    box-shadow: var(--shadow);\n}\n\n.summary-label {\n    font-size: var(--font-size-sm);\n    font-weight: 500;\n    color: var(--gray-600);\n    margin-bottom: var(--spacing-xs);\n    text-align: center;\n}\n\n.summary-value {\n    font-size: var(--font-size-lg);\n    font-weight: 700;\n    color: var(--gray-900);\n}\n\n.summary-value.income {\n    color: var(--success-color);\n}\n\n.summary-value.expense {\n    color: var(--error-color);\n}\n\n.summary-value.highlight {\n    color: var(--primary-color);\n}\n\n/* Quick Add Buttons for Transaction Form */\n.input-with-quick-add {\n    position: relative;\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-xs);\n}\n\n.input-with-quick-add select {\n    flex: 1;\n}\n\n.btn-quick-add {\n    padding: var(--spacing-xs);\n    background: var(--primary-color);\n    color: var(--white);\n    border: none;\n    border-radius: var(--border-radius);\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 32px;\n    height: 32px;\n    font-size: var(--font-size-sm);\n    transition: var(--transition);\n    flex-shrink: 0;\n}\n\n.btn-quick-add:hover {\n    background: var(--primary-dark);\n    transform: translateY(-1px);\n    box-shadow: var(--shadow-sm);\n}\n\n.btn-quick-add:active {\n    transform: translateY(0);\n}\n\n.btn-contact-picker {\n    padding: var(--spacing-xs) var(--spacing-sm);\n    background: var(--success-color);\n    color: var(--white);\n    border: none;\n    border-radius: var(--border-radius);\n    cursor: pointer;\n    font-size: var(--font-size-xs);\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-xs);\n    transition: var(--transition);\n    margin-top: var(--spacing-xs);\n}\n\n.btn-contact-picker:hover {\n    background: var(--success-dark);\n    transform: translateY(-1px);\n}\n\n.btn-contact-picker:disabled {\n    background: var(--gray-400);\n    cursor: not-allowed;\n    transform: none;\n}\n\n.contact-picker-wrapper {\n    display: flex;\n    flex-direction: column;\n    gap: var(--spacing-xs);\n}\n\n/* Transaction Table Enhancements */\n.category-badge {\n    display: inline-block;\n    padding: 4px 8px;\n    border-radius: 12px;\n    font-size: 11px;\n    font-weight: 500;\n    text-transform: uppercase;\n    background: var(--gray-100);\n    color: var(--gray-700);\n}\n.badge-category.uncategorized {\n    background-color: #e5e7eb;\n    color: #6b7280;\n    padding: 5px;\n    border-radius: 5px;\n}\n.payment-method {\n    display: inline-block;\n    padding: 3px 8px;\n    border-radius: 8px;\n    font-size: 12px;\n    font-weight: 500;\n    background: var(--primary-light);\n    color: var(--primary-color);\n}\n\n.category-badge[data-category=\"materials\"] { background: #ddd6fe; color: #6d28d9; }\n.category-badge[data-category=\"labor\"] { background: #fef3c7; color: #d97706; }\n.category-badge[data-category=\"equipment\"] { background: #d1fae5; color: #065f46; }\n.category-badge[data-category=\"transport\"] { background: #dbeafe; color: #1d4ed8; }\n.category-badge[data-category=\"utilities\"] { background: #fecaca; color: #dc2626; }\n.category-badge[data-category=\"permits\"] { background: #f3e8ff; color: #7c3aed; }\n.category-badge[data-category=\"payment\"] { background: #d1fae5; color: #059669; }\n\n/* Settings Modal Styles */\n.settings-modal {\n    max-width: 800px;\n    max-height: 95vh;\n    overflow-y: auto;\n}\n.settings-modal .modal-header {\n    justify-content: space-between;\n}\n\n.settings-content {\n    padding: 0 !important;\n    max-height: 65vh !important;\n}\n.settings-content .modal-actions {\n    padding-bottom: 20px;\n    padding-right: 20px;\n    margin: 0 !important;\n}\n\n.settings-tabs {\n    display: flex;\n    border-bottom: 1px solid var(--gray-200);\n    /* margin-bottom: var(--spacing-lg); */\n}\n\n.tab-btn {\n    flex: 1;\n    padding: var(--spacing-md);\n    background: none;\n    border: none;\n    cursor: pointer;\n    font-weight: 500;\n    color: var(--gray-600);\n    transition: var(--transition);\n    border-bottom: 2px solid transparent;\n}\n\n.tab-btn.active {\n    color: var(--primary-color);\n    border-bottom-color: var(--primary-color);\n    background: var(--primary-light);\n}\n\n.tab-content {\n    display: none;\n    padding: var(--spacing-lg);\n}\n\n.tab-content.active {\n    display: block;\n}\n\n.color-picker-group {\n    display: flex;\n    gap: var(--spacing-sm);\n    align-items: center;\n}\n\n.color-picker-group input[type=\"color\"] {\n    width: 50px;\n    height: 40px;\n    border: 1px solid var(--gray-300);\n    border-radius: var(--border-radius);\n    cursor: pointer;\n}\n\n.color-picker-group input[type=\"text\"] {\n    flex: 1;\n}\n\n.color-presets {\n    display: flex;\n    gap: var(--spacing-xs);\n    margin-top: var(--spacing-sm);\n}\n\n.color-preset {\n    width: 30px;\n    height: 30px;\n    border: 2px solid var(--gray-300);\n    border-radius: var(--border-radius);\n    cursor: pointer;\n    transition: var(--transition);\n}\n\n.color-preset:hover {\n    transform: scale(1.1);\n    border-color: var(--gray-900);\n}\n\n.category-manager {\n    margin-bottom: var(--spacing-lg);\n}\n\n.add-category {\n    display: flex;\n    gap: var(--spacing-sm);\n    margin-bottom: var(--spacing-md);\n}\n\n.add-category input {\n    flex: 1;\n    padding: var(--spacing-sm);\n    border-radius: 10px;\n    border: 1px solid var(--gray-300);\n}\n\n.add-category button {\n    background: var(--primary-color);\n    color: white;\n    border: none;\n    padding: var(--spacing-sm) var(--spacing-md);\n    border-radius: var(--border-radius);\n    cursor: pointer;\n}\n\n.category-list {\n    display: flex;\n    flex-wrap: wrap;\n    gap: var(--spacing-xs);\n}\n\n.category-item {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-xs);\n    background: var(--gray-100);\n    padding: var(--spacing-xs) var(--spacing-sm);\n    border-radius: var(--border-radius);\n    font-size: var(--font-size-sm);\n}\n\n.category-item button {\n    background: var(--error-color);\n    color: white;\n    border: none;\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    cursor: pointer;\n    font-size: 12px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n/* Phone Input Group */\n.phone-input-group {\n    display: flex;\n    gap: var(--spacing-xs);\n}\n\n.phone-input-group input {\n    flex: 1;\n}\n\n.btn-contact-picker {\n    background: var(--primary-color);\n    color: white;\n    border: none;\n    padding: var(--spacing-sm);\n    border-radius: var(--border-radius);\n    cursor: pointer;\n    transition: var(--transition);\n    min-width: 40px;\n}\n\n.btn-contact-picker:hover {\n    background: var(--primary-dark);\n}\n\n/* Business Type Adaptations */\n.business-retail .nav-btn[data-section=\"projects\"] .fas {\n    content: \"\\f507\"; /* fa-chart-pie */\n}\n\n.business-retail .nav-btn[data-section=\"projects\"]::after {\n    content: \"Sales\";\n}\n\n.business-restaurant .nav-btn[data-section=\"vendors\"]::after {\n    content: \"Suppliers\";\n}\n\n.business-manufacturing .nav-btn[data-section=\"projects\"]::after {\n    content: \"Orders\";\n}\n\n/* Dashboard Components */\n.dashboard-grid {\n    display: grid;\n    gap: var(--spacing-xl);\n    grid-template-columns: 1fr;\n}\n\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\n    gap: var(--spacing-lg);\n}\n\n.stat-card {\n    background: var(--white);\n    border-radius: var(--border-radius-lg);\n    padding: var(--spacing-lg);\n    box-shadow: var(--shadow);\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-md);\n    transition: var(--transition);\n}\n\n.stat-card:hover {\n    transform: translateY(-2px);\n    box-shadow: var(--shadow-lg);\n}\n\n.stat-icon {\n    width: 48px;\n    height: 48px;\n    border-radius: var(--border-radius);\n    background: var(--primary-light);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: var(--primary-color);\n    font-size: var(--font-size-lg);\n}\n\n.stat-content h3 {\n    font-size: var(--font-size-2xl);\n    font-weight: 700;\n    color: var(--gray-900);\n    margin: 0;\n}\n\n.stat-content p {\n    font-size: var(--font-size-sm);\n    color: var(--gray-600);\n    margin: 0;\n}\n\n/* Charts */\n.charts-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\n    gap: var(--spacing-lg);\n    margin-top: var(--spacing-xl);\n}\n\n.chart-card {\n    background: var(--white);\n    border-radius: var(--border-radius-lg);\n    padding: var(--spacing-lg);\n    box-shadow: var(--shadow);\n}\n\n.chart-card h3 {\n    font-size: var(--font-size-lg);\n    font-weight: 600;\n    color: var(--gray-900);\n    margin: 0 0 var(--spacing-md) 0;\n}\n\n.chart-card canvas {\n    max-height: 300px;\n}\n\n/* Recent Activities */\n.recent-activities {\n    background: var(--white);\n    border-radius: var(--border-radius-lg);\n    padding: var(--spacing-lg);\n    box-shadow: var(--shadow);\n    margin-top: var(--spacing-xl);\n}\n\n.recent-activities h3 {\n    font-size: var(--font-size-lg);\n    font-weight: 600;\n    color: var(--gray-900);\n    margin: 0 0 var(--spacing-md) 0;\n}\n\n.activity-list {\n    display: flex;\n    flex-direction: column;\n    gap: var(--spacing-sm);\n}\n\n.activity-item {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-md);\n    padding: var(--spacing-sm) 0;\n    border-bottom: 1px solid var(--gray-100);\n}\n\n.activity-item:last-child {\n    border-bottom: none;\n}\n\n.activity-icon {\n    width: 32px;\n    height: 32px;\n    border-radius: 50%;\n    background: var(--primary-light);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: var(--primary-color);\n    font-size: var(--font-size-sm);\n}\n\n.activity-content {\n    flex: 1;\n}\n\n.activity-content p {\n    margin: 0;\n    font-size: var(--font-size-sm);\n    color: var(--gray-800);\n}\n\n.activity-time {\n    font-size: var(--font-size-xs);\n    color: var(--gray-500);\n}\n\n/* Data Tables */\n.data-table-container {\n    background: var(--white);\n    border-radius: var(--border-radius-lg);\n    box-shadow: var(--shadow);\n    overflow: hidden;\n}\n\n.data-table {\n    width: 100%;\n    border-collapse: collapse;\n    font-size: var(--font-size-sm);\n}\n\n.data-table th {\n    background: var(--gray-50);\n    color: var(--gray-700);\n    font-weight: 600;\n    text-align: left;\n    padding: var(--spacing-md);\n    border-bottom: var(--border-width) solid var(--gray-200);\n    white-space: nowrap;\n    cursor: pointer;\n    user-select: none;\n}\n\n.data-table th:hover {\n    background: var(--gray-100);\n}\n\n.data-table th i {\n    margin-left: var(--spacing-xs);\n    opacity: 0.5;\n}\n\n.data-table td {\n    padding: var(--spacing-md);\n    border-bottom: var(--border-width) solid var(--gray-100);\n    vertical-align: middle;\n}\n\n.data-table tbody tr:hover {\n    background: var(--gray-50);\n}\n\n.data-table tbody tr:last-child td {\n    border-bottom: none;\n}\n\n/* Project Cards */\n.projects-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n    gap: var(--spacing-lg);\n}\n\n.project-card {\n    background: var(--white);\n    border-radius: var(--border-radius-lg);\n    padding: var(--spacing-lg);\n    box-shadow: var(--shadow);\n    transition: var(--transition);\n}\n\n.project-card:hover {\n    transform: translateY(-2px);\n    box-shadow: var(--shadow-lg);\n}\n\n.project-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    margin-bottom: var(--spacing-md);\n}\n\n.project-header h3 {\n    font-size: var(--font-size-lg);\n    font-weight: 600;\n    color: var(--gray-900);\n    margin: 0;\n}\n\n.project-meta {\n    display: flex;\n    flex-direction: column;\n    gap: var(--spacing-xs);\n    margin-bottom: var(--spacing-md);\n}\n\n.project-meta-item {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-xs);\n    font-size: var(--font-size-sm);\n    color: var(--gray-600);\n}\n\n.project-meta-item i {\n    width: 16px;\n    color: var(--gray-400);\n}\n\n.project-progress {\n    margin-bottom: var(--spacing-md);\n}\n\n.project-progress-label {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: var(--spacing-xs);\n    font-size: var(--font-size-sm);\n    color: var(--gray-700);\n}\n\n.progress-bar {\n    width: 100%;\n    height: 8px;\n    background: var(--gray-200);\n    border-radius: 4px;\n    overflow: hidden;\n}\n\n.progress-fill {\n    height: 100%;\n    background: var(--primary-color);\n    transition: width 0.3s ease;\n}\n\n.project-actions {\n    display: flex;\n    gap: var(--spacing-sm);\n    margin-top: 20px !important;\n}\n\n/* Calculators */\n.calculators-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\n    gap: var(--spacing-lg);\n}\n\n.calculator-card {\n    background: var(--white);\n    border-radius: var(--border-radius-lg);\n    padding: var(--spacing-lg);\n    box-shadow: var(--shadow);\n}\n\n.calculator-card h3 {\n    font-size: var(--font-size-lg);\n    font-weight: 600;\n    color: var(--gray-900);\n    margin: 0 0 var(--spacing-lg) 0;\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-sm);\n}\n\n.calculator-card h3 i {\n    color: var(--primary-color);\n}\n\n.calculator-content {\n    display: flex;\n    flex-direction: column;\n    gap: var(--spacing-md);\n}\n\n.calc-input-group {\n    display: flex;\n    flex-direction: column;\n    gap: var(--spacing-xs);\n}\n\n.calc-input-group label {\n    font-size: var(--font-size-sm);\n    font-weight: 500;\n    color: var(--gray-700);\n}\n\n.calc-input-group input,\n.calc-input-group select {\n    padding: var(--spacing-sm);\n    border: var(--border-width) solid var(--gray-300);\n    border-radius: var(--border-radius);\n    font-size: var(--font-size-sm);\n    background: var(--white);\n    transition: var(--transition);\n}\n\n.calc-input-group input:focus,\n.calc-input-group select:focus {\n    outline: none;\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 3px var(--primary-light);\n}\n\n.calc-result {\n    padding: var(--spacing-md);\n    background: var(--gray-50);\n    border-radius: var(--border-radius);\n    border-left: 4px solid var(--primary-color);\n    margin-top: var(--spacing-md);\n    display: none;\n}\n\n.calc-result.show {\n    display: block;\n}\n\n/* Payment Status Styles */\n.payment-status {\n    display: inline-flex;\n    align-items: center;\n    gap: 4px;\n    padding: 4px 8px;\n    border-radius: 4px;\n    font-size: 10px;\n    font-weight: 500;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n}\n\n.payment-status.paid {\n    background: #d4edda;\n    color: #155724;\n}\n\n.payment-status.credit {\n    background: #f8d7da;\n    color: #721c24;\n}\n\n.payment-status.partial {\n    background: #fff3cd;\n    color: #856404;\n}\n\n.action-btn.pay {\n    background: #28a745;\n    color: white;\n}\n\n.action-btn.pay:hover {\n    background: #218838;\n}\n\n/* BG COLOR FOR TRANSACTION ROWS */\n.bg-success {\n    background-color: #f6fff8 !important;\n}\n.bg-danger {\n    background-color: #fff4f4 !important;\n}\n/* Summary Card Credit Style */\n.summary-value.credit {\n    color: #dc3545;\n    font-weight: 600;\n}\n\n.calc-result h4 {\n    font-size: var(--font-size-base);\n    font-weight: 600;\n    color: var(--gray-900);\n    margin: 0 0 var(--spacing-sm) 0;\n}\n\n.calc-result .result-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: var(--spacing-xs) 0;\n    border-bottom: 1px solid var(--gray-200);\n    font-size: var(--font-size-sm);\n}\n\n.calc-result .result-item:last-child {\n    border-bottom: none;\n    font-weight: 600;\n    color: var(--primary-color);\n}\n\n/* Modals */\n.modal-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 1000;\n    opacity: 0;\n    visibility: hidden;\n    transition: var(--transition);\n}\n\n/* Quick Add Modals - Higher z-index to appear above main modals */\n#quick-vendor-modal,\n#quick-project-modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.6);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 1100;\n    opacity: 0;\n    visibility: hidden;\n    transition: all 0.3s ease;\n}\n\n#quick-vendor-modal.show,\n#quick-project-modal.show {\n    opacity: 1;\n    visibility: visible;\n}\n\n.modal-overlay.show {\n    opacity: 1;\n    visibility: visible;\n}\n\n.modal {\n    background: var(--white);\n    border-radius: var(--border-radius-lg);\n    box-shadow: var(--shadow-lg);\n    width: 90%;\n    max-width: 600px;\n    max-height: 90vh;\n    overflow: hidden;\n    transform: scale(0.9);\n    transition: var(--transition);\n}\n\n.modal-overlay.show .modal {\n    transform: scale(1);\n}\n\n.modal-header {\n    display: flex;\n    justify-content: space-between;\n    gap: 15px;\n    align-items: center;\n    padding: var(--spacing-md);\n}\n\n.modal-header h3 {\n    font-size: var(--font-size-lg);\n    font-weight: 600;\n    color: var(--gray-900);\n    margin: 0;\n}\n\n.btn-close {\n    background: none;\n    border: none;\n    font-size: var(--font-size-xl);\n    color: var(--gray-400);\n    cursor: pointer;\n    padding: var(--spacing-xs);\n    transition: var(--transition);\n}\n\n.btn-close:hover {\n    color: var(--gray-600);\n}\n\n.modal-body {\n    padding: var(--spacing-lg);\n    max-height: 85vh;\n    overflow-y: auto;\n}\n\n.form-group {\n    display: flex;\n    flex-direction: column;\n    gap: var(--spacing-xs);\n    margin-bottom: var(--spacing-md);\n}\n\n.form-row {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: var(--spacing-md);\n}\n\n.form-group label {\n    font-size: var(--font-size-sm);\n    font-weight: 500;\n    color: var(--gray-700);\n}\n\n.form-group input,\n.form-group select,\n.form-group textarea {\n    padding: var(--spacing-sm);\n    border: var(--border-width) solid var(--gray-300);\n    border-radius: var(--border-radius);\n    font-size: var(--font-size-sm);\n    font-family: inherit;\n    transition: var(--transition);\n}\n\n.form-group input:focus,\n.form-group select:focus,\n.form-group textarea:focus {\n    outline: none;\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 3px var(--primary-light);\n}\n\n.form-group textarea {\n    resize: vertical;\n    min-height: 80px;\n}\n\n.modal-actions {\n    display: flex;\n    justify-content: flex-end;\n    gap: var(--spacing-sm);\n    margin-top: var(--spacing-lg);\n    padding-top: var(--spacing-md);\n    padding-bottom: var(--spacing-md);\n    border-top: var(--border-width) solid var(--gray-200);\n}\n\n/* Toast Notifications */\n.toast-container {\n    position: fixed;\n    top: var(--spacing-lg);\n    right: var(--spacing-lg);\n    z-index: 9999;\n    display: flex;\n    flex-direction: column;\n    gap: var(--spacing-sm);\n}\n\n.toast {\n    background: var(--white);\n    border-radius: var(--border-radius);\n    padding: var(--spacing-md);\n    box-shadow: var(--shadow-lg);\n    border-left: 4px solid var(--primary-color);\n    min-width: 300px;\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-sm);\n    transform: translateX(100%);\n    transition: transform 0.3s ease;\n}\n\n.toast.show {\n    transform: translateX(0);\n}\n\n.toast.success {\n    border-left-color: var(--success);\n}\n\n.toast.error {\n    border-left-color: var(--error);\n}\n\n.toast.warning {\n    border-left-color: var(--warning);\n}\n\n.toast-icon {\n    color: var(--primary-color);\n}\n\n.toast.success .toast-icon {\n    color: var(--success);\n}\n\n.toast.error .toast-icon {\n    color: var(--error);\n}\n\n.toast.warning .toast-icon {\n    color: var(--warning);\n}\n\n.toast-content {\n    flex: 1;\n}\n\n.toast-title {\n    font-size: var(--font-size-sm);\n    font-weight: 600;\n    color: var(--gray-900);\n    margin: 0;\n}\n\n.toast-message {\n    font-size: var(--font-size-xs);\n    color: var(--gray-600);\n    margin: 0;\n}\n\n.toast-close {\n    background: none;\n    border: none;\n    color: var(--gray-400);\n    cursor: pointer;\n    padding: var(--spacing-xs);\n}\n\n.toast-close:hover {\n    color: var(--gray-600);\n}\n\n/* Action Buttons */\n.action-buttons {\n    display: flex;\n    gap: var(--spacing-xs);\n    justify-content: flex-end;\n}\n\n.action-btn {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    width: 32px;\n    height: 32px;\n    border: none;\n    border-radius: var(--border-radius);\n    cursor: pointer;\n    transition: var(--transition);\n    font-size: var(--font-size-xs);\n}\n\n.action-btn.edit {\n    background: var(--info-light);\n    color: var(--info);\n}\n\n.action-btn.edit:hover {\n    background: var(--info);\n    color: var(--white);\n}\n\n.action-btn.delete {\n    background: var(--error-light);\n    color: var(--error);\n}\n\n.action-btn.delete:hover {\n    background: var(--error);\n    color: var(--white);\n}\n\n.action-btn.view {\n    background: var(--gray-100);\n    color: var(--gray-600);\n}\n\n.action-btn.view:hover {\n    background: var(--gray-300);\n    color: var(--gray-800);\n}\n\n/* Empty States */\n.empty-state {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    padding: var(--spacing-2xl);\n    text-align: center;\n    color: var(--gray-500);\n}\n\n.empty-state i {\n    font-size: 4rem;\n    margin-bottom: var(--spacing-lg);\n    opacity: 0.3;\n}\n\n.empty-state h3 {\n    font-size: var(--font-size-lg);\n    font-weight: 600;\n    color: var(--gray-700);\n    margin: 0 0 var(--spacing-sm) 0;\n}\n\n.empty-state p {\n    font-size: var(--font-size-sm);\n    margin: 0;\n}\n\n/* Authentication Styles */\n.user-section {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-sm);\n}\n\n.btn-login {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-xs);\n    padding: var(--spacing-sm) var(--spacing-md);\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);\n    color: var(--white);\n    border: none;\n    border-radius: var(--border-radius-lg);\n    font-size: var(--font-size-sm);\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n}\n\n.btn-login:hover {\n    background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary-color) 100%);\n    transform: translateY(-2px);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n}\n\n.user-profile {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-sm);\n    padding: var(--spacing-xs) var(--spacing-sm);\n    background: var(--white);\n    border: 1px solid var(--gray-200);\n    border-radius: var(--border-radius-lg);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.user-avatar {\n    width: 36px;\n    height: 36px;\n    border-radius: 50%;\n    object-fit: cover;\n    border: 2px solid var(--primary-light);\n}\n\n.user-name {\n    font-size: var(--font-size-sm);\n    font-weight: 600;\n    color: var(--gray-700);\n    max-width: 120px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.btn-logout {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 32px;\n    height: 32px;\n    background: var(--error-light);\n    color: var(--error);\n    border: none;\n    border-radius: var(--border-radius);\n    cursor: pointer;\n    transition: var(--transition);\n    font-size: var(--font-size-sm);\n}\n\n.btn-logout:hover {\n    background: var(--error);\n    color: var(--white);\n    transform: scale(1.05);\n}\n\n/* Enhanced Auth Modal Styles */\n#login-modal, \n#signup-modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: none;\n    align-items: center;\n    justify-content: center;\n    z-index: 1000;\n}\n#login-modal.show, \n#signup-modal.show {\n    display: flex;\n}\n\n.auth-modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: none;\n    align-items: center;\n    justify-content: center;\n    z-index: 1000;\n}\n.auth-modal .modal-header {\n    justify-content: left !important;\n}\n.auth-modal.show {\n    display: flex;\n}\n\n#login-modal .modal-content,\n#signup-modal .modal-content {\n    background: white;\n    border-radius: 8px;\n    max-width: 500px;\n    width: 90%;\n}\n\n#login-modal .modal-content,\n#signup-modal .modal-content {\n    max-width: 520px;\n    background: var(--white);\n    border-radius: 15px;\n    overflow: hidden;\n    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);\n    animation: modalSlideIn 0.3s ease-out;\n}\n\n@keyframes modalSlideIn {\n    from {\n        opacity: 0;\n        transform: translateY(-50px) scale(0.95);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0) scale(1);\n    }\n}\n\n#login-modal .modal-header,\n#signup-modal .modal-header {\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);\n    color: var(--white);\n    padding: var(--spacing-md);\n    text-align: center;\n    position: relative;\n}\n\n#login-modal .modal-header h2,\n#signup-modal .modal-header h2 {\n    margin: 0;\n    font-size: var(--font-size-xl);\n    font-weight: 700;\n    letter-spacing: 0.5px;\n}\n\n#login-modal .close-btn,\n#signup-modal .close-btn {\n    position: absolute;\n    top: var(--spacing-md);\n    right: var(--spacing-md);\n    background: rgba(255, 255, 255, 0.2);\n    color: var(--white);\n    border: none;\n    border-radius: 50%;\n    width: 32px;\n    height: 32px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    transition: var(--transition);\n    font-size: var(--font-size-lg);\n}\n\n#login-modal .close-btn:hover,\n#signup-modal .close-btn:hover {\n    background: rgba(255, 255, 255, 0.3);\n    transform: rotate(90deg);\n}\n\n#login-form,\n#signup-form {\n    padding: var(--spacing-xl);\n}\n\n#login-form .form-group,\n#signup-form .form-group {\n    margin-bottom: var(--spacing-lg);\n    position: relative;\n}\n\n#login-form .form-group label,\n#signup-form .form-group label {\n    display: block;\n    margin-bottom: var(--spacing-xs);\n    font-size: var(--font-size-xs);\n    font-weight: 600;\n    color: var(--gray-700);\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n}\n\n#login-form .form-group input,\n#signup-form .form-group input {\n    width: 100%;\n    padding: var(--spacing-md) var(--spacing-lg);\n    border: 2px solid var(--gray-200);\n    border-radius: var(--border-radius-lg);\n    font-size: var(--font-size-base);\n    font-family: inherit;\n    transition: all 0.3s ease;\n    background: var(--gray-50);\n    box-sizing: border-box;\n}\n\n#login-form .form-group input:focus,\n#signup-form .form-group input:focus {\n    outline: none;\n    border-color: var(--primary-color);\n    background: var(--white);\n    box-shadow: 0 0 0 4px var(--primary-light);\n    transform: translateY(-2px);\n}\n\n#login-form .form-group input::placeholder,\n#signup-form .form-group input::placeholder {\n    color: var(--gray-400);\n    font-style: italic;\n}\n\n#login-form .modal-actions,\n#signup-form .modal-actions {\n    display: flex;\n    gap: var(--spacing-md);\n    margin-top: var(--spacing-xl);\n    padding-top: 0;\n    border-top: none;\n}\n\n#login-form .modal-actions .btn,\n#signup-form .modal-actions .btn {\n    flex: 1;\n    padding: var(--spacing-md) var(--spacing-md);\n    border: none;\n    border-radius: var(--border-radius-lg);\n    font-size: 14px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n}\n\n#login-form .modal-actions .btn-primary,\n#signup-form .modal-actions .btn-primary {\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);\n    color: var(--white);\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n}\n\n#login-form .modal-actions .btn-primary:hover,\n#signup-form .modal-actions .btn-primary:hover {\n    background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary-color) 100%);\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);\n}\n\n#login-form .modal-actions .btn-secondary,\n#signup-form .modal-actions .btn-secondary {\n    background: var(--gray-100);\n    color: var(--gray-600);\n    border: 2px solid var(--gray-200);\n}\n\n#login-form .modal-actions .btn-secondary:hover,\n#signup-form .modal-actions .btn-secondary:hover {\n    background: var(--gray-200);\n    color: var(--gray-700);\n    transform: translateY(-2px);\n}\n\n.auth-switch {\n    text-align: center;\n    padding: var(--spacing-lg) var(--spacing-xl);\n    background: var(--gray-50);\n    border-top: 1px solid var(--gray-200);\n}\n\n.auth-switch p {\n    font-size: var(--font-size-sm);\n    color: var(--gray-600);\n    margin: 0;\n}\n\n.auth-switch a {\n    color: var(--primary-color);\n    text-decoration: none;\n    font-weight: 600;\n    transition: var(--transition);\n}\n\n.auth-switch a:hover {\n    color: var(--primary-dark);\n    text-decoration: underline;\n}\n\n/* Input validation styles */\n.form-group.error input {\n    border-color: var(--error);\n    background: var(--error-light);\n}\n\n.form-group.success input {\n    border-color: var(--success);\n    background: var(--success-light);\n}\n\n.form-group .error-message {\n    color: var(--error);\n    font-size: var(--font-size-xs);\n    margin-top: var(--spacing-xs);\n    display: none;\n}\n\n.form-group.error .error-message {\n    display: block;\n}\n\n/* Password strength indicator */\n.password-strength {\n    height: 3px;\n    background: white;\n    border-radius: 3px;\n    overflow: hidden;\n}\n\n.password-strength .strength-bar {\n    height: 100%;\n    width: 0%;\n    transition: all 0.3s ease;\n    border-radius: 2px;\n   \n}\n\n.password-strength .strength-bar.weak {\n    background: var(--error);\n    width: 33%;\n}\n\n.password-strength .strength-bar.medium {\n    background: var(--warning);\n    width: 66%;\n}\n\n.password-strength .strength-bar.strong {\n    background: var(--success);\n    width: 100%;\n}\n\n/* Analytics Grid */\n.analytics-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 1.5rem;\n    margin-bottom: 2rem;\n}\n\n.analytics-card {\n    background: white;\n    border-radius: 12px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\n    border: 1px solid #e5e7eb;\n    overflow: hidden;\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.analytics-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);\n}\n\n.analytics-card h3 {\n    padding: 1rem 1.5rem;\n    margin: 0;\n    background: linear-gradient(135deg, #F59E0B 0%, #D97706 100%);\n    color: white;\n    font-size: 1rem;\n    font-weight: 600;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.analytics-content {\n    padding: 1.5rem;\n}\n\n.metric-row {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0.75rem 0;\n    border-bottom: 1px solid #f3f4f6;\n}\n\n.metric-row:last-child {\n    border-bottom: none;\n    padding-bottom: 0;\n}\n\n.metric-label {\n    font-weight: 500;\n    color: #6b7280;\n    font-size: 0.9rem;\n}\n\n.metric-value {\n    font-weight: 600;\n    color: #111827;\n    font-size: 0.95rem;\n    text-align: right;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n    .analytics-grid {\n        grid-template-columns: 1fr;\n        gap: 1rem;\n    }\n    \n    .analytics-card h3 {\n        padding: 0.75rem 1rem;\n        font-size: 0.9rem;\n    }\n    \n    .analytics-content {\n        padding: 1rem;\n    }\n    \n    .metric-row {\n        padding: 0.5rem 0;\n    }\n    \n    .metric-label,\n    .metric-value {\n        font-size: 0.85rem;\n    }\n}\n\n\n/* Vendor Table Financial Styling */\n.you-give-amount {\n    color: #DC2626;\n    font-weight: 600;\n}\n\n.you-got-amount {\n    color: #059669;\n    font-weight: 600;\n}\n\n.credit-positive {\n    text-align: center;\n    padding: 8px;\n    background-color: #D1FAE5;\n    border-radius: 6px;\n    border-left: 4px solid #059669;\n}\n\n.credit-positive strong {\n    color: #059669;\n    font-weight: 700;\n}\n\n.credit-negative {\n    text-align: center;\n    padding: 8px;\n    background-color: #FEE2E2;\n    border-radius: 6px;\n    border-left: 4px solid #DC2626;\n}\n\n.credit-negative strong {\n    color: #DC2626;\n    font-weight: 700;\n}\n\n.credit-zero {\n    text-align: center;\n    padding: 8px;\n    background-color: #F3F4F6;\n    border-radius: 6px;\n    border-left: 4px solid #6B7280;\n}\n\n.credit-zero strong {\n    color: #6B7280;\n    font-weight: 700;\n}\n\n.credit-label {\n    font-size: 0.6rem;\n    font-weight: 500;\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n    opacity: 0.8;\n}\n","size_bytes":34851},"styles/firebase-auth.css":{"content":"/* Firebase Authentication UI Styles */\n\n/* Google Sign-in Button */\n.btn-google {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n    width: 100%;\n    padding: 0.75rem 1rem;\n    background: #ffffff;\n    color: #374151;\n    border: 1px solid #d1d5db;\n    border-radius: 0.5rem;\n    font-size: 0.875rem;\n    font-weight: 500;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    margin-bottom: 1rem;\n}\n\n.btn-google:hover {\n    background: #f9fafb;\n    border-color: #9ca3af;\n    transform: translateY(-1px);\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n}\n\n.btn-google:active {\n    transform: translateY(0);\n    box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.1);\n}\n\n.btn-google .fab {\n    color: #4285f4;\n    font-size: 1rem;\n}\n\n/* Auth Divider */\n.auth-divider {\n    display: flex;\n    align-items: center;\n    margin: 1.5rem 0;\n    position: relative;\n}\n\n.auth-divider::before {\n    content: '';\n    flex: 1;\n    height: 1px;\n    background: #e5e7eb;\n}\n\n.auth-divider::after {\n    content: '';\n    flex: 1;\n    height: 1px;\n    background: #e5e7eb;\n}\n\n.auth-divider span {\n    padding: 0 1rem;\n    color: #6b7280;\n    font-size: 0.875rem;\n    background: white;\n}\n\n/* Enhanced Form Validation */\n.form-group input.error {\n    border-color: #ef4444;\n    background-color: #fef2f2;\n}\n\n.form-group input.valid {\n    border-color: #10b981;\n    background-color: #f0fdf4;\n}\n\n.form-group input.error:focus {\n    border-color: #ef4444;\n    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);\n}\n\n.form-group input.valid:focus {\n    border-color: #10b981;\n    box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);\n}\n\n.field-error {\n    color: #ef4444;\n    font-size: 0.875rem;\n    margin-top: 0.25rem;\n    display: none;\n}\n\n/* Password Strength Indicator */\n.password-strength {\n    margin-top: 0.25rem;\n    height: 3px;\n    background: #e5e7eb;\n    border-radius: 2px;\n    overflow: hidden;\n}\n\n.strength-bar {\n    height: 100%;\n    width: 0%;\n    background: #ef4444;\n    transition: all 0.3s ease;\n    border-radius: 2px;\n}\n\n.strength-bar.weak {\n    width: 33%;\n    background: #ef4444;\n}\n\n.strength-bar.medium {\n    width: 66%;\n    background: #f59e0b;\n}\n\n.strength-bar.strong {\n    width: 100%;\n    background: #10b981;\n}\n\n/* Loading States */\n.btn:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n}\n\n.btn .fa-spinner {\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n}\n\n/* User Profile Display */\n.user-profile {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    padding: 0.5rem;\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 0.5rem;\n    cursor: pointer;\n    transition: all 0.2s ease;\n}\n\n.user-profile:hover {\n    background: rgba(255, 255, 255, 0.2);\n}\n\n.user-avatar {\n    width: 32px;\n    height: 32px;\n    border-radius: 50%;\n    object-fit: cover;\n    border: 2px solid rgba(255, 255, 255, 0.3);\n}\n\n.user-name {\n    color: white;\n    font-size: 0.875rem;\n    font-weight: 500;\n    max-width: 120px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .user-name {\n        display: none;\n    }\n    \n    .auth-modal .modal-content {\n        margin: 1rem;\n        max-width: calc(100% - 2rem);\n    }\n    \n    .btn-google {\n        font-size: 0.8rem;\n        padding: 0.625rem 0.75rem;\n    }\n}\n\n/* Dark Theme Support */\n@media (prefers-color-scheme: dark) {\n    .btn-google {\n        background: #374151;\n        color: #f9fafb;\n        border-color: #4b5563;\n    }\n    \n    .btn-google:hover {\n        background: #4b5563;\n        border-color: #6b7280;\n    }\n    \n    .auth-divider::before,\n    .auth-divider::after {\n        background: #4b5563;\n    }\n    \n    .auth-divider span {\n        color: #9ca3af;\n        background: #1f2937;\n    }\n    \n    .form-group input.error {\n        background-color: #1f1f23;\n    }\n    \n    .form-group input.valid {\n        background-color: #0f191a;\n    }\n}\n\n/* Offline Indicator */\n.offline-indicator {\n    position: fixed;\n    top: 1rem;\n    right: 1rem;\n    background: #f59e0b;\n    color: white;\n    padding: 0.5rem 1rem;\n    border-radius: 0.5rem;\n    font-size: 0.875rem;\n    z-index: 1000;\n    display: none;\n}\n\n.offline-indicator.show {\n    display: block;\n}\n\n/* Sync Status */\n.sync-status {\n    display: flex;\n    align-items: center;\n    gap: 0.25rem;\n    font-size: 0.75rem;\n    color: #6b7280;\n    margin-top: 0.5rem;\n}\n\n.sync-status.syncing {\n    color: #f59e0b;\n}\n\n.sync-status.synced {\n    color: #10b981;\n}\n\n.sync-status.error {\n    color: #ef4444;\n}\n\n.sync-status .fa {\n    font-size: 0.75rem;\n}","size_bytes":4691},"styles/main.css":{"content":":root {\n    /* Ruh Al-Bina Brand Colors */\n    --primary-color: #F59E0B;\n    --primary-dark: #D97706;\n    --primary-light: #FEF3C7;\n    --secondary-color: #1F2937;\n    --secondary-light: #374151;\n    \n    /* Neutral Colors */\n    --white: #FFFFFF;\n    --gray-50: #F9FAFB;\n    --gray-100: #F3F4F6;\n    --gray-200: #E5E7EB;\n    --gray-300: #D1D5DB;\n    --gray-400: #9CA3AF;\n    --gray-500: #6B7280;\n    --gray-600: #4B5563;\n    --gray-700: #374151;\n    --gray-800: #1F2937;\n    --gray-900: #111827;\n    \n    /* Status Colors */\n    --success: #10B981;\n    --success-light: #D1FAE5;\n    --warning: #F59E0B;\n    --warning-light: #FEF3C7;\n    --error: #EF4444;\n    --error-light: #FEE2E2;\n    --info: #3B82F6;\n    --info-light: #DBEAFE;\n    \n    /* Typography */\n    --font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n    --font-size-xs: 0.75rem;\n    --font-size-sm: 0.875rem;\n    --font-size-base: 1rem;\n    --font-size-lg: 1.125rem;\n    --font-size-xl: 1.25rem;\n    --font-size-2xl: 1.5rem;\n    --font-size-3xl: 1.875rem;\n    \n    /* Spacing */\n    --spacing-xs: 0.25rem;\n    --spacing-sm: 0.5rem;\n    --spacing-md: 1rem;\n    --spacing-lg: 1.5rem;\n    --spacing-xl: 2rem;\n    --spacing-2xl: 3rem;\n    \n    /* Borders */\n    --border-radius: 0.5rem;\n    --border-radius-lg: 1rem;\n    --border-width: 1px;\n    \n    /* Shadows */\n    --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n    --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n    --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n    \n    /* Transitions */\n    --transition: all 0.2s ease-in-out;\n}\n\n/* Reset and Base Styles */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    font-size: 16px;\n    scroll-behavior: smooth;\n}\n\nbody {\n    font-family: var(--font-family);\n    font-size: var(--font-size-base);\n    line-height: 1.6;\n    color: var(--gray-800);\n    background-color: var(--gray-50);\n    overflow-x: hidden;\n}\n\n/* Layout */\n#app {\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n}\n\n/* Header */\n.header {\n    background: var(--white);\n    border-bottom: var(--border-width) solid var(--gray-200);\n    box-shadow: var(--shadow-sm);\n    position: sticky;\n    top: 0;\n    z-index: 100;\n}\n\n.header-content {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: var(--spacing-md) var(--spacing-xl);\n    max-width: 1400px;\n    margin: 0 auto;\n}\n\n.logo-section {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-md);\n}\n\n.logo {\n    height: 48px;\n    width: auto;\n}\n\n.company-info h1 {\n    font-size: var(--font-size-xl);\n    font-weight: 700;\n    color: var(--primary-color);\n    margin: 0;\n}\n\n.company-info span {\n    font-size: var(--font-size-sm);\n    color: var(--gray-600);\n    display: block;\n    margin-top: -2px;\n}\n\n/* Navigation */\n.main-nav {\n    display: flex;\n    gap: var(--spacing-xs);\n}\n\n.nav-btn {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-sm);\n    padding: var(--spacing-sm) var(--spacing-md);\n    border: none;\n    background: transparent;\n    color: var(--gray-600);\n    font-size: var(--font-size-sm);\n    font-weight: 500;\n    border-radius: var(--border-radius);\n    cursor: pointer;\n    transition: var(--transition);\n    white-space: nowrap;\n}\n\n.nav-btn:hover {\n    background: var(--gray-100);\n    color: var(--gray-800);\n}\n\n.nav-btn.active {\n    background: var(--primary-color);\n    color: var(--white);\n}\n\n.nav-btn i {\n    font-size: var(--font-size-base);\n}\n\n/* Header Actions */\n.header-actions {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-md);\n}\n\n.btn-icon {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 40px;\n    height: 40px;\n    border: var(--border-width) solid var(--gray-300);\n    background: var(--white);\n    color: var(--gray-600);\n    border-radius: var(--border-radius);\n    cursor: pointer;\n    transition: var(--transition);\n}\n\n.btn-icon:hover {\n    background: var(--gray-50);\n    border-color: var(--gray-400);\n    color: var(--gray-800);\n}\n\n.offline-indicator {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-xs);\n    padding: var(--spacing-xs) var(--spacing-sm);\n    border-radius: var(--border-radius);\n    font-size: var(--font-size-sm);\n    font-weight: 500;\n    background: var(--success-light);\n    color: var(--success);\n}\n\n.offline-indicator.offline {\n    background: var(--error-light);\n    color: var(--error);\n}\n\n/* Main Content */\n.main-content {\n    flex: 1;\n    padding: var(--spacing-xl);\n    max-width: 1400px;\n    margin: 0 auto;\n    width: 100%;\n}\n\n.content-section {\n    display: none;\n}\n\n.content-section.active {\n    display: block;\n}\n\n.section-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: var(--spacing-xl);\n}\n\n.section-header h2 {\n    font-size: var(--font-size-2xl);\n    font-weight: 700;\n    color: var(--gray-900);\n    margin: 0;\n}\n\n/* Buttons */\n.btn {\n    display: inline-flex;\n    align-items: center;\n    gap: var(--spacing-sm);\n    padding: var(--spacing-sm) var(--spacing-md);\n    border: var(--border-width) solid transparent;\n    border-radius: var(--border-radius);\n    font-size: var(--font-size-sm);\n    font-weight: 500;\n    text-decoration: none;\n    cursor: pointer;\n    transition: var(--transition);\n    white-space: nowrap;\n}\n\n.btn-primary {\n    background: var(--primary-color);\n    color: var(--white);\n}\n\n.btn-primary:hover {\n    background: var(--primary-dark);\n}\n\n.btn-secondary {\n    background: var(--white);\n    border-color: var(--gray-300);\n    color: var(--gray-700);\n}\n\n.btn-secondary:hover {\n    background: var(--gray-50);\n    border-color: var(--gray-400);\n}\n\n.btn-success {\n    background: var(--success);\n    color: var(--white);\n}\n\n.btn-success:hover {\n    background: #059669;\n}\n\n.btn-danger {\n    background: var(--error);\n    color: var(--white);\n}\n\n.btn-danger:hover {\n    background: #DC2626;\n}\n\n.btn-sm {\n    padding: var(--spacing-xs) var(--spacing-sm);\n    font-size: var(--font-size-xs);\n}\n\n/* Filters Bar */\n.filters-bar {\n    display: flex;\n    gap: var(--spacing-md);\n    margin-bottom: var(--spacing-xl);\n    flex-wrap: wrap;\n    align-items: center;\n}\n\n.search-box {\n    position: relative;\n    flex: 1;\n    min-width: 300px;\n}\n\n.search-box i {\n    position: absolute;\n    left: var(--spacing-sm);\n    top: 50%;\n    transform: translateY(-50%);\n    color: var(--gray-400);\n}\n\n.search-box input {\n    width: 100%;\n    padding: var(--spacing-sm) var(--spacing-sm) var(--spacing-sm) 2.5rem;\n    border: var(--border-width) solid var(--gray-300);\n    border-radius: var(--border-radius);\n    font-size: var(--font-size-sm);\n    background: var(--white);\n    transition: var(--transition);\n}\n\n.search-box input:focus {\n    outline: none;\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 3px var(--primary-light);\n}\n\n.filters-bar select,\n.filters-bar input[type=\"date\"] {\n    padding: var(--spacing-sm);\n    border: var(--border-width) solid var(--gray-300);\n    border-radius: var(--border-radius);\n    font-size: var(--font-size-sm);\n    background: var(--white);\n    color: var(--gray-700);\n    min-width: 150px;\n}\n\n.filters-bar select:focus,\n.filters-bar input[type=\"date\"]:focus {\n    outline: none;\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 3px var(--primary-light);\n}\n\n/* Utility Classes */\n.text-success {\n    color: var(--success) !important;\n}\n\n.text-danger {\n    color: var(--error) !important;\n}\n\n.text-warning {\n    color: var(--warning) !important;\n}\n\n.text-info {\n    color: var(--info) !important;\n}\n\n.hidden {\n    display: none !important;\n}\n\n.loading {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(255, 255, 255, 0.8);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 9999;\n}\n\n.spinner {\n    width: 40px;\n    height: 40px;\n    border: 4px solid var(--gray-200);\n    border-top: 4px solid var(--primary-color);\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n/* Status Badges */\n.status-badge {\n    display: inline-flex;\n    align-items: center;\n    padding: var(--spacing-xs) var(--spacing-sm);\n    border-radius: 9999px;\n    font-size: var(--font-size-xs);\n    font-weight: 500;\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n}\n\n.status-badge.active {\n    background: var(--success-light);\n    color: var(--success);\n}\n\n.status-badge.inactive {\n    background: var(--gray-200);\n    color: var(--gray-600);\n}\n\n.status-badge.planning {\n    background: var(--info-light);\n    color: var(--info);\n}\n\n.status-badge.completed {\n    background: var(--success-light);\n    color: var(--success);\n}\n\n.status-badge.on-hold {\n    background: var(--warning-light);\n    color: var(--warning);\n}\n\n.status-badge.available {\n    background: var(--success-light);\n    color: var(--success);\n}\n\n.status-badge.busy {\n    background: var(--warning-light);\n    color: var(--warning);\n}\n\n.status-badge.income {\n    background: var(--success-light);\n    color: var(--success);\n}\n\n.status-badge.expense {\n    background: var(--error-light);\n    color: var(--error);\n}\n\n/* Print Styles */\n@media print {\n    .header,\n    .filters-bar,\n    .btn,\n    .modal-overlay {\n        display: none !important;\n    }\n    \n    .main-content {\n        padding: 0;\n        max-width: none;\n    }\n    \n    .data-table {\n        font-size: 12px;\n    }\n    \n    .data-table th,\n    .data-table td {\n        padding: 4px 8px;\n    }\n}\n\n/* Timestamp styling */\n.timestamp {\n    color: var(--gray-500);\n    font-size: var(--font-size-xs);\n    font-weight: 400;\n    display: block;\n    margin-top: 2px;\n}\n\n/* Table date cell styling */\n.transactions-table td:first-child {\n    line-height: 1.4;\n}\n\n/* Responsive timestamp */\n@media (max-width: 768px) {\n    .timestamp {\n        font-size: 10px;\n    }\n}\n#add-transaction-btn {\n    display: none;\n}","size_bytes":10205},"styles/responsive.css":{"content":"/* Tablet Styles */\n@media (max-width: 1024px) {\n    .header-content {\n        padding: var(--spacing-md);\n    }\n    \n    .main-content {\n        padding: var(--spacing-lg);\n    }\n    \n    .main-nav {\n        overflow-x: auto;\n        scroll-behavior: smooth;\n        -webkit-overflow-scrolling: touch;\n    }\n    \n    .nav-btn {\n        white-space: nowrap;\n        flex-shrink: 0;\n    }\n    \n    .charts-grid {\n        grid-template-columns: 1fr;\n    }\n    \n    .chart-card canvas {\n        max-height: 250px;\n    }\n    \n    .stats-grid {\n        grid-template-columns: repeat(2, 1fr);\n    }\n    \n    .projects-grid {\n        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    }\n    \n    .calculators-grid {\n        grid-template-columns: 1fr;\n    }\n    \n    .form-row {\n        grid-template-columns: 1fr;\n    }\n}\n\n/* Mobile Styles */\n@media (max-width: 768px) {\n    .header-content {\n        flex-direction: column;\n        gap: var(--spacing-md);\n        align-items: stretch;\n    }\n    \n    .logo-section {\n        justify-content: center;\n    }\n    \n    .main-nav {\n        margin-top: 50px;\n        justify-content: space-between;\n        gap: 2px;\n        padding: 10px;\n        position: fixed;\n        left: 0;\n        bottom: 0;\n        background-color: var(--white);\n        border-top: 1px solid var(--primary-light);\n        width: -webkit-fill-available;\n    }\n    \n    .nav-btn {\n        padding: var(--spacing-sm);\n        font-size: var(--font-size-xs);\n        flex-direction: column;\n    }\n    \n    .nav-btn span {\n        display: none;\n    }\n    \n    .header-actions {\n        justify-content: center;\n    }\n    \n    .main-content {\n        padding: 1rem 1rem 7rem 1rem;\n    }\n    \n    .section-header {\n        flex-direction: column;\n        gap: var(--spacing-md);\n        align-items: stretch;\n    }\n    \n    .section-header h2 {\n        font-size: var(--font-size-xl);\n    }\n    \n    .filters-bar {\n        flex-direction: column;\n        gap: var(--spacing-sm);\n    }\n    \n    .search-box {\n        min-width: auto;\n    }\n    \n    .filters-bar select,\n    .filters-bar input[type=\"date\"] {\n        min-width: auto;\n        width: 100%;\n    }\n    \n    .stats-grid {\n        grid-template-columns: 1fr;\n    }\n    \n    .stat-card {\n        padding: var(--spacing-md);\n    }\n    \n    .charts-grid {\n        gap: var(--spacing-md);\n    }\n    \n    .chart-card {\n        padding: var(--spacing-md);\n    }\n    \n    .chart-card canvas {\n        max-height: 200px;\n    }\n    \n    .projects-grid {\n        grid-template-columns: 1fr;\n        gap: var(--spacing-md);\n    }\n    \n    .project-card {\n        padding: var(--spacing-md);\n    }\n    \n    .data-table-container {\n        overflow-x: auto;\n    }\n    \n    .data-table {\n        min-width: 600px;\n        font-size: var(--font-size-xs);\n    }\n    \n    .data-table th,\n    .data-table td {\n        padding: var(--spacing-sm);\n        min-width: 100px;\n    }\n    \n    .modal {\n        width: 95%;\n        margin: var(--spacing-md);\n    }\n    \n    .modal-header,\n    .modal-body {\n        padding: var(--spacing-md);\n    }\n    \n    .calculator-card {\n        padding: var(--spacing-md);\n    }\n    \n    .activity-item {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: var(--spacing-sm);\n    }\n    \n    .activity-content {\n        width: 100%;\n    }\n    \n    .toast-container {\n        top: var(--spacing-md);\n        right: var(--spacing-md);\n        left: var(--spacing-md);\n    }\n    \n    .toast {\n        min-width: auto;\n        width: 100%;\n    }\n}\n\n/* Small Mobile Styles */\n/* @media (max-width: 480px) {\n    .logo {\n        height: 36px;\n    }\n    \n    .company-info h1 {\n        font-size: var(--font-size-lg);\n    }\n    \n    .company-info span {\n        font-size: var(--font-size-xs);\n    }\n    \n    .nav-btn {\n        padding: var(--spacing-xs);\n        min-width: 48px;\n        height: 48px;\n        justify-content: center;\n    }\n    \n    .nav-btn i {\n        font-size: var(--font-size-lg);\n    }\n    \n    .main-content {\n        padding: var(--spacing-sm);\n    }\n    \n    .section-header h2 {\n        font-size: var(--font-size-lg);\n    }\n    \n    .btn {\n        padding: var(--spacing-sm);\n        font-size: var(--font-size-xs);\n    }\n    \n    .stat-card {\n        flex-direction: column;\n        text-align: center;\n        gap: var(--spacing-sm);\n    }\n    \n    .stat-icon {\n        align-self: center;\n    }\n    \n    .chart-card h3 {\n        font-size: var(--font-size-base);\n    }\n    \n    .project-header {\n        flex-direction: column;\n        gap: var(--spacing-sm);\n        align-items: flex-start;\n    }\n    \n    .project-actions {\n        width: 100%;\n        justify-content: space-between;\n    }\n    \n    .calculator-card h3 {\n        font-size: var(--font-size-base);\n        flex-direction: column;\n        gap: var(--spacing-xs);\n        text-align: center;\n    }\n    \n    .modal-actions {\n        flex-direction: column;\n        gap: var(--spacing-sm);\n    }\n    \n    .modal-actions .btn {\n        width: 100%;\n        justify-content: center;\n    }\n    \n    .action-buttons {\n        justify-content: center;\n        flex-wrap: wrap;\n    }\n} */\n\n/* Print Styles */\n@media print {\n    * {\n        -webkit-print-color-adjust: exact !important;\n        color-adjust: exact !important;\n    }\n    \n    .header,\n    .filters-bar,\n    .section-header .btn,\n    .action-buttons,\n    .modal-overlay,\n    .toast-container {\n        display: none !important;\n    }\n    \n    .main-content {\n        padding: 0;\n        max-width: none;\n    }\n    \n    .content-section {\n        display: block !important;\n        page-break-after: always;\n    }\n    \n    .content-section:last-child {\n        page-break-after: auto;\n    }\n    \n    .section-header h2 {\n        font-size: 18pt;\n        margin-bottom: 12pt;\n        color: black !important;\n    }\n    \n    .data-table {\n        font-size: 9pt;\n        border-collapse: collapse;\n    }\n    \n    .data-table th {\n        background: #f5f5f5 !important;\n        color: black !important;\n        border: 1pt solid #ccc !important;\n        padding: 6pt;\n    }\n    \n    .data-table td {\n        border: 1pt solid #ccc !important;\n        padding: 6pt;\n    }\n    \n    .stat-card,\n    .chart-card,\n    .project-card {\n        border: 1pt solid #ccc !important;\n        box-shadow: none !important;\n        page-break-inside: avoid;\n        margin-bottom: 12pt;\n    }\n    \n    .charts-grid {\n        grid-template-columns: 1fr 1fr;\n        gap: 12pt;\n    }\n    \n    .projects-grid {\n        grid-template-columns: 1fr 1fr;\n        gap: 12pt;\n    }\n    \n    .calculator-card {\n        page-break-inside: avoid;\n        border: 1pt solid #ccc !important;\n        margin-bottom: 12pt;\n    }\n}\n\n/* High DPI Displays */\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    .logo {\n        image-rendering: -webkit-optimize-contrast;\n        image-rendering: crisp-edges;\n    }\n    \n    .data-table {\n        font-feature-settings: \"liga\" 0;\n    }\n}\n\n/* Reduced Motion */\n@media (prefers-reduced-motion: reduce) {\n    * {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n    }\n    \n    .spinner {\n        animation: none;\n    }\n    \n    .modal {\n        transform: none !important;\n    }\n    \n    .toast {\n        transform: none !important;\n    }\n}\n\n/* High Contrast Mode */\n/* @media (prefers-contrast: high) {\n    :root {\n        --primary-color: #000000;\n        --primary-dark: #000000;\n        --secondary-color: #ffffff;\n        --gray-300: #666666;\n        --gray-600: #333333;\n        --gray-800: #000000;\n    }\n    \n    .btn-primary {\n        border: 2px solid;\n    }\n    \n    .data-table th,\n    .data-table td {\n        border: 1px solid;\n    }\n    \n    .status-badge {\n        border: 1px solid;\n    }\n} */\n\n/* Dark Mode Support */\n/* @media (prefers-color-scheme: dark) {\n    :root {\n        --white: #1F2937;\n        --gray-50: #111827;\n        --gray-100: #1F2937;\n        --gray-200: #374151;\n        --gray-300: #4B5563;\n        --gray-600: #D1D5DB;\n        --gray-700: #F3F4F6;\n        --gray-800: #F9FAFB;\n        --gray-900: #FFFFFF;\n    }\n    \n    body {\n        background-color: var(--gray-50);\n        color: var(--gray-800);\n    }\n    \n    .header {\n        background: var(--gray-100);\n        border-bottom-color: var(--gray-300);\n    }\n    \n    .data-table th {\n        background: var(--gray-200);\n    }\n    \n    .search-box input,\n    .filters-bar select,\n    .filters-bar input[type=\"date\"],\n    .form-group input,\n    .form-group select,\n    .form-group textarea {\n        background: var(--gray-100);\n        border-color: var(--gray-300);\n        color: var(--gray-800);\n    }\n} */\n","size_bytes":8807}},"version":1}